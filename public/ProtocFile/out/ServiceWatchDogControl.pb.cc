// Generated by the protocol buffer compiler.  DO NOT EDIT!
#include "StdAfx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServiceWatchDogControl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* ServiceWatchDogControlReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceWatchDogControlReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceWatchDogControlRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceWatchDogControlRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerWatchDogCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServiceWatchDogControl_2eproto() {
  protobuf_AddDesc_ServiceWatchDogControl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServiceWatchDogControl.proto");
  GOOGLE_CHECK(file != NULL);
  ServiceWatchDogControlReq_descriptor_ = file->message_type(0);
  static const int ServiceWatchDogControlReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlReq, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlReq, control_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlReq, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlReq, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlReq, shell_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlReq, shell_dir_),
  };
  ServiceWatchDogControlReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceWatchDogControlReq_descriptor_,
      ServiceWatchDogControlReq::default_instance_,
      ServiceWatchDogControlReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceWatchDogControlReq));
  ServiceWatchDogControlRsp_descriptor_ = file->message_type(1);
  static const int ServiceWatchDogControlRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlRsp, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlRsp, control_type_),
  };
  ServiceWatchDogControlRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceWatchDogControlRsp_descriptor_,
      ServiceWatchDogControlRsp::default_instance_,
      ServiceWatchDogControlRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceWatchDogControlRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceWatchDogControlRsp));
  ServerWatchDogCmd_descriptor_ = file->enum_type(0);
  ServerType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServiceWatchDogControl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceWatchDogControlReq_descriptor_, &ServiceWatchDogControlReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceWatchDogControlRsp_descriptor_, &ServiceWatchDogControlRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServiceWatchDogControl_2eproto() {
  delete ServiceWatchDogControlReq::default_instance_;
  delete ServiceWatchDogControlReq_reflection_;
  delete ServiceWatchDogControlRsp::default_instance_;
  delete ServiceWatchDogControlRsp_reflection_;
}

void protobuf_AddDesc_ServiceWatchDogControl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_cmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034ServiceWatchDogControl.proto\022\010cms_8120"
    "\032\tcmd.proto\"\224\001\n\031ServiceWatchDogControlRe"
    "q\022\021\n\tdata_type\030\001 \001(\005\022\024\n\014control_type\030\002 \001"
    "(\005\022\023\n\013server_type\030\003 \001(\005\022\023\n\013server_name\030\004"
    " \001(\t\022\021\n\tshell_cmd\030\005 \001(\t\022\021\n\tshell_dir\030\006 \001"
    "(\t\"T\n\031ServiceWatchDogControlRsp\022\021\n\tdata_"
    "type\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022\024\n\014control_ty"
    "pe\030\003 \001(\005*\241\001\n\021ServerWatchDogCmd\022\021\n\014SERVER"
    "_START\020\221N\022\020\n\013SERVER_STOP\020\222N\022\025\n\020COMPUTER_"
    "RESTART\020\223N\022\023\n\016SERVER_INSTALL\020\224N\022\025\n\020SERVE"
    "R_UNINSTALL\020\225N\022\023\n\016SERVER_RESTART\020\226N\022\017\n\nS"
    "ERVER_CMD\020\227N*\203\001\n\nServerType\022\021\n\014SVC_RECGU"
    "ARD\020\361.\022\017\n\nSVC_ADJUST\020\362.\022\016\n\tSVC_TRANS\020\363.\022"
    "\014\n\007SVC_VRM\020\364.\022\013\n\006SVC_DC\020\365.\022\023\n\016SVC_CENTET"
    "_WEB\020\366.\022\021\n\014SVC_COLL_WEB\020\367.", 586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServiceWatchDogControl.proto", &protobuf_RegisterTypes);
  ServiceWatchDogControlReq::default_instance_ = new ServiceWatchDogControlReq();
  ServiceWatchDogControlRsp::default_instance_ = new ServiceWatchDogControlRsp();
  ServiceWatchDogControlReq::default_instance_->InitAsDefaultInstance();
  ServiceWatchDogControlRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServiceWatchDogControl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServiceWatchDogControl_2eproto {
  StaticDescriptorInitializer_ServiceWatchDogControl_2eproto() {
    protobuf_AddDesc_ServiceWatchDogControl_2eproto();
  }
} static_descriptor_initializer_ServiceWatchDogControl_2eproto_;

const ::google::protobuf::EnumDescriptor* ServerWatchDogCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerWatchDogCmd_descriptor_;
}
bool ServerWatchDogCmd_IsValid(int value) {
  switch(value) {
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerType_descriptor_;
}
bool ServerType_IsValid(int value) {
  switch(value) {
    case 6001:
    case 6002:
    case 6003:
    case 6004:
    case 6005:
    case 6006:
    case 6007:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceWatchDogControlReq::kDataTypeFieldNumber;
const int ServiceWatchDogControlReq::kControlTypeFieldNumber;
const int ServiceWatchDogControlReq::kServerTypeFieldNumber;
const int ServiceWatchDogControlReq::kServerNameFieldNumber;
const int ServiceWatchDogControlReq::kShellCmdFieldNumber;
const int ServiceWatchDogControlReq::kShellDirFieldNumber;
#endif  // !_MSC_VER

ServiceWatchDogControlReq::ServiceWatchDogControlReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceWatchDogControlReq::InitAsDefaultInstance() {
}

ServiceWatchDogControlReq::ServiceWatchDogControlReq(const ServiceWatchDogControlReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceWatchDogControlReq::SharedCtor() {
  _cached_size_ = 0;
  data_type_ = 0;
  control_type_ = 0;
  server_type_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shell_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shell_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceWatchDogControlReq::~ServiceWatchDogControlReq() {
  SharedDtor();
}

void ServiceWatchDogControlReq::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (shell_cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete shell_cmd_;
  }
  if (shell_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete shell_dir_;
  }
  if (this != default_instance_) {
  }
}

void ServiceWatchDogControlReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceWatchDogControlReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceWatchDogControlReq_descriptor_;
}

const ServiceWatchDogControlReq& ServiceWatchDogControlReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceWatchDogControl_2eproto();  return *default_instance_;
}

ServiceWatchDogControlReq* ServiceWatchDogControlReq::default_instance_ = NULL;

ServiceWatchDogControlReq* ServiceWatchDogControlReq::New() const {
  return new ServiceWatchDogControlReq;
}

void ServiceWatchDogControlReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_type_ = 0;
    control_type_ = 0;
    server_type_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_shell_cmd()) {
      if (shell_cmd_ != &::google::protobuf::internal::kEmptyString) {
        shell_cmd_->clear();
      }
    }
    if (has_shell_dir()) {
      if (shell_dir_ != &::google::protobuf::internal::kEmptyString) {
        shell_dir_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceWatchDogControlReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_)));
          set_has_data_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_control_type;
        break;
      }
      
      // optional int32 control_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_control_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_type_)));
          set_has_control_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_type;
        break;
      }
      
      // optional int32 server_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_name;
        break;
      }
      
      // optional string server_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_shell_cmd;
        break;
      }
      
      // optional string shell_cmd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shell_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shell_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shell_cmd().data(), this->shell_cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_shell_dir;
        break;
      }
      
      // optional string shell_dir = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shell_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shell_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shell_dir().data(), this->shell_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceWatchDogControlReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 data_type = 1;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_type(), output);
  }
  
  // optional int32 control_type = 2;
  if (has_control_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->control_type(), output);
  }
  
  // optional int32 server_type = 3;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_type(), output);
  }
  
  // optional string server_name = 4;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->server_name(), output);
  }
  
  // optional string shell_cmd = 5;
  if (has_shell_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shell_cmd().data(), this->shell_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->shell_cmd(), output);
  }
  
  // optional string shell_dir = 6;
  if (has_shell_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shell_dir().data(), this->shell_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->shell_dir(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceWatchDogControlReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 data_type = 1;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data_type(), target);
  }
  
  // optional int32 control_type = 2;
  if (has_control_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->control_type(), target);
  }
  
  // optional int32 server_type = 3;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_type(), target);
  }
  
  // optional string server_name = 4;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_name(), target);
  }
  
  // optional string shell_cmd = 5;
  if (has_shell_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shell_cmd().data(), this->shell_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->shell_cmd(), target);
  }
  
  // optional string shell_dir = 6;
  if (has_shell_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shell_dir().data(), this->shell_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->shell_dir(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceWatchDogControlReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 data_type = 1;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type());
    }
    
    // optional int32 control_type = 2;
    if (has_control_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_type());
    }
    
    // optional int32 server_type = 3;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_type());
    }
    
    // optional string server_name = 4;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }
    
    // optional string shell_cmd = 5;
    if (has_shell_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shell_cmd());
    }
    
    // optional string shell_dir = 6;
    if (has_shell_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shell_dir());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceWatchDogControlReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceWatchDogControlReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceWatchDogControlReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceWatchDogControlReq::MergeFrom(const ServiceWatchDogControlReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_control_type()) {
      set_control_type(from.control_type());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_shell_cmd()) {
      set_shell_cmd(from.shell_cmd());
    }
    if (from.has_shell_dir()) {
      set_shell_dir(from.shell_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceWatchDogControlReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceWatchDogControlReq::CopyFrom(const ServiceWatchDogControlReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWatchDogControlReq::IsInitialized() const {
  
  return true;
}

void ServiceWatchDogControlReq::Swap(ServiceWatchDogControlReq* other) {
  if (other != this) {
    std::swap(data_type_, other->data_type_);
    std::swap(control_type_, other->control_type_);
    std::swap(server_type_, other->server_type_);
    std::swap(server_name_, other->server_name_);
    std::swap(shell_cmd_, other->shell_cmd_);
    std::swap(shell_dir_, other->shell_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceWatchDogControlReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceWatchDogControlReq_descriptor_;
  metadata.reflection = ServiceWatchDogControlReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceWatchDogControlRsp::kDataTypeFieldNumber;
const int ServiceWatchDogControlRsp::kResultFieldNumber;
const int ServiceWatchDogControlRsp::kControlTypeFieldNumber;
#endif  // !_MSC_VER

ServiceWatchDogControlRsp::ServiceWatchDogControlRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceWatchDogControlRsp::InitAsDefaultInstance() {
}

ServiceWatchDogControlRsp::ServiceWatchDogControlRsp(const ServiceWatchDogControlRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceWatchDogControlRsp::SharedCtor() {
  _cached_size_ = 0;
  data_type_ = 0;
  result_ = 0;
  control_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceWatchDogControlRsp::~ServiceWatchDogControlRsp() {
  SharedDtor();
}

void ServiceWatchDogControlRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceWatchDogControlRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceWatchDogControlRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceWatchDogControlRsp_descriptor_;
}

const ServiceWatchDogControlRsp& ServiceWatchDogControlRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceWatchDogControl_2eproto();  return *default_instance_;
}

ServiceWatchDogControlRsp* ServiceWatchDogControlRsp::default_instance_ = NULL;

ServiceWatchDogControlRsp* ServiceWatchDogControlRsp::New() const {
  return new ServiceWatchDogControlRsp;
}

void ServiceWatchDogControlRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_type_ = 0;
    result_ = 0;
    control_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceWatchDogControlRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_)));
          set_has_data_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_control_type;
        break;
      }
      
      // optional int32 control_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_control_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_type_)));
          set_has_control_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceWatchDogControlRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 data_type = 1;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_type(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional int32 control_type = 3;
  if (has_control_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->control_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceWatchDogControlRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 data_type = 1;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data_type(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional int32 control_type = 3;
  if (has_control_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->control_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceWatchDogControlRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 data_type = 1;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int32 control_type = 3;
    if (has_control_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceWatchDogControlRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceWatchDogControlRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceWatchDogControlRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceWatchDogControlRsp::MergeFrom(const ServiceWatchDogControlRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_control_type()) {
      set_control_type(from.control_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceWatchDogControlRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceWatchDogControlRsp::CopyFrom(const ServiceWatchDogControlRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWatchDogControlRsp::IsInitialized() const {
  
  return true;
}

void ServiceWatchDogControlRsp::Swap(ServiceWatchDogControlRsp* other) {
  if (other != this) {
    std::swap(data_type_, other->data_type_);
    std::swap(result_, other->result_);
    std::swap(control_type_, other->control_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceWatchDogControlRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceWatchDogControlRsp_descriptor_;
  metadata.reflection = ServiceWatchDogControlRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
