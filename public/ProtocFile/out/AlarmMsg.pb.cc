// Generated by the protocol buffer compiler.  DO NOT EDIT!
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AlarmMsg.pb.h"
#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AlarmMsg {

namespace {

const ::google::protobuf::Descriptor* PastPrimeNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PastPrimeNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Alarm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alarm_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthorizeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthorizeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthorizeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthorizeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPrimeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPrimeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPrimeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPrimeRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AlarmId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AlarmMsg_2eproto() {
  protobuf_AddDesc_AlarmMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AlarmMsg.proto");
  GOOGLE_CHECK(file != NULL);
  PastPrimeNum_descriptor_ = file->message_type(0);
  static const int PastPrimeNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PastPrimeNum, prime_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PastPrimeNum, process_time_),
  };
  PastPrimeNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PastPrimeNum_descriptor_,
      PastPrimeNum::default_instance_,
      PastPrimeNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PastPrimeNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PastPrimeNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PastPrimeNum));
  Alarm_descriptor_ = file->message_type(1);
  static const int Alarm_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, svctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, dwmsgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, alarmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, alarmstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, dwrev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, alarminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, alarmhost_),
  };
  Alarm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Alarm_descriptor_,
      Alarm::default_instance_,
      Alarm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Alarm));
  AuthorizeReq_descriptor_ = file->message_type(2);
  static const int AuthorizeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeReq, alarminfo_),
  };
  AuthorizeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthorizeReq_descriptor_,
      AuthorizeReq::default_instance_,
      AuthorizeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthorizeReq));
  AuthorizeRsp_descriptor_ = file->message_type(3);
  static const int AuthorizeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeRsp, alarminfo_),
  };
  AuthorizeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthorizeRsp_descriptor_,
      AuthorizeRsp::default_instance_,
      AuthorizeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthorizeRsp));
  CheckPrimeReq_descriptor_ = file->message_type(4);
  static const int CheckPrimeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPrimeReq, alarminfo_),
  };
  CheckPrimeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckPrimeReq_descriptor_,
      CheckPrimeReq::default_instance_,
      CheckPrimeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPrimeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPrimeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckPrimeReq));
  CheckPrimeRsp_descriptor_ = file->message_type(5);
  static const int CheckPrimeRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPrimeRsp, alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPrimeRsp, number_checked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPrimeRsp, process_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPrimeRsp, past_prime_num_list_),
  };
  CheckPrimeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckPrimeRsp_descriptor_,
      CheckPrimeRsp::default_instance_,
      CheckPrimeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPrimeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPrimeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckPrimeRsp));
  ServerType_descriptor_ = file->enum_type(0);
  AlarmId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AlarmMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PastPrimeNum_descriptor_, &PastPrimeNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Alarm_descriptor_, &Alarm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthorizeReq_descriptor_, &AuthorizeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthorizeRsp_descriptor_, &AuthorizeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckPrimeReq_descriptor_, &CheckPrimeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckPrimeRsp_descriptor_, &CheckPrimeRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AlarmMsg_2eproto() {
  delete PastPrimeNum::default_instance_;
  delete PastPrimeNum_reflection_;
  delete Alarm::default_instance_;
  delete Alarm_reflection_;
  delete AuthorizeReq::default_instance_;
  delete AuthorizeReq_reflection_;
  delete AuthorizeRsp::default_instance_;
  delete AuthorizeRsp_reflection_;
  delete CheckPrimeReq::default_instance_;
  delete CheckPrimeReq_reflection_;
  delete CheckPrimeRsp::default_instance_;
  delete CheckPrimeRsp_reflection_;
}

void protobuf_AddDesc_AlarmMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016AlarmMsg.proto\022\010AlarmMsg\"7\n\014PastPrimeN"
    "um\022\021\n\tprime_num\030\001 \002(\005\022\024\n\014process_time\030\002 "
    "\002(\005\"\251\001\n\005Alarm\022\017\n\007SvcType\030\001 \002(\t\022\021\n\tdwMsgT"
    "ype\030\002 \002(\t\022\021\n\talarmType\030\003 \002(\t\022\016\n\006userid\030\004"
    " \001(\t\022\017\n\007channel\030\005 \001(\t\022\023\n\013alarmStatus\030\006 \001"
    "(\t\022\r\n\005dwRev\030\007 \001(\t\022\021\n\talarmInfo\030\010 \001(\t\022\021\n\t"
    "alarmhost\030\t \001(\t\"2\n\014AuthorizeReq\022\"\n\talarm"
    "Info\030\001 \002(\0132\017.AlarmMsg.Alarm\"2\n\014Authorize"
    "Rsp\022\"\n\talarmInfo\030\001 \002(\0132\017.AlarmMsg.Alarm\""
    "3\n\rCheckPrimeReq\022\"\n\talarmInfo\030\001 \002(\0132\017.Al"
    "armMsg.Alarm\"\222\001\n\rCheckPrimeRsp\022\036\n\005Alarm\030"
    "\001 \002(\0132\017.AlarmMsg.Alarm\022\026\n\016number_checked"
    "\030\002 \002(\005\022\024\n\014process_time\030! \001(\005\0223\n\023past_pri"
    "me_num_list\030A \003(\0132\026.AlarmMsg.PastPrimeNu"
    "m*0\n\nServerType\022\020\n\014ALARM_CLIENT\020%\022\020\n\014ALA"
    "RM_SERVER\020&*Y\n\007AlarmId\022\021\n\rAUTHORIZE_REQ\020"
    "\001\022\021\n\rAUTHORIZE_RSP\020\002\022\023\n\017CHECK_PRIME_REQ\020"
    "\003\022\023\n\017CHECK_PRIME_RSP\020\004", 702);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AlarmMsg.proto", &protobuf_RegisterTypes);
  PastPrimeNum::default_instance_ = new PastPrimeNum();
  Alarm::default_instance_ = new Alarm();
  AuthorizeReq::default_instance_ = new AuthorizeReq();
  AuthorizeRsp::default_instance_ = new AuthorizeRsp();
  CheckPrimeReq::default_instance_ = new CheckPrimeReq();
  CheckPrimeRsp::default_instance_ = new CheckPrimeRsp();
  PastPrimeNum::default_instance_->InitAsDefaultInstance();
  Alarm::default_instance_->InitAsDefaultInstance();
  AuthorizeReq::default_instance_->InitAsDefaultInstance();
  AuthorizeRsp::default_instance_->InitAsDefaultInstance();
  CheckPrimeReq::default_instance_->InitAsDefaultInstance();
  CheckPrimeRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AlarmMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AlarmMsg_2eproto {
  StaticDescriptorInitializer_AlarmMsg_2eproto() {
    protobuf_AddDesc_AlarmMsg_2eproto();
  }
} static_descriptor_initializer_AlarmMsg_2eproto_;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerType_descriptor_;
}
bool ServerType_IsValid(int value) {
  switch(value) {
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AlarmId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmId_descriptor_;
}
bool AlarmId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PastPrimeNum::kPrimeNumFieldNumber;
const int PastPrimeNum::kProcessTimeFieldNumber;
#endif  // !_MSC_VER

PastPrimeNum::PastPrimeNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PastPrimeNum::InitAsDefaultInstance() {
}

PastPrimeNum::PastPrimeNum(const PastPrimeNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PastPrimeNum::SharedCtor() {
  _cached_size_ = 0;
  prime_num_ = 0;
  process_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PastPrimeNum::~PastPrimeNum() {
  SharedDtor();
}

void PastPrimeNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PastPrimeNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PastPrimeNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PastPrimeNum_descriptor_;
}

const PastPrimeNum& PastPrimeNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmMsg_2eproto();  return *default_instance_;
}

PastPrimeNum* PastPrimeNum::default_instance_ = NULL;

PastPrimeNum* PastPrimeNum::New() const {
  return new PastPrimeNum;
}

void PastPrimeNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prime_num_ = 0;
    process_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PastPrimeNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 prime_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prime_num_)));
          set_has_prime_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_process_time;
        break;
      }
      
      // required int32 process_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_time_)));
          set_has_process_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PastPrimeNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 prime_num = 1;
  if (has_prime_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prime_num(), output);
  }
  
  // required int32 process_time = 2;
  if (has_process_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->process_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PastPrimeNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 prime_num = 1;
  if (has_prime_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prime_num(), target);
  }
  
  // required int32 process_time = 2;
  if (has_process_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->process_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PastPrimeNum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 prime_num = 1;
    if (has_prime_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prime_num());
    }
    
    // required int32 process_time = 2;
    if (has_process_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PastPrimeNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PastPrimeNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PastPrimeNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PastPrimeNum::MergeFrom(const PastPrimeNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prime_num()) {
      set_prime_num(from.prime_num());
    }
    if (from.has_process_time()) {
      set_process_time(from.process_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PastPrimeNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PastPrimeNum::CopyFrom(const PastPrimeNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PastPrimeNum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PastPrimeNum::Swap(PastPrimeNum* other) {
  if (other != this) {
    std::swap(prime_num_, other->prime_num_);
    std::swap(process_time_, other->process_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PastPrimeNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PastPrimeNum_descriptor_;
  metadata.reflection = PastPrimeNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Alarm::kSvcTypeFieldNumber;
const int Alarm::kDwMsgTypeFieldNumber;
const int Alarm::kAlarmTypeFieldNumber;
const int Alarm::kUseridFieldNumber;
const int Alarm::kChannelFieldNumber;
const int Alarm::kAlarmStatusFieldNumber;
const int Alarm::kDwRevFieldNumber;
const int Alarm::kAlarmInfoFieldNumber;
const int Alarm::kAlarmhostFieldNumber;
#endif  // !_MSC_VER

Alarm::Alarm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Alarm::InitAsDefaultInstance() {
}

Alarm::Alarm(const Alarm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Alarm::SharedCtor() {
  _cached_size_ = 0;
  svctype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dwmsgtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarmtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarmstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dwrev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarmhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Alarm::~Alarm() {
  SharedDtor();
}

void Alarm::SharedDtor() {
  if (svctype_ != &::google::protobuf::internal::kEmptyString) {
    delete svctype_;
  }
  if (dwmsgtype_ != &::google::protobuf::internal::kEmptyString) {
    delete dwmsgtype_;
  }
  if (alarmtype_ != &::google::protobuf::internal::kEmptyString) {
    delete alarmtype_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (alarmstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete alarmstatus_;
  }
  if (dwrev_ != &::google::protobuf::internal::kEmptyString) {
    delete dwrev_;
  }
  if (alarminfo_ != &::google::protobuf::internal::kEmptyString) {
    delete alarminfo_;
  }
  if (alarmhost_ != &::google::protobuf::internal::kEmptyString) {
    delete alarmhost_;
  }
  if (this != default_instance_) {
  }
}

void Alarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alarm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alarm_descriptor_;
}

const Alarm& Alarm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmMsg_2eproto();  return *default_instance_;
}

Alarm* Alarm::default_instance_ = NULL;

Alarm* Alarm::New() const {
  return new Alarm;
}

void Alarm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_svctype()) {
      if (svctype_ != &::google::protobuf::internal::kEmptyString) {
        svctype_->clear();
      }
    }
    if (has_dwmsgtype()) {
      if (dwmsgtype_ != &::google::protobuf::internal::kEmptyString) {
        dwmsgtype_->clear();
      }
    }
    if (has_alarmtype()) {
      if (alarmtype_ != &::google::protobuf::internal::kEmptyString) {
        alarmtype_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    if (has_alarmstatus()) {
      if (alarmstatus_ != &::google::protobuf::internal::kEmptyString) {
        alarmstatus_->clear();
      }
    }
    if (has_dwrev()) {
      if (dwrev_ != &::google::protobuf::internal::kEmptyString) {
        dwrev_->clear();
      }
    }
    if (has_alarminfo()) {
      if (alarminfo_ != &::google::protobuf::internal::kEmptyString) {
        alarminfo_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_alarmhost()) {
      if (alarmhost_ != &::google::protobuf::internal::kEmptyString) {
        alarmhost_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Alarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string SvcType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svctype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svctype().data(), this->svctype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dwMsgType;
        break;
      }
      
      // required string dwMsgType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dwMsgType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dwmsgtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dwmsgtype().data(), this->dwmsgtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_alarmType;
        break;
      }
      
      // required string alarmType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarmType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alarmtype().data(), this->alarmtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userid;
        break;
      }
      
      // optional string userid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }
      
      // optional string channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_alarmStatus;
        break;
      }
      
      // optional string alarmStatus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarmStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alarmstatus().data(), this->alarmstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dwRev;
        break;
      }
      
      // optional string dwRev = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dwRev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dwrev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dwrev().data(), this->dwrev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_alarmInfo;
        break;
      }
      
      // optional string alarmInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarmInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarminfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alarminfo().data(), this->alarminfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_alarmhost;
        break;
      }
      
      // optional string alarmhost = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarmhost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alarmhost().data(), this->alarmhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Alarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string SvcType = 1;
  if (has_svctype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svctype().data(), this->svctype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->svctype(), output);
  }
  
  // required string dwMsgType = 2;
  if (has_dwmsgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dwmsgtype().data(), this->dwmsgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dwmsgtype(), output);
  }
  
  // required string alarmType = 3;
  if (has_alarmtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmtype().data(), this->alarmtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->alarmtype(), output);
  }
  
  // optional string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }
  
  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel(), output);
  }
  
  // optional string alarmStatus = 6;
  if (has_alarmstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmstatus().data(), this->alarmstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->alarmstatus(), output);
  }
  
  // optional string dwRev = 7;
  if (has_dwrev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dwrev().data(), this->dwrev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->dwrev(), output);
  }
  
  // optional string alarmInfo = 8;
  if (has_alarminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarminfo().data(), this->alarminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->alarminfo(), output);
  }
  
  // optional string alarmhost = 9;
  if (has_alarmhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmhost().data(), this->alarmhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->alarmhost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Alarm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string SvcType = 1;
  if (has_svctype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svctype().data(), this->svctype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->svctype(), target);
  }
  
  // required string dwMsgType = 2;
  if (has_dwmsgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dwmsgtype().data(), this->dwmsgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dwmsgtype(), target);
  }
  
  // required string alarmType = 3;
  if (has_alarmtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmtype().data(), this->alarmtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->alarmtype(), target);
  }
  
  // optional string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }
  
  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel(), target);
  }
  
  // optional string alarmStatus = 6;
  if (has_alarmstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmstatus().data(), this->alarmstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->alarmstatus(), target);
  }
  
  // optional string dwRev = 7;
  if (has_dwrev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dwrev().data(), this->dwrev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dwrev(), target);
  }
  
  // optional string alarmInfo = 8;
  if (has_alarminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarminfo().data(), this->alarminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->alarminfo(), target);
  }
  
  // optional string alarmhost = 9;
  if (has_alarmhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmhost().data(), this->alarmhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->alarmhost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Alarm::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string SvcType = 1;
    if (has_svctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svctype());
    }
    
    // required string dwMsgType = 2;
    if (has_dwmsgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dwmsgtype());
    }
    
    // required string alarmType = 3;
    if (has_alarmtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarmtype());
    }
    
    // optional string userid = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }
    
    // optional string alarmStatus = 6;
    if (has_alarmstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarmstatus());
    }
    
    // optional string dwRev = 7;
    if (has_dwrev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dwrev());
    }
    
    // optional string alarmInfo = 8;
    if (has_alarminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarminfo());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string alarmhost = 9;
    if (has_alarmhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarmhost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alarm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Alarm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Alarm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Alarm::MergeFrom(const Alarm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svctype()) {
      set_svctype(from.svctype());
    }
    if (from.has_dwmsgtype()) {
      set_dwmsgtype(from.dwmsgtype());
    }
    if (from.has_alarmtype()) {
      set_alarmtype(from.alarmtype());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_alarmstatus()) {
      set_alarmstatus(from.alarmstatus());
    }
    if (from.has_dwrev()) {
      set_dwrev(from.dwrev());
    }
    if (from.has_alarminfo()) {
      set_alarminfo(from.alarminfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alarmhost()) {
      set_alarmhost(from.alarmhost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Alarm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alarm::CopyFrom(const Alarm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alarm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Alarm::Swap(Alarm* other) {
  if (other != this) {
    std::swap(svctype_, other->svctype_);
    std::swap(dwmsgtype_, other->dwmsgtype_);
    std::swap(alarmtype_, other->alarmtype_);
    std::swap(userid_, other->userid_);
    std::swap(channel_, other->channel_);
    std::swap(alarmstatus_, other->alarmstatus_);
    std::swap(dwrev_, other->dwrev_);
    std::swap(alarminfo_, other->alarminfo_);
    std::swap(alarmhost_, other->alarmhost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Alarm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alarm_descriptor_;
  metadata.reflection = Alarm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthorizeReq::kAlarmInfoFieldNumber;
#endif  // !_MSC_VER

AuthorizeReq::AuthorizeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthorizeReq::InitAsDefaultInstance() {
  alarminfo_ = const_cast< ::AlarmMsg::Alarm*>(&::AlarmMsg::Alarm::default_instance());
}

AuthorizeReq::AuthorizeReq(const AuthorizeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthorizeReq::SharedCtor() {
  _cached_size_ = 0;
  alarminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthorizeReq::~AuthorizeReq() {
  SharedDtor();
}

void AuthorizeReq::SharedDtor() {
  if (this != default_instance_) {
    delete alarminfo_;
  }
}

void AuthorizeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthorizeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthorizeReq_descriptor_;
}

const AuthorizeReq& AuthorizeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmMsg_2eproto();  return *default_instance_;
}

AuthorizeReq* AuthorizeReq::default_instance_ = NULL;

AuthorizeReq* AuthorizeReq::New() const {
  return new AuthorizeReq;
}

void AuthorizeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alarminfo()) {
      if (alarminfo_ != NULL) alarminfo_->::AlarmMsg::Alarm::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthorizeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AlarmMsg.Alarm alarmInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthorizeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AlarmMsg.Alarm alarmInfo = 1;
  if (has_alarminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alarminfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthorizeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AlarmMsg.Alarm alarmInfo = 1;
  if (has_alarminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alarminfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthorizeReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AlarmMsg.Alarm alarmInfo = 1;
    if (has_alarminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarminfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorizeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthorizeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthorizeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthorizeReq::MergeFrom(const AuthorizeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarminfo()) {
      mutable_alarminfo()->::AlarmMsg::Alarm::MergeFrom(from.alarminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthorizeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthorizeReq::CopyFrom(const AuthorizeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_alarminfo()) {
    if (!this->alarminfo().IsInitialized()) return false;
  }
  return true;
}

void AuthorizeReq::Swap(AuthorizeReq* other) {
  if (other != this) {
    std::swap(alarminfo_, other->alarminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthorizeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthorizeReq_descriptor_;
  metadata.reflection = AuthorizeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthorizeRsp::kAlarmInfoFieldNumber;
#endif  // !_MSC_VER

AuthorizeRsp::AuthorizeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthorizeRsp::InitAsDefaultInstance() {
  alarminfo_ = const_cast< ::AlarmMsg::Alarm*>(&::AlarmMsg::Alarm::default_instance());
}

AuthorizeRsp::AuthorizeRsp(const AuthorizeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthorizeRsp::SharedCtor() {
  _cached_size_ = 0;
  alarminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthorizeRsp::~AuthorizeRsp() {
  SharedDtor();
}

void AuthorizeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete alarminfo_;
  }
}

void AuthorizeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthorizeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthorizeRsp_descriptor_;
}

const AuthorizeRsp& AuthorizeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmMsg_2eproto();  return *default_instance_;
}

AuthorizeRsp* AuthorizeRsp::default_instance_ = NULL;

AuthorizeRsp* AuthorizeRsp::New() const {
  return new AuthorizeRsp;
}

void AuthorizeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alarminfo()) {
      if (alarminfo_ != NULL) alarminfo_->::AlarmMsg::Alarm::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthorizeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AlarmMsg.Alarm alarmInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthorizeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AlarmMsg.Alarm alarmInfo = 1;
  if (has_alarminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alarminfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthorizeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AlarmMsg.Alarm alarmInfo = 1;
  if (has_alarminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alarminfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthorizeRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AlarmMsg.Alarm alarmInfo = 1;
    if (has_alarminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarminfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorizeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthorizeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthorizeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthorizeRsp::MergeFrom(const AuthorizeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarminfo()) {
      mutable_alarminfo()->::AlarmMsg::Alarm::MergeFrom(from.alarminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthorizeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthorizeRsp::CopyFrom(const AuthorizeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_alarminfo()) {
    if (!this->alarminfo().IsInitialized()) return false;
  }
  return true;
}

void AuthorizeRsp::Swap(AuthorizeRsp* other) {
  if (other != this) {
    std::swap(alarminfo_, other->alarminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthorizeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthorizeRsp_descriptor_;
  metadata.reflection = AuthorizeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckPrimeReq::kAlarmInfoFieldNumber;
#endif  // !_MSC_VER

CheckPrimeReq::CheckPrimeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckPrimeReq::InitAsDefaultInstance() {
  alarminfo_ = const_cast< ::AlarmMsg::Alarm*>(&::AlarmMsg::Alarm::default_instance());
}

CheckPrimeReq::CheckPrimeReq(const CheckPrimeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckPrimeReq::SharedCtor() {
  _cached_size_ = 0;
  alarminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckPrimeReq::~CheckPrimeReq() {
  SharedDtor();
}

void CheckPrimeReq::SharedDtor() {
  if (this != default_instance_) {
    delete alarminfo_;
  }
}

void CheckPrimeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPrimeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPrimeReq_descriptor_;
}

const CheckPrimeReq& CheckPrimeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmMsg_2eproto();  return *default_instance_;
}

CheckPrimeReq* CheckPrimeReq::default_instance_ = NULL;

CheckPrimeReq* CheckPrimeReq::New() const {
  return new CheckPrimeReq;
}

void CheckPrimeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alarminfo()) {
      if (alarminfo_ != NULL) alarminfo_->::AlarmMsg::Alarm::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckPrimeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AlarmMsg.Alarm alarmInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckPrimeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AlarmMsg.Alarm alarmInfo = 1;
  if (has_alarminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alarminfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckPrimeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AlarmMsg.Alarm alarmInfo = 1;
  if (has_alarminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alarminfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckPrimeReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AlarmMsg.Alarm alarmInfo = 1;
    if (has_alarminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarminfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPrimeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckPrimeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckPrimeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckPrimeReq::MergeFrom(const CheckPrimeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarminfo()) {
      mutable_alarminfo()->::AlarmMsg::Alarm::MergeFrom(from.alarminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckPrimeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPrimeReq::CopyFrom(const CheckPrimeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPrimeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_alarminfo()) {
    if (!this->alarminfo().IsInitialized()) return false;
  }
  return true;
}

void CheckPrimeReq::Swap(CheckPrimeReq* other) {
  if (other != this) {
    std::swap(alarminfo_, other->alarminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckPrimeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPrimeReq_descriptor_;
  metadata.reflection = CheckPrimeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckPrimeRsp::kAlarmFieldNumber;
const int CheckPrimeRsp::kNumberCheckedFieldNumber;
const int CheckPrimeRsp::kProcessTimeFieldNumber;
const int CheckPrimeRsp::kPastPrimeNumListFieldNumber;
#endif  // !_MSC_VER

CheckPrimeRsp::CheckPrimeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckPrimeRsp::InitAsDefaultInstance() {
  alarm_ = const_cast< ::AlarmMsg::Alarm*>(&::AlarmMsg::Alarm::default_instance());
}

CheckPrimeRsp::CheckPrimeRsp(const CheckPrimeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckPrimeRsp::SharedCtor() {
  _cached_size_ = 0;
  alarm_ = NULL;
  number_checked_ = 0;
  process_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckPrimeRsp::~CheckPrimeRsp() {
  SharedDtor();
}

void CheckPrimeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete alarm_;
  }
}

void CheckPrimeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPrimeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPrimeRsp_descriptor_;
}

const CheckPrimeRsp& CheckPrimeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AlarmMsg_2eproto();  return *default_instance_;
}

CheckPrimeRsp* CheckPrimeRsp::default_instance_ = NULL;

CheckPrimeRsp* CheckPrimeRsp::New() const {
  return new CheckPrimeRsp;
}

void CheckPrimeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alarm()) {
      if (alarm_ != NULL) alarm_->::AlarmMsg::Alarm::Clear();
    }
    number_checked_ = 0;
    process_time_ = 0;
  }
  past_prime_num_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckPrimeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AlarmMsg.Alarm Alarm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number_checked;
        break;
      }
      
      // required int32 number_checked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_checked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_checked_)));
          set_has_number_checked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_process_time;
        break;
      }
      
      // optional int32 process_time = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_time_)));
          set_has_process_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_past_prime_num_list;
        break;
      }
      
      // repeated .AlarmMsg.PastPrimeNum past_prime_num_list = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_past_prime_num_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_past_prime_num_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_past_prime_num_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckPrimeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AlarmMsg.Alarm Alarm = 1;
  if (has_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alarm(), output);
  }
  
  // required int32 number_checked = 2;
  if (has_number_checked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number_checked(), output);
  }
  
  // optional int32 process_time = 33;
  if (has_process_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->process_time(), output);
  }
  
  // repeated .AlarmMsg.PastPrimeNum past_prime_num_list = 65;
  for (int i = 0; i < this->past_prime_num_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->past_prime_num_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckPrimeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AlarmMsg.Alarm Alarm = 1;
  if (has_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alarm(), target);
  }
  
  // required int32 number_checked = 2;
  if (has_number_checked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number_checked(), target);
  }
  
  // optional int32 process_time = 33;
  if (has_process_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->process_time(), target);
  }
  
  // repeated .AlarmMsg.PastPrimeNum past_prime_num_list = 65;
  for (int i = 0; i < this->past_prime_num_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->past_prime_num_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckPrimeRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AlarmMsg.Alarm Alarm = 1;
    if (has_alarm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarm());
    }
    
    // required int32 number_checked = 2;
    if (has_number_checked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number_checked());
    }
    
    // optional int32 process_time = 33;
    if (has_process_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_time());
    }
    
  }
  // repeated .AlarmMsg.PastPrimeNum past_prime_num_list = 65;
  total_size += 2 * this->past_prime_num_list_size();
  for (int i = 0; i < this->past_prime_num_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->past_prime_num_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPrimeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckPrimeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckPrimeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckPrimeRsp::MergeFrom(const CheckPrimeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  past_prime_num_list_.MergeFrom(from.past_prime_num_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarm()) {
      mutable_alarm()->::AlarmMsg::Alarm::MergeFrom(from.alarm());
    }
    if (from.has_number_checked()) {
      set_number_checked(from.number_checked());
    }
    if (from.has_process_time()) {
      set_process_time(from.process_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckPrimeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPrimeRsp::CopyFrom(const CheckPrimeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPrimeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_alarm()) {
    if (!this->alarm().IsInitialized()) return false;
  }
  for (int i = 0; i < past_prime_num_list_size(); i++) {
    if (!this->past_prime_num_list(i).IsInitialized()) return false;
  }
  return true;
}

void CheckPrimeRsp::Swap(CheckPrimeRsp* other) {
  if (other != this) {
    std::swap(alarm_, other->alarm_);
    std::swap(number_checked_, other->number_checked_);
    std::swap(process_time_, other->process_time_);
    past_prime_num_list_.Swap(&other->past_prime_num_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckPrimeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPrimeRsp_descriptor_;
  metadata.reflection = CheckPrimeRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AlarmMsg

// @@protoc_insertion_point(global_scope)
