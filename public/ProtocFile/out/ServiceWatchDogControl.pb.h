// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceWatchDogControl.proto

#ifndef PROTOBUF_ServiceWatchDogControl_2eproto__INCLUDED
#define PROTOBUF_ServiceWatchDogControl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "cmd.pb.h"
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServiceWatchDogControl_2eproto();
void protobuf_AssignDesc_ServiceWatchDogControl_2eproto();
void protobuf_ShutdownFile_ServiceWatchDogControl_2eproto();

class ServiceWatchDogControlReq;
class ServiceWatchDogControlRsp;

enum ServerWatchDogCmd {
  SERVER_START = 10001,
  SERVER_STOP = 10002,
  COMPUTER_RESTART = 10003,
  SERVER_INSTALL = 10004,
  SERVER_UNINSTALL = 10005,
  SERVER_RESTART = 10006,
  SERVER_CMD = 10007
};
bool ServerWatchDogCmd_IsValid(int value);
const ServerWatchDogCmd ServerWatchDogCmd_MIN = SERVER_START;
const ServerWatchDogCmd ServerWatchDogCmd_MAX = SERVER_CMD;
const int ServerWatchDogCmd_ARRAYSIZE = ServerWatchDogCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerWatchDogCmd_descriptor();
inline const ::std::string& ServerWatchDogCmd_Name(ServerWatchDogCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerWatchDogCmd_descriptor(), value);
}
inline bool ServerWatchDogCmd_Parse(
    const ::std::string& name, ServerWatchDogCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerWatchDogCmd>(
    ServerWatchDogCmd_descriptor(), name, value);
}
enum ServerType {
  SVC_RECGUARD = 6001,
  SVC_ADJUST = 6002,
  SVC_TRANS = 6003,
  SVC_VRM = 6004,
  SVC_DC = 6005,
  SVC_CENTET_WEB = 6006,
  SVC_COLL_WEB = 6007
};
bool ServerType_IsValid(int value);
const ServerType ServerType_MIN = SVC_RECGUARD;
const ServerType ServerType_MAX = SVC_COLL_WEB;
const int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor();
inline const ::std::string& ServerType_Name(ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerType_descriptor(), value);
}
inline bool ServerType_Parse(
    const ::std::string& name, ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
// ===================================================================

class ServiceWatchDogControlReq : public ::google::protobuf::Message {
 public:
  ServiceWatchDogControlReq();
  virtual ~ServiceWatchDogControlReq();
  
  ServiceWatchDogControlReq(const ServiceWatchDogControlReq& from);
  
  inline ServiceWatchDogControlReq& operator=(const ServiceWatchDogControlReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceWatchDogControlReq& default_instance();
  
  void Swap(ServiceWatchDogControlReq* other);
  
  // implements Message ----------------------------------------------
  
  ServiceWatchDogControlReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceWatchDogControlReq& from);
  void MergeFrom(const ServiceWatchDogControlReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 data_type = 1;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  inline ::google::protobuf::int32 data_type() const;
  inline void set_data_type(::google::protobuf::int32 value);
  
  // optional int32 control_type = 2;
  inline bool has_control_type() const;
  inline void clear_control_type();
  static const int kControlTypeFieldNumber = 2;
  inline ::google::protobuf::int32 control_type() const;
  inline void set_control_type(::google::protobuf::int32 value);
  
  // optional int32 server_type = 3;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 3;
  inline ::google::protobuf::int32 server_type() const;
  inline void set_server_type(::google::protobuf::int32 value);
  
  // optional string server_name = 4;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 4;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  
  // optional string shell_cmd = 5;
  inline bool has_shell_cmd() const;
  inline void clear_shell_cmd();
  static const int kShellCmdFieldNumber = 5;
  inline const ::std::string& shell_cmd() const;
  inline void set_shell_cmd(const ::std::string& value);
  inline void set_shell_cmd(const char* value);
  inline void set_shell_cmd(const char* value, size_t size);
  inline ::std::string* mutable_shell_cmd();
  inline ::std::string* release_shell_cmd();
  
  // optional string shell_dir = 6;
  inline bool has_shell_dir() const;
  inline void clear_shell_dir();
  static const int kShellDirFieldNumber = 6;
  inline const ::std::string& shell_dir() const;
  inline void set_shell_dir(const ::std::string& value);
  inline void set_shell_dir(const char* value);
  inline void set_shell_dir(const char* value, size_t size);
  inline ::std::string* mutable_shell_dir();
  inline ::std::string* release_shell_dir();
  
  // @@protoc_insertion_point(class_scope:cms_8120.ServiceWatchDogControlReq)
 private:
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_control_type();
  inline void clear_has_control_type();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_shell_cmd();
  inline void clear_has_shell_cmd();
  inline void set_has_shell_dir();
  inline void clear_has_shell_dir();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 data_type_;
  ::google::protobuf::int32 control_type_;
  ::std::string* server_name_;
  ::std::string* shell_cmd_;
  ::std::string* shell_dir_;
  ::google::protobuf::int32 server_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ServiceWatchDogControl_2eproto();
  friend void protobuf_AssignDesc_ServiceWatchDogControl_2eproto();
  friend void protobuf_ShutdownFile_ServiceWatchDogControl_2eproto();
  
  void InitAsDefaultInstance();
  static ServiceWatchDogControlReq* default_instance_;
};
// -------------------------------------------------------------------

class ServiceWatchDogControlRsp : public ::google::protobuf::Message {
 public:
  ServiceWatchDogControlRsp();
  virtual ~ServiceWatchDogControlRsp();
  
  ServiceWatchDogControlRsp(const ServiceWatchDogControlRsp& from);
  
  inline ServiceWatchDogControlRsp& operator=(const ServiceWatchDogControlRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceWatchDogControlRsp& default_instance();
  
  void Swap(ServiceWatchDogControlRsp* other);
  
  // implements Message ----------------------------------------------
  
  ServiceWatchDogControlRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceWatchDogControlRsp& from);
  void MergeFrom(const ServiceWatchDogControlRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 data_type = 1;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  inline ::google::protobuf::int32 data_type() const;
  inline void set_data_type(::google::protobuf::int32 value);
  
  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional int32 control_type = 3;
  inline bool has_control_type() const;
  inline void clear_control_type();
  static const int kControlTypeFieldNumber = 3;
  inline ::google::protobuf::int32 control_type() const;
  inline void set_control_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cms_8120.ServiceWatchDogControlRsp)
 private:
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_control_type();
  inline void clear_has_control_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 data_type_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 control_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ServiceWatchDogControl_2eproto();
  friend void protobuf_AssignDesc_ServiceWatchDogControl_2eproto();
  friend void protobuf_ShutdownFile_ServiceWatchDogControl_2eproto();
  
  void InitAsDefaultInstance();
  static ServiceWatchDogControlRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// ServiceWatchDogControlReq

// optional int32 data_type = 1;
inline bool ServiceWatchDogControlReq::has_data_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWatchDogControlReq::set_has_data_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceWatchDogControlReq::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceWatchDogControlReq::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::google::protobuf::int32 ServiceWatchDogControlReq::data_type() const {
  return data_type_;
}
inline void ServiceWatchDogControlReq::set_data_type(::google::protobuf::int32 value) {
  set_has_data_type();
  data_type_ = value;
}

// optional int32 control_type = 2;
inline bool ServiceWatchDogControlReq::has_control_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceWatchDogControlReq::set_has_control_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceWatchDogControlReq::clear_has_control_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceWatchDogControlReq::clear_control_type() {
  control_type_ = 0;
  clear_has_control_type();
}
inline ::google::protobuf::int32 ServiceWatchDogControlReq::control_type() const {
  return control_type_;
}
inline void ServiceWatchDogControlReq::set_control_type(::google::protobuf::int32 value) {
  set_has_control_type();
  control_type_ = value;
}

// optional int32 server_type = 3;
inline bool ServiceWatchDogControlReq::has_server_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceWatchDogControlReq::set_has_server_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceWatchDogControlReq::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceWatchDogControlReq::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::google::protobuf::int32 ServiceWatchDogControlReq::server_type() const {
  return server_type_;
}
inline void ServiceWatchDogControlReq::set_server_type(::google::protobuf::int32 value) {
  set_has_server_type();
  server_type_ = value;
}

// optional string server_name = 4;
inline bool ServiceWatchDogControlReq::has_server_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceWatchDogControlReq::set_has_server_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceWatchDogControlReq::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceWatchDogControlReq::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& ServiceWatchDogControlReq::server_name() const {
  return *server_name_;
}
inline void ServiceWatchDogControlReq::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void ServiceWatchDogControlReq::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void ServiceWatchDogControlReq::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceWatchDogControlReq::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* ServiceWatchDogControlReq::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string shell_cmd = 5;
inline bool ServiceWatchDogControlReq::has_shell_cmd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceWatchDogControlReq::set_has_shell_cmd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServiceWatchDogControlReq::clear_has_shell_cmd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServiceWatchDogControlReq::clear_shell_cmd() {
  if (shell_cmd_ != &::google::protobuf::internal::kEmptyString) {
    shell_cmd_->clear();
  }
  clear_has_shell_cmd();
}
inline const ::std::string& ServiceWatchDogControlReq::shell_cmd() const {
  return *shell_cmd_;
}
inline void ServiceWatchDogControlReq::set_shell_cmd(const ::std::string& value) {
  set_has_shell_cmd();
  if (shell_cmd_ == &::google::protobuf::internal::kEmptyString) {
    shell_cmd_ = new ::std::string;
  }
  shell_cmd_->assign(value);
}
inline void ServiceWatchDogControlReq::set_shell_cmd(const char* value) {
  set_has_shell_cmd();
  if (shell_cmd_ == &::google::protobuf::internal::kEmptyString) {
    shell_cmd_ = new ::std::string;
  }
  shell_cmd_->assign(value);
}
inline void ServiceWatchDogControlReq::set_shell_cmd(const char* value, size_t size) {
  set_has_shell_cmd();
  if (shell_cmd_ == &::google::protobuf::internal::kEmptyString) {
    shell_cmd_ = new ::std::string;
  }
  shell_cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceWatchDogControlReq::mutable_shell_cmd() {
  set_has_shell_cmd();
  if (shell_cmd_ == &::google::protobuf::internal::kEmptyString) {
    shell_cmd_ = new ::std::string;
  }
  return shell_cmd_;
}
inline ::std::string* ServiceWatchDogControlReq::release_shell_cmd() {
  clear_has_shell_cmd();
  if (shell_cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shell_cmd_;
    shell_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string shell_dir = 6;
inline bool ServiceWatchDogControlReq::has_shell_dir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceWatchDogControlReq::set_has_shell_dir() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServiceWatchDogControlReq::clear_has_shell_dir() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServiceWatchDogControlReq::clear_shell_dir() {
  if (shell_dir_ != &::google::protobuf::internal::kEmptyString) {
    shell_dir_->clear();
  }
  clear_has_shell_dir();
}
inline const ::std::string& ServiceWatchDogControlReq::shell_dir() const {
  return *shell_dir_;
}
inline void ServiceWatchDogControlReq::set_shell_dir(const ::std::string& value) {
  set_has_shell_dir();
  if (shell_dir_ == &::google::protobuf::internal::kEmptyString) {
    shell_dir_ = new ::std::string;
  }
  shell_dir_->assign(value);
}
inline void ServiceWatchDogControlReq::set_shell_dir(const char* value) {
  set_has_shell_dir();
  if (shell_dir_ == &::google::protobuf::internal::kEmptyString) {
    shell_dir_ = new ::std::string;
  }
  shell_dir_->assign(value);
}
inline void ServiceWatchDogControlReq::set_shell_dir(const char* value, size_t size) {
  set_has_shell_dir();
  if (shell_dir_ == &::google::protobuf::internal::kEmptyString) {
    shell_dir_ = new ::std::string;
  }
  shell_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceWatchDogControlReq::mutable_shell_dir() {
  set_has_shell_dir();
  if (shell_dir_ == &::google::protobuf::internal::kEmptyString) {
    shell_dir_ = new ::std::string;
  }
  return shell_dir_;
}
inline ::std::string* ServiceWatchDogControlReq::release_shell_dir() {
  clear_has_shell_dir();
  if (shell_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shell_dir_;
    shell_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ServiceWatchDogControlRsp

// optional int32 data_type = 1;
inline bool ServiceWatchDogControlRsp::has_data_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWatchDogControlRsp::set_has_data_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceWatchDogControlRsp::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceWatchDogControlRsp::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::google::protobuf::int32 ServiceWatchDogControlRsp::data_type() const {
  return data_type_;
}
inline void ServiceWatchDogControlRsp::set_data_type(::google::protobuf::int32 value) {
  set_has_data_type();
  data_type_ = value;
}

// optional int32 result = 2;
inline bool ServiceWatchDogControlRsp::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceWatchDogControlRsp::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceWatchDogControlRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceWatchDogControlRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ServiceWatchDogControlRsp::result() const {
  return result_;
}
inline void ServiceWatchDogControlRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 control_type = 3;
inline bool ServiceWatchDogControlRsp::has_control_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceWatchDogControlRsp::set_has_control_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceWatchDogControlRsp::clear_has_control_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceWatchDogControlRsp::clear_control_type() {
  control_type_ = 0;
  clear_has_control_type();
}
inline ::google::protobuf::int32 ServiceWatchDogControlRsp::control_type() const {
  return control_type_;
}
inline void ServiceWatchDogControlRsp::set_control_type(::google::protobuf::int32 value) {
  set_has_control_type();
  control_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< cms_8120::ServerWatchDogCmd>() {
  return cms_8120::ServerWatchDogCmd_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< cms_8120::ServerType>() {
  return cms_8120::ServerType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServiceWatchDogControl_2eproto__INCLUDED
