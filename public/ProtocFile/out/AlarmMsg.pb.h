// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AlarmMsg.proto

#ifndef PROTOBUF_AlarmMsg_2eproto__INCLUDED
#define PROTOBUF_AlarmMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace AlarmMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AlarmMsg_2eproto();
void protobuf_AssignDesc_AlarmMsg_2eproto();
void protobuf_ShutdownFile_AlarmMsg_2eproto();

class PastPrimeNum;
class Alarm;
class AuthorizeReq;
class AuthorizeRsp;
class CheckPrimeReq;
class CheckPrimeRsp;

enum ServerType {
  ALARM_CLIENT = 37,
  ALARM_SERVER = 38
};
bool ServerType_IsValid(int value);
const ServerType ServerType_MIN = ALARM_CLIENT;
const ServerType ServerType_MAX = ALARM_SERVER;
const int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor();
inline const ::std::string& ServerType_Name(ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerType_descriptor(), value);
}
inline bool ServerType_Parse(
    const ::std::string& name, ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
enum AlarmId {
  AUTHORIZE_REQ = 1,
  AUTHORIZE_RSP = 2,
  CHECK_PRIME_REQ = 3,
  CHECK_PRIME_RSP = 4
};
bool AlarmId_IsValid(int value);
const AlarmId AlarmId_MIN = AUTHORIZE_REQ;
const AlarmId AlarmId_MAX = CHECK_PRIME_RSP;
const int AlarmId_ARRAYSIZE = AlarmId_MAX + 1;

const ::google::protobuf::EnumDescriptor* AlarmId_descriptor();
inline const ::std::string& AlarmId_Name(AlarmId value) {
  return ::google::protobuf::internal::NameOfEnum(
    AlarmId_descriptor(), value);
}
inline bool AlarmId_Parse(
    const ::std::string& name, AlarmId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AlarmId>(
    AlarmId_descriptor(), name, value);
}
// ===================================================================

class PastPrimeNum : public ::google::protobuf::Message {
 public:
  PastPrimeNum();
  virtual ~PastPrimeNum();
  
  PastPrimeNum(const PastPrimeNum& from);
  
  inline PastPrimeNum& operator=(const PastPrimeNum& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PastPrimeNum& default_instance();
  
  void Swap(PastPrimeNum* other);
  
  // implements Message ----------------------------------------------
  
  PastPrimeNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PastPrimeNum& from);
  void MergeFrom(const PastPrimeNum& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 prime_num = 1;
  inline bool has_prime_num() const;
  inline void clear_prime_num();
  static const int kPrimeNumFieldNumber = 1;
  inline ::google::protobuf::int32 prime_num() const;
  inline void set_prime_num(::google::protobuf::int32 value);
  
  // required int32 process_time = 2;
  inline bool has_process_time() const;
  inline void clear_process_time();
  static const int kProcessTimeFieldNumber = 2;
  inline ::google::protobuf::int32 process_time() const;
  inline void set_process_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:AlarmMsg.PastPrimeNum)
 private:
  inline void set_has_prime_num();
  inline void clear_has_prime_num();
  inline void set_has_process_time();
  inline void clear_has_process_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 prime_num_;
  ::google::protobuf::int32 process_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AlarmMsg_2eproto();
  friend void protobuf_AssignDesc_AlarmMsg_2eproto();
  friend void protobuf_ShutdownFile_AlarmMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PastPrimeNum* default_instance_;
};
// -------------------------------------------------------------------

class Alarm : public ::google::protobuf::Message {
 public:
  Alarm();
  virtual ~Alarm();
  
  Alarm(const Alarm& from);
  
  inline Alarm& operator=(const Alarm& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Alarm& default_instance();
  
  void Swap(Alarm* other);
  
  // implements Message ----------------------------------------------
  
  Alarm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Alarm& from);
  void MergeFrom(const Alarm& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string SvcType = 1;
  inline bool has_svctype() const;
  inline void clear_svctype();
  static const int kSvcTypeFieldNumber = 1;
  inline const ::std::string& svctype() const;
  inline void set_svctype(const ::std::string& value);
  inline void set_svctype(const char* value);
  inline void set_svctype(const char* value, size_t size);
  inline ::std::string* mutable_svctype();
  inline ::std::string* release_svctype();
  
  // required string dwMsgType = 2;
  inline bool has_dwmsgtype() const;
  inline void clear_dwmsgtype();
  static const int kDwMsgTypeFieldNumber = 2;
  inline const ::std::string& dwmsgtype() const;
  inline void set_dwmsgtype(const ::std::string& value);
  inline void set_dwmsgtype(const char* value);
  inline void set_dwmsgtype(const char* value, size_t size);
  inline ::std::string* mutable_dwmsgtype();
  inline ::std::string* release_dwmsgtype();
  
  // required string alarmType = 3;
  inline bool has_alarmtype() const;
  inline void clear_alarmtype();
  static const int kAlarmTypeFieldNumber = 3;
  inline const ::std::string& alarmtype() const;
  inline void set_alarmtype(const ::std::string& value);
  inline void set_alarmtype(const char* value);
  inline void set_alarmtype(const char* value, size_t size);
  inline ::std::string* mutable_alarmtype();
  inline ::std::string* release_alarmtype();
  
  // optional string userid = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 4;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  
  // optional string channel = 5;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 5;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  
  // optional string alarmStatus = 6;
  inline bool has_alarmstatus() const;
  inline void clear_alarmstatus();
  static const int kAlarmStatusFieldNumber = 6;
  inline const ::std::string& alarmstatus() const;
  inline void set_alarmstatus(const ::std::string& value);
  inline void set_alarmstatus(const char* value);
  inline void set_alarmstatus(const char* value, size_t size);
  inline ::std::string* mutable_alarmstatus();
  inline ::std::string* release_alarmstatus();
  
  // optional string dwRev = 7;
  inline bool has_dwrev() const;
  inline void clear_dwrev();
  static const int kDwRevFieldNumber = 7;
  inline const ::std::string& dwrev() const;
  inline void set_dwrev(const ::std::string& value);
  inline void set_dwrev(const char* value);
  inline void set_dwrev(const char* value, size_t size);
  inline ::std::string* mutable_dwrev();
  inline ::std::string* release_dwrev();
  
  // optional string alarmInfo = 8;
  inline bool has_alarminfo() const;
  inline void clear_alarminfo();
  static const int kAlarmInfoFieldNumber = 8;
  inline const ::std::string& alarminfo() const;
  inline void set_alarminfo(const ::std::string& value);
  inline void set_alarminfo(const char* value);
  inline void set_alarminfo(const char* value, size_t size);
  inline ::std::string* mutable_alarminfo();
  inline ::std::string* release_alarminfo();
  
  // optional string alarmhost = 9;
  inline bool has_alarmhost() const;
  inline void clear_alarmhost();
  static const int kAlarmhostFieldNumber = 9;
  inline const ::std::string& alarmhost() const;
  inline void set_alarmhost(const ::std::string& value);
  inline void set_alarmhost(const char* value);
  inline void set_alarmhost(const char* value, size_t size);
  inline ::std::string* mutable_alarmhost();
  inline ::std::string* release_alarmhost();
  
  // @@protoc_insertion_point(class_scope:AlarmMsg.Alarm)
 private:
  inline void set_has_svctype();
  inline void clear_has_svctype();
  inline void set_has_dwmsgtype();
  inline void clear_has_dwmsgtype();
  inline void set_has_alarmtype();
  inline void clear_has_alarmtype();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_alarmstatus();
  inline void clear_has_alarmstatus();
  inline void set_has_dwrev();
  inline void clear_has_dwrev();
  inline void set_has_alarminfo();
  inline void clear_has_alarminfo();
  inline void set_has_alarmhost();
  inline void clear_has_alarmhost();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* svctype_;
  ::std::string* dwmsgtype_;
  ::std::string* alarmtype_;
  ::std::string* userid_;
  ::std::string* channel_;
  ::std::string* alarmstatus_;
  ::std::string* dwrev_;
  ::std::string* alarminfo_;
  ::std::string* alarmhost_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_AlarmMsg_2eproto();
  friend void protobuf_AssignDesc_AlarmMsg_2eproto();
  friend void protobuf_ShutdownFile_AlarmMsg_2eproto();
  
  void InitAsDefaultInstance();
  static Alarm* default_instance_;
};
// -------------------------------------------------------------------

class AuthorizeReq : public ::google::protobuf::Message {
 public:
  AuthorizeReq();
  virtual ~AuthorizeReq();
  
  AuthorizeReq(const AuthorizeReq& from);
  
  inline AuthorizeReq& operator=(const AuthorizeReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthorizeReq& default_instance();
  
  void Swap(AuthorizeReq* other);
  
  // implements Message ----------------------------------------------
  
  AuthorizeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthorizeReq& from);
  void MergeFrom(const AuthorizeReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .AlarmMsg.Alarm alarmInfo = 1;
  inline bool has_alarminfo() const;
  inline void clear_alarminfo();
  static const int kAlarmInfoFieldNumber = 1;
  inline const ::AlarmMsg::Alarm& alarminfo() const;
  inline ::AlarmMsg::Alarm* mutable_alarminfo();
  inline ::AlarmMsg::Alarm* release_alarminfo();
  
  // @@protoc_insertion_point(class_scope:AlarmMsg.AuthorizeReq)
 private:
  inline void set_has_alarminfo();
  inline void clear_has_alarminfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::AlarmMsg::Alarm* alarminfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AlarmMsg_2eproto();
  friend void protobuf_AssignDesc_AlarmMsg_2eproto();
  friend void protobuf_ShutdownFile_AlarmMsg_2eproto();
  
  void InitAsDefaultInstance();
  static AuthorizeReq* default_instance_;
};
// -------------------------------------------------------------------

class AuthorizeRsp : public ::google::protobuf::Message {
 public:
  AuthorizeRsp();
  virtual ~AuthorizeRsp();
  
  AuthorizeRsp(const AuthorizeRsp& from);
  
  inline AuthorizeRsp& operator=(const AuthorizeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthorizeRsp& default_instance();
  
  void Swap(AuthorizeRsp* other);
  
  // implements Message ----------------------------------------------
  
  AuthorizeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthorizeRsp& from);
  void MergeFrom(const AuthorizeRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .AlarmMsg.Alarm alarmInfo = 1;
  inline bool has_alarminfo() const;
  inline void clear_alarminfo();
  static const int kAlarmInfoFieldNumber = 1;
  inline const ::AlarmMsg::Alarm& alarminfo() const;
  inline ::AlarmMsg::Alarm* mutable_alarminfo();
  inline ::AlarmMsg::Alarm* release_alarminfo();
  
  // @@protoc_insertion_point(class_scope:AlarmMsg.AuthorizeRsp)
 private:
  inline void set_has_alarminfo();
  inline void clear_has_alarminfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::AlarmMsg::Alarm* alarminfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AlarmMsg_2eproto();
  friend void protobuf_AssignDesc_AlarmMsg_2eproto();
  friend void protobuf_ShutdownFile_AlarmMsg_2eproto();
  
  void InitAsDefaultInstance();
  static AuthorizeRsp* default_instance_;
};
// -------------------------------------------------------------------

class CheckPrimeReq : public ::google::protobuf::Message {
 public:
  CheckPrimeReq();
  virtual ~CheckPrimeReq();
  
  CheckPrimeReq(const CheckPrimeReq& from);
  
  inline CheckPrimeReq& operator=(const CheckPrimeReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckPrimeReq& default_instance();
  
  void Swap(CheckPrimeReq* other);
  
  // implements Message ----------------------------------------------
  
  CheckPrimeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckPrimeReq& from);
  void MergeFrom(const CheckPrimeReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .AlarmMsg.Alarm alarmInfo = 1;
  inline bool has_alarminfo() const;
  inline void clear_alarminfo();
  static const int kAlarmInfoFieldNumber = 1;
  inline const ::AlarmMsg::Alarm& alarminfo() const;
  inline ::AlarmMsg::Alarm* mutable_alarminfo();
  inline ::AlarmMsg::Alarm* release_alarminfo();
  
  // @@protoc_insertion_point(class_scope:AlarmMsg.CheckPrimeReq)
 private:
  inline void set_has_alarminfo();
  inline void clear_has_alarminfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::AlarmMsg::Alarm* alarminfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_AlarmMsg_2eproto();
  friend void protobuf_AssignDesc_AlarmMsg_2eproto();
  friend void protobuf_ShutdownFile_AlarmMsg_2eproto();
  
  void InitAsDefaultInstance();
  static CheckPrimeReq* default_instance_;
};
// -------------------------------------------------------------------

class CheckPrimeRsp : public ::google::protobuf::Message {
 public:
  CheckPrimeRsp();
  virtual ~CheckPrimeRsp();
  
  CheckPrimeRsp(const CheckPrimeRsp& from);
  
  inline CheckPrimeRsp& operator=(const CheckPrimeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckPrimeRsp& default_instance();
  
  void Swap(CheckPrimeRsp* other);
  
  // implements Message ----------------------------------------------
  
  CheckPrimeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckPrimeRsp& from);
  void MergeFrom(const CheckPrimeRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .AlarmMsg.Alarm Alarm = 1;
  inline bool has_alarm() const;
  inline void clear_alarm();
  static const int kAlarmFieldNumber = 1;
  inline const ::AlarmMsg::Alarm& alarm() const;
  inline ::AlarmMsg::Alarm* mutable_alarm();
  inline ::AlarmMsg::Alarm* release_alarm();
  
  // required int32 number_checked = 2;
  inline bool has_number_checked() const;
  inline void clear_number_checked();
  static const int kNumberCheckedFieldNumber = 2;
  inline ::google::protobuf::int32 number_checked() const;
  inline void set_number_checked(::google::protobuf::int32 value);
  
  // optional int32 process_time = 33;
  inline bool has_process_time() const;
  inline void clear_process_time();
  static const int kProcessTimeFieldNumber = 33;
  inline ::google::protobuf::int32 process_time() const;
  inline void set_process_time(::google::protobuf::int32 value);
  
  // repeated .AlarmMsg.PastPrimeNum past_prime_num_list = 65;
  inline int past_prime_num_list_size() const;
  inline void clear_past_prime_num_list();
  static const int kPastPrimeNumListFieldNumber = 65;
  inline const ::AlarmMsg::PastPrimeNum& past_prime_num_list(int index) const;
  inline ::AlarmMsg::PastPrimeNum* mutable_past_prime_num_list(int index);
  inline ::AlarmMsg::PastPrimeNum* add_past_prime_num_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AlarmMsg::PastPrimeNum >&
      past_prime_num_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AlarmMsg::PastPrimeNum >*
      mutable_past_prime_num_list();
  
  // @@protoc_insertion_point(class_scope:AlarmMsg.CheckPrimeRsp)
 private:
  inline void set_has_alarm();
  inline void clear_has_alarm();
  inline void set_has_number_checked();
  inline void clear_has_number_checked();
  inline void set_has_process_time();
  inline void clear_has_process_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::AlarmMsg::Alarm* alarm_;
  ::google::protobuf::int32 number_checked_;
  ::google::protobuf::int32 process_time_;
  ::google::protobuf::RepeatedPtrField< ::AlarmMsg::PastPrimeNum > past_prime_num_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AlarmMsg_2eproto();
  friend void protobuf_AssignDesc_AlarmMsg_2eproto();
  friend void protobuf_ShutdownFile_AlarmMsg_2eproto();
  
  void InitAsDefaultInstance();
  static CheckPrimeRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// PastPrimeNum

// required int32 prime_num = 1;
inline bool PastPrimeNum::has_prime_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PastPrimeNum::set_has_prime_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PastPrimeNum::clear_has_prime_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PastPrimeNum::clear_prime_num() {
  prime_num_ = 0;
  clear_has_prime_num();
}
inline ::google::protobuf::int32 PastPrimeNum::prime_num() const {
  return prime_num_;
}
inline void PastPrimeNum::set_prime_num(::google::protobuf::int32 value) {
  set_has_prime_num();
  prime_num_ = value;
}

// required int32 process_time = 2;
inline bool PastPrimeNum::has_process_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PastPrimeNum::set_has_process_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PastPrimeNum::clear_has_process_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PastPrimeNum::clear_process_time() {
  process_time_ = 0;
  clear_has_process_time();
}
inline ::google::protobuf::int32 PastPrimeNum::process_time() const {
  return process_time_;
}
inline void PastPrimeNum::set_process_time(::google::protobuf::int32 value) {
  set_has_process_time();
  process_time_ = value;
}

// -------------------------------------------------------------------

// Alarm

// required string SvcType = 1;
inline bool Alarm::has_svctype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Alarm::set_has_svctype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Alarm::clear_has_svctype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Alarm::clear_svctype() {
  if (svctype_ != &::google::protobuf::internal::kEmptyString) {
    svctype_->clear();
  }
  clear_has_svctype();
}
inline const ::std::string& Alarm::svctype() const {
  return *svctype_;
}
inline void Alarm::set_svctype(const ::std::string& value) {
  set_has_svctype();
  if (svctype_ == &::google::protobuf::internal::kEmptyString) {
    svctype_ = new ::std::string;
  }
  svctype_->assign(value);
}
inline void Alarm::set_svctype(const char* value) {
  set_has_svctype();
  if (svctype_ == &::google::protobuf::internal::kEmptyString) {
    svctype_ = new ::std::string;
  }
  svctype_->assign(value);
}
inline void Alarm::set_svctype(const char* value, size_t size) {
  set_has_svctype();
  if (svctype_ == &::google::protobuf::internal::kEmptyString) {
    svctype_ = new ::std::string;
  }
  svctype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alarm::mutable_svctype() {
  set_has_svctype();
  if (svctype_ == &::google::protobuf::internal::kEmptyString) {
    svctype_ = new ::std::string;
  }
  return svctype_;
}
inline ::std::string* Alarm::release_svctype() {
  clear_has_svctype();
  if (svctype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = svctype_;
    svctype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string dwMsgType = 2;
inline bool Alarm::has_dwmsgtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Alarm::set_has_dwmsgtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Alarm::clear_has_dwmsgtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Alarm::clear_dwmsgtype() {
  if (dwmsgtype_ != &::google::protobuf::internal::kEmptyString) {
    dwmsgtype_->clear();
  }
  clear_has_dwmsgtype();
}
inline const ::std::string& Alarm::dwmsgtype() const {
  return *dwmsgtype_;
}
inline void Alarm::set_dwmsgtype(const ::std::string& value) {
  set_has_dwmsgtype();
  if (dwmsgtype_ == &::google::protobuf::internal::kEmptyString) {
    dwmsgtype_ = new ::std::string;
  }
  dwmsgtype_->assign(value);
}
inline void Alarm::set_dwmsgtype(const char* value) {
  set_has_dwmsgtype();
  if (dwmsgtype_ == &::google::protobuf::internal::kEmptyString) {
    dwmsgtype_ = new ::std::string;
  }
  dwmsgtype_->assign(value);
}
inline void Alarm::set_dwmsgtype(const char* value, size_t size) {
  set_has_dwmsgtype();
  if (dwmsgtype_ == &::google::protobuf::internal::kEmptyString) {
    dwmsgtype_ = new ::std::string;
  }
  dwmsgtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alarm::mutable_dwmsgtype() {
  set_has_dwmsgtype();
  if (dwmsgtype_ == &::google::protobuf::internal::kEmptyString) {
    dwmsgtype_ = new ::std::string;
  }
  return dwmsgtype_;
}
inline ::std::string* Alarm::release_dwmsgtype() {
  clear_has_dwmsgtype();
  if (dwmsgtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dwmsgtype_;
    dwmsgtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string alarmType = 3;
inline bool Alarm::has_alarmtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Alarm::set_has_alarmtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Alarm::clear_has_alarmtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Alarm::clear_alarmtype() {
  if (alarmtype_ != &::google::protobuf::internal::kEmptyString) {
    alarmtype_->clear();
  }
  clear_has_alarmtype();
}
inline const ::std::string& Alarm::alarmtype() const {
  return *alarmtype_;
}
inline void Alarm::set_alarmtype(const ::std::string& value) {
  set_has_alarmtype();
  if (alarmtype_ == &::google::protobuf::internal::kEmptyString) {
    alarmtype_ = new ::std::string;
  }
  alarmtype_->assign(value);
}
inline void Alarm::set_alarmtype(const char* value) {
  set_has_alarmtype();
  if (alarmtype_ == &::google::protobuf::internal::kEmptyString) {
    alarmtype_ = new ::std::string;
  }
  alarmtype_->assign(value);
}
inline void Alarm::set_alarmtype(const char* value, size_t size) {
  set_has_alarmtype();
  if (alarmtype_ == &::google::protobuf::internal::kEmptyString) {
    alarmtype_ = new ::std::string;
  }
  alarmtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alarm::mutable_alarmtype() {
  set_has_alarmtype();
  if (alarmtype_ == &::google::protobuf::internal::kEmptyString) {
    alarmtype_ = new ::std::string;
  }
  return alarmtype_;
}
inline ::std::string* Alarm::release_alarmtype() {
  clear_has_alarmtype();
  if (alarmtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alarmtype_;
    alarmtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userid = 4;
inline bool Alarm::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Alarm::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Alarm::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Alarm::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& Alarm::userid() const {
  return *userid_;
}
inline void Alarm::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void Alarm::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void Alarm::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alarm::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* Alarm::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string channel = 5;
inline bool Alarm::has_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Alarm::set_has_channel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Alarm::clear_has_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Alarm::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& Alarm::channel() const {
  return *channel_;
}
inline void Alarm::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void Alarm::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void Alarm::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alarm::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* Alarm::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string alarmStatus = 6;
inline bool Alarm::has_alarmstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Alarm::set_has_alarmstatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Alarm::clear_has_alarmstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Alarm::clear_alarmstatus() {
  if (alarmstatus_ != &::google::protobuf::internal::kEmptyString) {
    alarmstatus_->clear();
  }
  clear_has_alarmstatus();
}
inline const ::std::string& Alarm::alarmstatus() const {
  return *alarmstatus_;
}
inline void Alarm::set_alarmstatus(const ::std::string& value) {
  set_has_alarmstatus();
  if (alarmstatus_ == &::google::protobuf::internal::kEmptyString) {
    alarmstatus_ = new ::std::string;
  }
  alarmstatus_->assign(value);
}
inline void Alarm::set_alarmstatus(const char* value) {
  set_has_alarmstatus();
  if (alarmstatus_ == &::google::protobuf::internal::kEmptyString) {
    alarmstatus_ = new ::std::string;
  }
  alarmstatus_->assign(value);
}
inline void Alarm::set_alarmstatus(const char* value, size_t size) {
  set_has_alarmstatus();
  if (alarmstatus_ == &::google::protobuf::internal::kEmptyString) {
    alarmstatus_ = new ::std::string;
  }
  alarmstatus_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alarm::mutable_alarmstatus() {
  set_has_alarmstatus();
  if (alarmstatus_ == &::google::protobuf::internal::kEmptyString) {
    alarmstatus_ = new ::std::string;
  }
  return alarmstatus_;
}
inline ::std::string* Alarm::release_alarmstatus() {
  clear_has_alarmstatus();
  if (alarmstatus_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alarmstatus_;
    alarmstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string dwRev = 7;
inline bool Alarm::has_dwrev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Alarm::set_has_dwrev() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Alarm::clear_has_dwrev() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Alarm::clear_dwrev() {
  if (dwrev_ != &::google::protobuf::internal::kEmptyString) {
    dwrev_->clear();
  }
  clear_has_dwrev();
}
inline const ::std::string& Alarm::dwrev() const {
  return *dwrev_;
}
inline void Alarm::set_dwrev(const ::std::string& value) {
  set_has_dwrev();
  if (dwrev_ == &::google::protobuf::internal::kEmptyString) {
    dwrev_ = new ::std::string;
  }
  dwrev_->assign(value);
}
inline void Alarm::set_dwrev(const char* value) {
  set_has_dwrev();
  if (dwrev_ == &::google::protobuf::internal::kEmptyString) {
    dwrev_ = new ::std::string;
  }
  dwrev_->assign(value);
}
inline void Alarm::set_dwrev(const char* value, size_t size) {
  set_has_dwrev();
  if (dwrev_ == &::google::protobuf::internal::kEmptyString) {
    dwrev_ = new ::std::string;
  }
  dwrev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alarm::mutable_dwrev() {
  set_has_dwrev();
  if (dwrev_ == &::google::protobuf::internal::kEmptyString) {
    dwrev_ = new ::std::string;
  }
  return dwrev_;
}
inline ::std::string* Alarm::release_dwrev() {
  clear_has_dwrev();
  if (dwrev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dwrev_;
    dwrev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string alarmInfo = 8;
inline bool Alarm::has_alarminfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Alarm::set_has_alarminfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Alarm::clear_has_alarminfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Alarm::clear_alarminfo() {
  if (alarminfo_ != &::google::protobuf::internal::kEmptyString) {
    alarminfo_->clear();
  }
  clear_has_alarminfo();
}
inline const ::std::string& Alarm::alarminfo() const {
  return *alarminfo_;
}
inline void Alarm::set_alarminfo(const ::std::string& value) {
  set_has_alarminfo();
  if (alarminfo_ == &::google::protobuf::internal::kEmptyString) {
    alarminfo_ = new ::std::string;
  }
  alarminfo_->assign(value);
}
inline void Alarm::set_alarminfo(const char* value) {
  set_has_alarminfo();
  if (alarminfo_ == &::google::protobuf::internal::kEmptyString) {
    alarminfo_ = new ::std::string;
  }
  alarminfo_->assign(value);
}
inline void Alarm::set_alarminfo(const char* value, size_t size) {
  set_has_alarminfo();
  if (alarminfo_ == &::google::protobuf::internal::kEmptyString) {
    alarminfo_ = new ::std::string;
  }
  alarminfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alarm::mutable_alarminfo() {
  set_has_alarminfo();
  if (alarminfo_ == &::google::protobuf::internal::kEmptyString) {
    alarminfo_ = new ::std::string;
  }
  return alarminfo_;
}
inline ::std::string* Alarm::release_alarminfo() {
  clear_has_alarminfo();
  if (alarminfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alarminfo_;
    alarminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string alarmhost = 9;
inline bool Alarm::has_alarmhost() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Alarm::set_has_alarmhost() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Alarm::clear_has_alarmhost() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Alarm::clear_alarmhost() {
  if (alarmhost_ != &::google::protobuf::internal::kEmptyString) {
    alarmhost_->clear();
  }
  clear_has_alarmhost();
}
inline const ::std::string& Alarm::alarmhost() const {
  return *alarmhost_;
}
inline void Alarm::set_alarmhost(const ::std::string& value) {
  set_has_alarmhost();
  if (alarmhost_ == &::google::protobuf::internal::kEmptyString) {
    alarmhost_ = new ::std::string;
  }
  alarmhost_->assign(value);
}
inline void Alarm::set_alarmhost(const char* value) {
  set_has_alarmhost();
  if (alarmhost_ == &::google::protobuf::internal::kEmptyString) {
    alarmhost_ = new ::std::string;
  }
  alarmhost_->assign(value);
}
inline void Alarm::set_alarmhost(const char* value, size_t size) {
  set_has_alarmhost();
  if (alarmhost_ == &::google::protobuf::internal::kEmptyString) {
    alarmhost_ = new ::std::string;
  }
  alarmhost_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alarm::mutable_alarmhost() {
  set_has_alarmhost();
  if (alarmhost_ == &::google::protobuf::internal::kEmptyString) {
    alarmhost_ = new ::std::string;
  }
  return alarmhost_;
}
inline ::std::string* Alarm::release_alarmhost() {
  clear_has_alarmhost();
  if (alarmhost_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alarmhost_;
    alarmhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AuthorizeReq

// required .AlarmMsg.Alarm alarmInfo = 1;
inline bool AuthorizeReq::has_alarminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthorizeReq::set_has_alarminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthorizeReq::clear_has_alarminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthorizeReq::clear_alarminfo() {
  if (alarminfo_ != NULL) alarminfo_->::AlarmMsg::Alarm::Clear();
  clear_has_alarminfo();
}
inline const ::AlarmMsg::Alarm& AuthorizeReq::alarminfo() const {
  return alarminfo_ != NULL ? *alarminfo_ : *default_instance_->alarminfo_;
}
inline ::AlarmMsg::Alarm* AuthorizeReq::mutable_alarminfo() {
  set_has_alarminfo();
  if (alarminfo_ == NULL) alarminfo_ = new ::AlarmMsg::Alarm;
  return alarminfo_;
}
inline ::AlarmMsg::Alarm* AuthorizeReq::release_alarminfo() {
  clear_has_alarminfo();
  ::AlarmMsg::Alarm* temp = alarminfo_;
  alarminfo_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// AuthorizeRsp

// required .AlarmMsg.Alarm alarmInfo = 1;
inline bool AuthorizeRsp::has_alarminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthorizeRsp::set_has_alarminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthorizeRsp::clear_has_alarminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthorizeRsp::clear_alarminfo() {
  if (alarminfo_ != NULL) alarminfo_->::AlarmMsg::Alarm::Clear();
  clear_has_alarminfo();
}
inline const ::AlarmMsg::Alarm& AuthorizeRsp::alarminfo() const {
  return alarminfo_ != NULL ? *alarminfo_ : *default_instance_->alarminfo_;
}
inline ::AlarmMsg::Alarm* AuthorizeRsp::mutable_alarminfo() {
  set_has_alarminfo();
  if (alarminfo_ == NULL) alarminfo_ = new ::AlarmMsg::Alarm;
  return alarminfo_;
}
inline ::AlarmMsg::Alarm* AuthorizeRsp::release_alarminfo() {
  clear_has_alarminfo();
  ::AlarmMsg::Alarm* temp = alarminfo_;
  alarminfo_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CheckPrimeReq

// required .AlarmMsg.Alarm alarmInfo = 1;
inline bool CheckPrimeReq::has_alarminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckPrimeReq::set_has_alarminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckPrimeReq::clear_has_alarminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckPrimeReq::clear_alarminfo() {
  if (alarminfo_ != NULL) alarminfo_->::AlarmMsg::Alarm::Clear();
  clear_has_alarminfo();
}
inline const ::AlarmMsg::Alarm& CheckPrimeReq::alarminfo() const {
  return alarminfo_ != NULL ? *alarminfo_ : *default_instance_->alarminfo_;
}
inline ::AlarmMsg::Alarm* CheckPrimeReq::mutable_alarminfo() {
  set_has_alarminfo();
  if (alarminfo_ == NULL) alarminfo_ = new ::AlarmMsg::Alarm;
  return alarminfo_;
}
inline ::AlarmMsg::Alarm* CheckPrimeReq::release_alarminfo() {
  clear_has_alarminfo();
  ::AlarmMsg::Alarm* temp = alarminfo_;
  alarminfo_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CheckPrimeRsp

// required .AlarmMsg.Alarm Alarm = 1;
inline bool CheckPrimeRsp::has_alarm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckPrimeRsp::set_has_alarm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckPrimeRsp::clear_has_alarm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckPrimeRsp::clear_alarm() {
  if (alarm_ != NULL) alarm_->::AlarmMsg::Alarm::Clear();
  clear_has_alarm();
}
inline const ::AlarmMsg::Alarm& CheckPrimeRsp::alarm() const {
  return alarm_ != NULL ? *alarm_ : *default_instance_->alarm_;
}
inline ::AlarmMsg::Alarm* CheckPrimeRsp::mutable_alarm() {
  set_has_alarm();
  if (alarm_ == NULL) alarm_ = new ::AlarmMsg::Alarm;
  return alarm_;
}
inline ::AlarmMsg::Alarm* CheckPrimeRsp::release_alarm() {
  clear_has_alarm();
  ::AlarmMsg::Alarm* temp = alarm_;
  alarm_ = NULL;
  return temp;
}

// required int32 number_checked = 2;
inline bool CheckPrimeRsp::has_number_checked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckPrimeRsp::set_has_number_checked() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckPrimeRsp::clear_has_number_checked() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckPrimeRsp::clear_number_checked() {
  number_checked_ = 0;
  clear_has_number_checked();
}
inline ::google::protobuf::int32 CheckPrimeRsp::number_checked() const {
  return number_checked_;
}
inline void CheckPrimeRsp::set_number_checked(::google::protobuf::int32 value) {
  set_has_number_checked();
  number_checked_ = value;
}

// optional int32 process_time = 33;
inline bool CheckPrimeRsp::has_process_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckPrimeRsp::set_has_process_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckPrimeRsp::clear_has_process_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckPrimeRsp::clear_process_time() {
  process_time_ = 0;
  clear_has_process_time();
}
inline ::google::protobuf::int32 CheckPrimeRsp::process_time() const {
  return process_time_;
}
inline void CheckPrimeRsp::set_process_time(::google::protobuf::int32 value) {
  set_has_process_time();
  process_time_ = value;
}

// repeated .AlarmMsg.PastPrimeNum past_prime_num_list = 65;
inline int CheckPrimeRsp::past_prime_num_list_size() const {
  return past_prime_num_list_.size();
}
inline void CheckPrimeRsp::clear_past_prime_num_list() {
  past_prime_num_list_.Clear();
}
inline const ::AlarmMsg::PastPrimeNum& CheckPrimeRsp::past_prime_num_list(int index) const {
  return past_prime_num_list_.Get(index);
}
inline ::AlarmMsg::PastPrimeNum* CheckPrimeRsp::mutable_past_prime_num_list(int index) {
  return past_prime_num_list_.Mutable(index);
}
inline ::AlarmMsg::PastPrimeNum* CheckPrimeRsp::add_past_prime_num_list() {
  return past_prime_num_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AlarmMsg::PastPrimeNum >&
CheckPrimeRsp::past_prime_num_list() const {
  return past_prime_num_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AlarmMsg::PastPrimeNum >*
CheckPrimeRsp::mutable_past_prime_num_list() {
  return &past_prime_num_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AlarmMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< AlarmMsg::ServerType>() {
  return AlarmMsg::ServerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< AlarmMsg::AlarmId>() {
  return AlarmMsg::AlarmId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AlarmMsg_2eproto__INCLUDED
