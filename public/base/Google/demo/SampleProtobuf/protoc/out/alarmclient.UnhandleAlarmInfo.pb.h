// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alarmclient.UnhandleAlarmInfo.proto

#ifndef PROTOBUF_alarmclient_2eUnhandleAlarmInfo_2eproto__INCLUDED
#define PROTOBUF_alarmclient_2eUnhandleAlarmInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace alarmclient {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_alarmclient_2eUnhandleAlarmInfo_2eproto();
void protobuf_AssignDesc_alarmclient_2eUnhandleAlarmInfo_2eproto();
void protobuf_ShutdownFile_alarmclient_2eUnhandleAlarmInfo_2eproto();

class UnhandleAlarmInfo;
class UnhandleAlarmInfo_Item;
class UnhandleAlarmInfo_Item_Camera;

// ===================================================================

class UnhandleAlarmInfo_Item_Camera : public ::google::protobuf::Message {
 public:
  UnhandleAlarmInfo_Item_Camera();
  virtual ~UnhandleAlarmInfo_Item_Camera();
  
  UnhandleAlarmInfo_Item_Camera(const UnhandleAlarmInfo_Item_Camera& from);
  
  inline UnhandleAlarmInfo_Item_Camera& operator=(const UnhandleAlarmInfo_Item_Camera& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnhandleAlarmInfo_Item_Camera& default_instance();
  
  void Swap(UnhandleAlarmInfo_Item_Camera* other);
  
  // implements Message ----------------------------------------------
  
  UnhandleAlarmInfo_Item_Camera* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnhandleAlarmInfo_Item_Camera& from);
  void MergeFrom(const UnhandleAlarmInfo_Item_Camera& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:alarmclient.UnhandleAlarmInfo.Item.Camera)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_alarmclient_2eUnhandleAlarmInfo_2eproto();
  friend void protobuf_AssignDesc_alarmclient_2eUnhandleAlarmInfo_2eproto();
  friend void protobuf_ShutdownFile_alarmclient_2eUnhandleAlarmInfo_2eproto();
  
  void InitAsDefaultInstance();
  static UnhandleAlarmInfo_Item_Camera* default_instance_;
};
// -------------------------------------------------------------------

class UnhandleAlarmInfo_Item : public ::google::protobuf::Message {
 public:
  UnhandleAlarmInfo_Item();
  virtual ~UnhandleAlarmInfo_Item();
  
  UnhandleAlarmInfo_Item(const UnhandleAlarmInfo_Item& from);
  
  inline UnhandleAlarmInfo_Item& operator=(const UnhandleAlarmInfo_Item& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnhandleAlarmInfo_Item& default_instance();
  
  void Swap(UnhandleAlarmInfo_Item* other);
  
  // implements Message ----------------------------------------------
  
  UnhandleAlarmInfo_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnhandleAlarmInfo_Item& from);
  void MergeFrom(const UnhandleAlarmInfo_Item& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnhandleAlarmInfo_Item_Camera Camera;
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // required string typeDesc = 3;
  inline bool has_typedesc() const;
  inline void clear_typedesc();
  static const int kTypeDescFieldNumber = 3;
  inline const ::std::string& typedesc() const;
  inline void set_typedesc(const ::std::string& value);
  inline void set_typedesc(const char* value);
  inline void set_typedesc(const char* value, size_t size);
  inline ::std::string* mutable_typedesc();
  inline ::std::string* release_typedesc();
  
  // required string plan = 4;
  inline bool has_plan() const;
  inline void clear_plan();
  static const int kPlanFieldNumber = 4;
  inline const ::std::string& plan() const;
  inline void set_plan(const ::std::string& value);
  inline void set_plan(const char* value);
  inline void set_plan(const char* value, size_t size);
  inline ::std::string* mutable_plan();
  inline ::std::string* release_plan();
  
  // required string msg = 5;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 5;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // required string addr = 6;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 6;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  
  // required string contact = 7;
  inline bool has_contact() const;
  inline void clear_contact();
  static const int kContactFieldNumber = 7;
  inline const ::std::string& contact() const;
  inline void set_contact(const ::std::string& value);
  inline void set_contact(const char* value);
  inline void set_contact(const char* value, size_t size);
  inline ::std::string* mutable_contact();
  inline ::std::string* release_contact();
  
  // required string index = 8;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 8;
  inline const ::std::string& index() const;
  inline void set_index(const ::std::string& value);
  inline void set_index(const char* value);
  inline void set_index(const char* value, size_t size);
  inline ::std::string* mutable_index();
  inline ::std::string* release_index();
  
  // required string time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  
  // repeated .alarmclient.UnhandleAlarmInfo.Item.Camera camera = 10;
  inline int camera_size() const;
  inline void clear_camera();
  static const int kCameraFieldNumber = 10;
  inline const ::alarmclient::UnhandleAlarmInfo_Item_Camera& camera(int index) const;
  inline ::alarmclient::UnhandleAlarmInfo_Item_Camera* mutable_camera(int index);
  inline ::alarmclient::UnhandleAlarmInfo_Item_Camera* add_camera();
  inline const ::google::protobuf::RepeatedPtrField< ::alarmclient::UnhandleAlarmInfo_Item_Camera >&
      camera() const;
  inline ::google::protobuf::RepeatedPtrField< ::alarmclient::UnhandleAlarmInfo_Item_Camera >*
      mutable_camera();
  
  // @@protoc_insertion_point(class_scope:alarmclient.UnhandleAlarmInfo.Item)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_typedesc();
  inline void clear_has_typedesc();
  inline void set_has_plan();
  inline void clear_has_plan();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_contact();
  inline void clear_has_contact();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* typedesc_;
  ::std::string* plan_;
  ::std::string* msg_;
  ::std::string* addr_;
  ::std::string* contact_;
  ::std::string* index_;
  ::std::string* time_;
  ::google::protobuf::RepeatedPtrField< ::alarmclient::UnhandleAlarmInfo_Item_Camera > camera_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_alarmclient_2eUnhandleAlarmInfo_2eproto();
  friend void protobuf_AssignDesc_alarmclient_2eUnhandleAlarmInfo_2eproto();
  friend void protobuf_ShutdownFile_alarmclient_2eUnhandleAlarmInfo_2eproto();
  
  void InitAsDefaultInstance();
  static UnhandleAlarmInfo_Item* default_instance_;
};
// -------------------------------------------------------------------

class UnhandleAlarmInfo : public ::google::protobuf::Message {
 public:
  UnhandleAlarmInfo();
  virtual ~UnhandleAlarmInfo();
  
  UnhandleAlarmInfo(const UnhandleAlarmInfo& from);
  
  inline UnhandleAlarmInfo& operator=(const UnhandleAlarmInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnhandleAlarmInfo& default_instance();
  
  void Swap(UnhandleAlarmInfo* other);
  
  // implements Message ----------------------------------------------
  
  UnhandleAlarmInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnhandleAlarmInfo& from);
  void MergeFrom(const UnhandleAlarmInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnhandleAlarmInfo_Item Item;
  
  // accessors -------------------------------------------------------
  
  // repeated .alarmclient.UnhandleAlarmInfo.Item uaItem = 1;
  inline int uaitem_size() const;
  inline void clear_uaitem();
  static const int kUaItemFieldNumber = 1;
  inline const ::alarmclient::UnhandleAlarmInfo_Item& uaitem(int index) const;
  inline ::alarmclient::UnhandleAlarmInfo_Item* mutable_uaitem(int index);
  inline ::alarmclient::UnhandleAlarmInfo_Item* add_uaitem();
  inline const ::google::protobuf::RepeatedPtrField< ::alarmclient::UnhandleAlarmInfo_Item >&
      uaitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::alarmclient::UnhandleAlarmInfo_Item >*
      mutable_uaitem();
  
  // @@protoc_insertion_point(class_scope:alarmclient.UnhandleAlarmInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::alarmclient::UnhandleAlarmInfo_Item > uaitem_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_alarmclient_2eUnhandleAlarmInfo_2eproto();
  friend void protobuf_AssignDesc_alarmclient_2eUnhandleAlarmInfo_2eproto();
  friend void protobuf_ShutdownFile_alarmclient_2eUnhandleAlarmInfo_2eproto();
  
  void InitAsDefaultInstance();
  static UnhandleAlarmInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// UnhandleAlarmInfo_Item_Camera

// required int32 id = 1;
inline bool UnhandleAlarmInfo_Item_Camera::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnhandleAlarmInfo_Item_Camera::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnhandleAlarmInfo_Item_Camera::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnhandleAlarmInfo_Item_Camera::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UnhandleAlarmInfo_Item_Camera::id() const {
  return id_;
}
inline void UnhandleAlarmInfo_Item_Camera::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// UnhandleAlarmInfo_Item

// required string name = 1;
inline bool UnhandleAlarmInfo_Item::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnhandleAlarmInfo_Item::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnhandleAlarmInfo_Item::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnhandleAlarmInfo_Item::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UnhandleAlarmInfo_Item::name() const {
  return *name_;
}
inline void UnhandleAlarmInfo_Item::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnhandleAlarmInfo_Item::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UnhandleAlarmInfo_Item::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 level = 2;
inline bool UnhandleAlarmInfo_Item::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnhandleAlarmInfo_Item::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnhandleAlarmInfo_Item::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnhandleAlarmInfo_Item::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UnhandleAlarmInfo_Item::level() const {
  return level_;
}
inline void UnhandleAlarmInfo_Item::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required string typeDesc = 3;
inline bool UnhandleAlarmInfo_Item::has_typedesc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnhandleAlarmInfo_Item::set_has_typedesc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnhandleAlarmInfo_Item::clear_has_typedesc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnhandleAlarmInfo_Item::clear_typedesc() {
  if (typedesc_ != &::google::protobuf::internal::kEmptyString) {
    typedesc_->clear();
  }
  clear_has_typedesc();
}
inline const ::std::string& UnhandleAlarmInfo_Item::typedesc() const {
  return *typedesc_;
}
inline void UnhandleAlarmInfo_Item::set_typedesc(const ::std::string& value) {
  set_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::kEmptyString) {
    typedesc_ = new ::std::string;
  }
  typedesc_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_typedesc(const char* value) {
  set_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::kEmptyString) {
    typedesc_ = new ::std::string;
  }
  typedesc_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_typedesc(const char* value, size_t size) {
  set_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::kEmptyString) {
    typedesc_ = new ::std::string;
  }
  typedesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnhandleAlarmInfo_Item::mutable_typedesc() {
  set_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::kEmptyString) {
    typedesc_ = new ::std::string;
  }
  return typedesc_;
}
inline ::std::string* UnhandleAlarmInfo_Item::release_typedesc() {
  clear_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = typedesc_;
    typedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string plan = 4;
inline bool UnhandleAlarmInfo_Item::has_plan() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnhandleAlarmInfo_Item::set_has_plan() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnhandleAlarmInfo_Item::clear_has_plan() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnhandleAlarmInfo_Item::clear_plan() {
  if (plan_ != &::google::protobuf::internal::kEmptyString) {
    plan_->clear();
  }
  clear_has_plan();
}
inline const ::std::string& UnhandleAlarmInfo_Item::plan() const {
  return *plan_;
}
inline void UnhandleAlarmInfo_Item::set_plan(const ::std::string& value) {
  set_has_plan();
  if (plan_ == &::google::protobuf::internal::kEmptyString) {
    plan_ = new ::std::string;
  }
  plan_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_plan(const char* value) {
  set_has_plan();
  if (plan_ == &::google::protobuf::internal::kEmptyString) {
    plan_ = new ::std::string;
  }
  plan_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_plan(const char* value, size_t size) {
  set_has_plan();
  if (plan_ == &::google::protobuf::internal::kEmptyString) {
    plan_ = new ::std::string;
  }
  plan_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnhandleAlarmInfo_Item::mutable_plan() {
  set_has_plan();
  if (plan_ == &::google::protobuf::internal::kEmptyString) {
    plan_ = new ::std::string;
  }
  return plan_;
}
inline ::std::string* UnhandleAlarmInfo_Item::release_plan() {
  clear_has_plan();
  if (plan_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = plan_;
    plan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string msg = 5;
inline bool UnhandleAlarmInfo_Item::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnhandleAlarmInfo_Item::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnhandleAlarmInfo_Item::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnhandleAlarmInfo_Item::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& UnhandleAlarmInfo_Item::msg() const {
  return *msg_;
}
inline void UnhandleAlarmInfo_Item::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnhandleAlarmInfo_Item::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* UnhandleAlarmInfo_Item::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string addr = 6;
inline bool UnhandleAlarmInfo_Item::has_addr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UnhandleAlarmInfo_Item::set_has_addr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UnhandleAlarmInfo_Item::clear_has_addr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UnhandleAlarmInfo_Item::clear_addr() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& UnhandleAlarmInfo_Item::addr() const {
  return *addr_;
}
inline void UnhandleAlarmInfo_Item::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnhandleAlarmInfo_Item::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  return addr_;
}
inline ::std::string* UnhandleAlarmInfo_Item::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string contact = 7;
inline bool UnhandleAlarmInfo_Item::has_contact() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UnhandleAlarmInfo_Item::set_has_contact() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UnhandleAlarmInfo_Item::clear_has_contact() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UnhandleAlarmInfo_Item::clear_contact() {
  if (contact_ != &::google::protobuf::internal::kEmptyString) {
    contact_->clear();
  }
  clear_has_contact();
}
inline const ::std::string& UnhandleAlarmInfo_Item::contact() const {
  return *contact_;
}
inline void UnhandleAlarmInfo_Item::set_contact(const ::std::string& value) {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  contact_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_contact(const char* value) {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  contact_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_contact(const char* value, size_t size) {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  contact_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnhandleAlarmInfo_Item::mutable_contact() {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  return contact_;
}
inline ::std::string* UnhandleAlarmInfo_Item::release_contact() {
  clear_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contact_;
    contact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string index = 8;
inline bool UnhandleAlarmInfo_Item::has_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UnhandleAlarmInfo_Item::set_has_index() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UnhandleAlarmInfo_Item::clear_has_index() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UnhandleAlarmInfo_Item::clear_index() {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    index_->clear();
  }
  clear_has_index();
}
inline const ::std::string& UnhandleAlarmInfo_Item::index() const {
  return *index_;
}
inline void UnhandleAlarmInfo_Item::set_index(const ::std::string& value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_index(const char* value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_index(const char* value, size_t size) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnhandleAlarmInfo_Item::mutable_index() {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  return index_;
}
inline ::std::string* UnhandleAlarmInfo_Item::release_index() {
  clear_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = index_;
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string time = 9;
inline bool UnhandleAlarmInfo_Item::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UnhandleAlarmInfo_Item::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UnhandleAlarmInfo_Item::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UnhandleAlarmInfo_Item::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& UnhandleAlarmInfo_Item::time() const {
  return *time_;
}
inline void UnhandleAlarmInfo_Item::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void UnhandleAlarmInfo_Item::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnhandleAlarmInfo_Item::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* UnhandleAlarmInfo_Item::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .alarmclient.UnhandleAlarmInfo.Item.Camera camera = 10;
inline int UnhandleAlarmInfo_Item::camera_size() const {
  return camera_.size();
}
inline void UnhandleAlarmInfo_Item::clear_camera() {
  camera_.Clear();
}
inline const ::alarmclient::UnhandleAlarmInfo_Item_Camera& UnhandleAlarmInfo_Item::camera(int index) const {
  return camera_.Get(index);
}
inline ::alarmclient::UnhandleAlarmInfo_Item_Camera* UnhandleAlarmInfo_Item::mutable_camera(int index) {
  return camera_.Mutable(index);
}
inline ::alarmclient::UnhandleAlarmInfo_Item_Camera* UnhandleAlarmInfo_Item::add_camera() {
  return camera_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::alarmclient::UnhandleAlarmInfo_Item_Camera >&
UnhandleAlarmInfo_Item::camera() const {
  return camera_;
}
inline ::google::protobuf::RepeatedPtrField< ::alarmclient::UnhandleAlarmInfo_Item_Camera >*
UnhandleAlarmInfo_Item::mutable_camera() {
  return &camera_;
}

// -------------------------------------------------------------------

// UnhandleAlarmInfo

// repeated .alarmclient.UnhandleAlarmInfo.Item uaItem = 1;
inline int UnhandleAlarmInfo::uaitem_size() const {
  return uaitem_.size();
}
inline void UnhandleAlarmInfo::clear_uaitem() {
  uaitem_.Clear();
}
inline const ::alarmclient::UnhandleAlarmInfo_Item& UnhandleAlarmInfo::uaitem(int index) const {
  return uaitem_.Get(index);
}
inline ::alarmclient::UnhandleAlarmInfo_Item* UnhandleAlarmInfo::mutable_uaitem(int index) {
  return uaitem_.Mutable(index);
}
inline ::alarmclient::UnhandleAlarmInfo_Item* UnhandleAlarmInfo::add_uaitem() {
  return uaitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::alarmclient::UnhandleAlarmInfo_Item >&
UnhandleAlarmInfo::uaitem() const {
  return uaitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::alarmclient::UnhandleAlarmInfo_Item >*
UnhandleAlarmInfo::mutable_uaitem() {
  return &uaitem_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace alarmclient

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_alarmclient_2eUnhandleAlarmInfo_2eproto__INCLUDED
