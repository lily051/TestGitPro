// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type/DevType.proto

#ifndef PROTOBUF_type_2fDevType_2eproto__INCLUDED
#define PROTOBUF_type_2fDevType_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_type_2fDevType_2eproto();
void protobuf_AssignDesc_type_2fDevType_2eproto();
void protobuf_ShutdownFile_type_2fDevType_2eproto();


enum DEV_TYPE {
  DEV_TYPE_DVR = 50000,
  DEV_TYPE_ALARM_HOST = 50001,
  DEV_TYPE_GATE = 50002,
  DEV_TYPE_TALK = 50003,
  DEV_TYPE_DECODER = 50004,
  DEV_TYPE_VIP = 50005,
  DEV_TYPE_SC = 50006,
  DEV_TYPE_IPC = 50007,
  DEV_TYPE_DVS = 50008,
  DEV_TYPE_PCDVR = 50009,
  DEV_TYPE_AH_NETWORK_MODULE = 50010,
  DEV_TYPE_CVR = 50011,
  DEV_TYPE_NVR = 50012,
  DEV_TYPE_ENVIRONMENT = 50013,
  DEV_TYPE_FIRE = 50014,
  DEV_TYPE_CLOUD_STORAGE = 50015,
  DEV_TYPE_GUN = 50016,
  DEV_TYPE_YS7 = 50017,
  DEV_TYPE_KMS = 50050,
  DEV_TYPE_OBJECTCLOUD = 50060
};
bool DEV_TYPE_IsValid(int value);
const DEV_TYPE DEV_TYPE_MIN = DEV_TYPE_DVR;
const DEV_TYPE DEV_TYPE_MAX = DEV_TYPE_OBJECTCLOUD;
const int DEV_TYPE_ARRAYSIZE = DEV_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DEV_TYPE_descriptor();
inline const ::std::string& DEV_TYPE_Name(DEV_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DEV_TYPE_descriptor(), value);
}
inline bool DEV_TYPE_Parse(
    const ::std::string& name, DEV_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DEV_TYPE>(
    DEV_TYPE_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< cms_8120::DEV_TYPE>() {
  return cms_8120::DEV_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_type_2fDevType_2eproto__INCLUDED
