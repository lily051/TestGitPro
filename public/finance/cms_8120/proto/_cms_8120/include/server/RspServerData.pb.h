// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/RspServerData.proto

#ifndef PROTOBUF_server_2fRspServerData_2eproto__INCLUDED
#define PROTOBUF_server_2fRspServerData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "type/cmd.pb.h"
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_2fRspServerData_2eproto();
void protobuf_AssignDesc_server_2fRspServerData_2eproto();
void protobuf_ShutdownFile_server_2fRspServerData_2eproto();

class RspServerData;

// ===================================================================

class RspServerData : public ::google::protobuf::Message {
 public:
  RspServerData();
  virtual ~RspServerData();
  
  RspServerData(const RspServerData& from);
  
  inline RspServerData& operator=(const RspServerData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspServerData& default_instance();
  
  void Swap(RspServerData* other);
  
  // implements Message ----------------------------------------------
  
  RspServerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspServerData& from);
  void MergeFrom(const RspServerData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional int32 data_id = 3;
  inline bool has_data_id() const;
  inline void clear_data_id();
  static const int kDataIdFieldNumber = 3;
  inline ::google::protobuf::int32 data_id() const;
  inline void set_data_id(::google::protobuf::int32 value);
  
  // optional string error_msg = 4;
  inline bool has_error_msg() const;
  inline void clear_error_msg();
  static const int kErrorMsgFieldNumber = 4;
  inline const ::std::string& error_msg() const;
  inline void set_error_msg(const ::std::string& value);
  inline void set_error_msg(const char* value);
  inline void set_error_msg(const char* value, size_t size);
  inline ::std::string* mutable_error_msg();
  inline ::std::string* release_error_msg();
  
  // @@protoc_insertion_point(class_scope:cms_8120.RspServerData)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_data_id();
  inline void clear_has_data_id();
  inline void set_has_error_msg();
  inline void clear_has_error_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 result_;
  ::std::string* error_msg_;
  ::google::protobuf::int32 data_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_2fRspServerData_2eproto();
  friend void protobuf_AssignDesc_server_2fRspServerData_2eproto();
  friend void protobuf_ShutdownFile_server_2fRspServerData_2eproto();
  
  void InitAsDefaultInstance();
  static RspServerData* default_instance_;
};
// ===================================================================


// ===================================================================

// RspServerData

// optional int32 cmd = 1;
inline bool RspServerData::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspServerData::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspServerData::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspServerData::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 RspServerData::cmd() const {
  return cmd_;
}
inline void RspServerData::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 result = 2;
inline bool RspServerData::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspServerData::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspServerData::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspServerData::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RspServerData::result() const {
  return result_;
}
inline void RspServerData::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 data_id = 3;
inline bool RspServerData::has_data_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspServerData::set_has_data_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspServerData::clear_has_data_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspServerData::clear_data_id() {
  data_id_ = 0;
  clear_has_data_id();
}
inline ::google::protobuf::int32 RspServerData::data_id() const {
  return data_id_;
}
inline void RspServerData::set_data_id(::google::protobuf::int32 value) {
  set_has_data_id();
  data_id_ = value;
}

// optional string error_msg = 4;
inline bool RspServerData::has_error_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspServerData::set_has_error_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspServerData::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspServerData::clear_error_msg() {
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    error_msg_->clear();
  }
  clear_has_error_msg();
}
inline const ::std::string& RspServerData::error_msg() const {
  return *error_msg_;
}
inline void RspServerData::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
}
inline void RspServerData::set_error_msg(const char* value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
}
inline void RspServerData::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspServerData::mutable_error_msg() {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  return error_msg_;
}
inline ::std::string* RspServerData::release_error_msg() {
  clear_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_msg_;
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_2fRspServerData_2eproto__INCLUDED
