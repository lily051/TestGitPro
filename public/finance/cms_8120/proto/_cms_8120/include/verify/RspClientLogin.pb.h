// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: verify/RspClientLogin.proto

#ifndef PROTOBUF_verify_2fRspClientLogin_2eproto__INCLUDED
#define PROTOBUF_verify_2fRspClientLogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "type/cmd.pb.h"
#include "type/ModuleType.pb.h"
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_verify_2fRspClientLogin_2eproto();
void protobuf_AssignDesc_verify_2fRspClientLogin_2eproto();
void protobuf_ShutdownFile_verify_2fRspClientLogin_2eproto();

class RspClientLogin;
class UserPwdCheck;

// ===================================================================

class RspClientLogin : public ::google::protobuf::Message {
 public:
  RspClientLogin();
  virtual ~RspClientLogin();
  
  RspClientLogin(const RspClientLogin& from);
  
  inline RspClientLogin& operator=(const RspClientLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspClientLogin& default_instance();
  
  void Swap(RspClientLogin* other);
  
  // implements Message ----------------------------------------------
  
  RspClientLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspClientLogin& from);
  void MergeFrom(const RspClientLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string result_info = 3;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 3;
  inline const ::std::string& result_info() const;
  inline void set_result_info(const ::std::string& value);
  inline void set_result_info(const char* value);
  inline void set_result_info(const char* value, size_t size);
  inline ::std::string* mutable_result_info();
  inline ::std::string* release_result_info();
  
  // optional int32 authorization = 4;
  inline bool has_authorization() const;
  inline void clear_authorization();
  static const int kAuthorizationFieldNumber = 4;
  inline ::google::protobuf::int32 authorization() const;
  inline void set_authorization(::google::protobuf::int32 value);
  
  // optional string production_version = 5;
  inline bool has_production_version() const;
  inline void clear_production_version();
  static const int kProductionVersionFieldNumber = 5;
  inline const ::std::string& production_version() const;
  inline void set_production_version(const ::std::string& value);
  inline void set_production_version(const char* value);
  inline void set_production_version(const char* value, size_t size);
  inline ::std::string* mutable_production_version();
  inline ::std::string* release_production_version();
  
  // optional string trial_end_time = 6;
  inline bool has_trial_end_time() const;
  inline void clear_trial_end_time();
  static const int kTrialEndTimeFieldNumber = 6;
  inline const ::std::string& trial_end_time() const;
  inline void set_trial_end_time(const ::std::string& value);
  inline void set_trial_end_time(const char* value);
  inline void set_trial_end_time(const char* value, size_t size);
  inline ::std::string* mutable_trial_end_time();
  inline ::std::string* release_trial_end_time();
  
  // optional int32 user_id = 7;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 7;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // optional int32 role_id = 8;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 8;
  inline ::google::protobuf::int32 role_id() const;
  inline void set_role_id(::google::protobuf::int32 value);
  
  // optional int32 is_need_sync_time = 9;
  inline bool has_is_need_sync_time() const;
  inline void clear_is_need_sync_time();
  static const int kIsNeedSyncTimeFieldNumber = 9;
  inline ::google::protobuf::int32 is_need_sync_time() const;
  inline void set_is_need_sync_time(::google::protobuf::int32 value);
  
  // repeated int32 ui_cs_right = 10;
  inline int ui_cs_right_size() const;
  inline void clear_ui_cs_right();
  static const int kUiCsRightFieldNumber = 10;
  inline ::google::protobuf::int32 ui_cs_right(int index) const;
  inline void set_ui_cs_right(int index, ::google::protobuf::int32 value);
  inline void add_ui_cs_right(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ui_cs_right() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ui_cs_right();
  
  // optional int32 is_omni_operator = 11;
  inline bool has_is_omni_operator() const;
  inline void clear_is_omni_operator();
  static const int kIsOmniOperatorFieldNumber = 11;
  inline ::google::protobuf::int32 is_omni_operator() const;
  inline void set_is_omni_operator(::google::protobuf::int32 value);
  
  // optional int32 user_level = 12;
  inline bool has_user_level() const;
  inline void clear_user_level();
  static const int kUserLevelFieldNumber = 12;
  inline ::google::protobuf::int32 user_level() const;
  inline void set_user_level(::google::protobuf::int32 value);
  
  // optional .cms_8120.UserPwdCheck user_pwd_check = 13;
  inline bool has_user_pwd_check() const;
  inline void clear_user_pwd_check();
  static const int kUserPwdCheckFieldNumber = 13;
  inline const ::cms_8120::UserPwdCheck& user_pwd_check() const;
  inline ::cms_8120::UserPwdCheck* mutable_user_pwd_check();
  inline ::cms_8120::UserPwdCheck* release_user_pwd_check();
  
  // optional string custom_title = 14;
  inline bool has_custom_title() const;
  inline void clear_custom_title();
  static const int kCustomTitleFieldNumber = 14;
  inline const ::std::string& custom_title() const;
  inline void set_custom_title(const ::std::string& value);
  inline void set_custom_title(const char* value);
  inline void set_custom_title(const char* value, size_t size);
  inline ::std::string* mutable_custom_title();
  inline ::std::string* release_custom_title();
  
  // optional int32 skin_color = 15 [default = -1];
  inline bool has_skin_color() const;
  inline void clear_skin_color();
  static const int kSkinColorFieldNumber = 15;
  inline ::google::protobuf::int32 skin_color() const;
  inline void set_skin_color(::google::protobuf::int32 value);
  
  // optional string update_server_ip = 16;
  inline bool has_update_server_ip() const;
  inline void clear_update_server_ip();
  static const int kUpdateServerIpFieldNumber = 16;
  inline const ::std::string& update_server_ip() const;
  inline void set_update_server_ip(const ::std::string& value);
  inline void set_update_server_ip(const char* value);
  inline void set_update_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_update_server_ip();
  inline ::std::string* release_update_server_ip();
  
  // optional int32 update_server_port = 17;
  inline bool has_update_server_port() const;
  inline void clear_update_server_port();
  static const int kUpdateServerPortFieldNumber = 17;
  inline ::google::protobuf::int32 update_server_port() const;
  inline void set_update_server_port(::google::protobuf::int32 value);
  
  // optional int32 line = 18 [default = 0];
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 18;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);
  
  // optional int32 language = 19 [default = 0];
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 19;
  inline ::google::protobuf::int32 language() const;
  inline void set_language(::google::protobuf::int32 value);
  
  // optional string copyright = 20;
  inline bool has_copyright() const;
  inline void clear_copyright();
  static const int kCopyrightFieldNumber = 20;
  inline const ::std::string& copyright() const;
  inline void set_copyright(const ::std::string& value);
  inline void set_copyright(const char* value);
  inline void set_copyright(const char* value, size_t size);
  inline ::std::string* mutable_copyright();
  inline ::std::string* release_copyright();
  
  // optional int32 is_inital_pwd = 21;
  inline bool has_is_inital_pwd() const;
  inline void clear_is_inital_pwd();
  static const int kIsInitalPwdFieldNumber = 21;
  inline ::google::protobuf::int32 is_inital_pwd() const;
  inline void set_is_inital_pwd(::google::protobuf::int32 value);
  
  // optional string data_ex = 22;
  inline bool has_data_ex() const;
  inline void clear_data_ex();
  static const int kDataExFieldNumber = 22;
  inline const ::std::string& data_ex() const;
  inline void set_data_ex(const ::std::string& value);
  inline void set_data_ex(const char* value);
  inline void set_data_ex(const char* value, size_t size);
  inline ::std::string* mutable_data_ex();
  inline ::std::string* release_data_ex();
  
  // @@protoc_insertion_point(class_scope:cms_8120.RspClientLogin)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_result_info();
  inline void clear_has_result_info();
  inline void set_has_authorization();
  inline void clear_has_authorization();
  inline void set_has_production_version();
  inline void clear_has_production_version();
  inline void set_has_trial_end_time();
  inline void clear_has_trial_end_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_is_need_sync_time();
  inline void clear_has_is_need_sync_time();
  inline void set_has_is_omni_operator();
  inline void clear_has_is_omni_operator();
  inline void set_has_user_level();
  inline void clear_has_user_level();
  inline void set_has_user_pwd_check();
  inline void clear_has_user_pwd_check();
  inline void set_has_custom_title();
  inline void clear_has_custom_title();
  inline void set_has_skin_color();
  inline void clear_has_skin_color();
  inline void set_has_update_server_ip();
  inline void clear_has_update_server_ip();
  inline void set_has_update_server_port();
  inline void clear_has_update_server_port();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_copyright();
  inline void clear_has_copyright();
  inline void set_has_is_inital_pwd();
  inline void clear_has_is_inital_pwd();
  inline void set_has_data_ex();
  inline void clear_has_data_ex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 result_;
  ::std::string* result_info_;
  ::std::string* production_version_;
  ::google::protobuf::int32 authorization_;
  ::google::protobuf::int32 user_id_;
  ::std::string* trial_end_time_;
  ::google::protobuf::int32 role_id_;
  ::google::protobuf::int32 is_need_sync_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ui_cs_right_;
  ::google::protobuf::int32 is_omni_operator_;
  ::google::protobuf::int32 user_level_;
  ::cms_8120::UserPwdCheck* user_pwd_check_;
  ::std::string* custom_title_;
  ::std::string* update_server_ip_;
  ::google::protobuf::int32 skin_color_;
  ::google::protobuf::int32 update_server_port_;
  ::google::protobuf::int32 line_;
  ::google::protobuf::int32 language_;
  ::std::string* copyright_;
  ::std::string* data_ex_;
  ::google::protobuf::int32 is_inital_pwd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  friend void  protobuf_AddDesc_verify_2fRspClientLogin_2eproto();
  friend void protobuf_AssignDesc_verify_2fRspClientLogin_2eproto();
  friend void protobuf_ShutdownFile_verify_2fRspClientLogin_2eproto();
  
  void InitAsDefaultInstance();
  static RspClientLogin* default_instance_;
};
// -------------------------------------------------------------------

class UserPwdCheck : public ::google::protobuf::Message {
 public:
  UserPwdCheck();
  virtual ~UserPwdCheck();
  
  UserPwdCheck(const UserPwdCheck& from);
  
  inline UserPwdCheck& operator=(const UserPwdCheck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPwdCheck& default_instance();
  
  void Swap(UserPwdCheck* other);
  
  // implements Message ----------------------------------------------
  
  UserPwdCheck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserPwdCheck& from);
  void MergeFrom(const UserPwdCheck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 is_pwdcheck_enabled = 2;
  inline bool has_is_pwdcheck_enabled() const;
  inline void clear_is_pwdcheck_enabled();
  static const int kIsPwdcheckEnabledFieldNumber = 2;
  inline ::google::protobuf::int32 is_pwdcheck_enabled() const;
  inline void set_is_pwdcheck_enabled(::google::protobuf::int32 value);
  
  // optional int32 remaining_days = 3;
  inline bool has_remaining_days() const;
  inline void clear_remaining_days();
  static const int kRemainingDaysFieldNumber = 3;
  inline ::google::protobuf::int32 remaining_days() const;
  inline void set_remaining_days(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cms_8120.UserPwdCheck)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_is_pwdcheck_enabled();
  inline void clear_has_is_pwdcheck_enabled();
  inline void set_has_remaining_days();
  inline void clear_has_remaining_days();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 is_pwdcheck_enabled_;
  ::google::protobuf::int32 remaining_days_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_verify_2fRspClientLogin_2eproto();
  friend void protobuf_AssignDesc_verify_2fRspClientLogin_2eproto();
  friend void protobuf_ShutdownFile_verify_2fRspClientLogin_2eproto();
  
  void InitAsDefaultInstance();
  static UserPwdCheck* default_instance_;
};
// ===================================================================


// ===================================================================

// RspClientLogin

// optional int32 cmd = 1;
inline bool RspClientLogin::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspClientLogin::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspClientLogin::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspClientLogin::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 RspClientLogin::cmd() const {
  return cmd_;
}
inline void RspClientLogin::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 result = 2;
inline bool RspClientLogin::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspClientLogin::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspClientLogin::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspClientLogin::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RspClientLogin::result() const {
  return result_;
}
inline void RspClientLogin::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string result_info = 3;
inline bool RspClientLogin::has_result_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspClientLogin::set_has_result_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspClientLogin::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspClientLogin::clear_result_info() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    result_info_->clear();
  }
  clear_has_result_info();
}
inline const ::std::string& RspClientLogin::result_info() const {
  return *result_info_;
}
inline void RspClientLogin::set_result_info(const ::std::string& value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
}
inline void RspClientLogin::set_result_info(const char* value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
}
inline void RspClientLogin::set_result_info(const char* value, size_t size) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  return result_info_;
}
inline ::std::string* RspClientLogin::release_result_info() {
  clear_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_info_;
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 authorization = 4;
inline bool RspClientLogin::has_authorization() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspClientLogin::set_has_authorization() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspClientLogin::clear_has_authorization() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspClientLogin::clear_authorization() {
  authorization_ = 0;
  clear_has_authorization();
}
inline ::google::protobuf::int32 RspClientLogin::authorization() const {
  return authorization_;
}
inline void RspClientLogin::set_authorization(::google::protobuf::int32 value) {
  set_has_authorization();
  authorization_ = value;
}

// optional string production_version = 5;
inline bool RspClientLogin::has_production_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspClientLogin::set_has_production_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspClientLogin::clear_has_production_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspClientLogin::clear_production_version() {
  if (production_version_ != &::google::protobuf::internal::kEmptyString) {
    production_version_->clear();
  }
  clear_has_production_version();
}
inline const ::std::string& RspClientLogin::production_version() const {
  return *production_version_;
}
inline void RspClientLogin::set_production_version(const ::std::string& value) {
  set_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    production_version_ = new ::std::string;
  }
  production_version_->assign(value);
}
inline void RspClientLogin::set_production_version(const char* value) {
  set_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    production_version_ = new ::std::string;
  }
  production_version_->assign(value);
}
inline void RspClientLogin::set_production_version(const char* value, size_t size) {
  set_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    production_version_ = new ::std::string;
  }
  production_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_production_version() {
  set_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    production_version_ = new ::std::string;
  }
  return production_version_;
}
inline ::std::string* RspClientLogin::release_production_version() {
  clear_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = production_version_;
    production_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string trial_end_time = 6;
inline bool RspClientLogin::has_trial_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspClientLogin::set_has_trial_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspClientLogin::clear_has_trial_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspClientLogin::clear_trial_end_time() {
  if (trial_end_time_ != &::google::protobuf::internal::kEmptyString) {
    trial_end_time_->clear();
  }
  clear_has_trial_end_time();
}
inline const ::std::string& RspClientLogin::trial_end_time() const {
  return *trial_end_time_;
}
inline void RspClientLogin::set_trial_end_time(const ::std::string& value) {
  set_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    trial_end_time_ = new ::std::string;
  }
  trial_end_time_->assign(value);
}
inline void RspClientLogin::set_trial_end_time(const char* value) {
  set_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    trial_end_time_ = new ::std::string;
  }
  trial_end_time_->assign(value);
}
inline void RspClientLogin::set_trial_end_time(const char* value, size_t size) {
  set_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    trial_end_time_ = new ::std::string;
  }
  trial_end_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_trial_end_time() {
  set_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    trial_end_time_ = new ::std::string;
  }
  return trial_end_time_;
}
inline ::std::string* RspClientLogin::release_trial_end_time() {
  clear_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trial_end_time_;
    trial_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 user_id = 7;
inline bool RspClientLogin::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspClientLogin::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspClientLogin::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspClientLogin::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 RspClientLogin::user_id() const {
  return user_id_;
}
inline void RspClientLogin::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 role_id = 8;
inline bool RspClientLogin::has_role_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspClientLogin::set_has_role_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspClientLogin::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspClientLogin::clear_role_id() {
  role_id_ = 0;
  clear_has_role_id();
}
inline ::google::protobuf::int32 RspClientLogin::role_id() const {
  return role_id_;
}
inline void RspClientLogin::set_role_id(::google::protobuf::int32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 is_need_sync_time = 9;
inline bool RspClientLogin::has_is_need_sync_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspClientLogin::set_has_is_need_sync_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspClientLogin::clear_has_is_need_sync_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspClientLogin::clear_is_need_sync_time() {
  is_need_sync_time_ = 0;
  clear_has_is_need_sync_time();
}
inline ::google::protobuf::int32 RspClientLogin::is_need_sync_time() const {
  return is_need_sync_time_;
}
inline void RspClientLogin::set_is_need_sync_time(::google::protobuf::int32 value) {
  set_has_is_need_sync_time();
  is_need_sync_time_ = value;
}

// repeated int32 ui_cs_right = 10;
inline int RspClientLogin::ui_cs_right_size() const {
  return ui_cs_right_.size();
}
inline void RspClientLogin::clear_ui_cs_right() {
  ui_cs_right_.Clear();
}
inline ::google::protobuf::int32 RspClientLogin::ui_cs_right(int index) const {
  return ui_cs_right_.Get(index);
}
inline void RspClientLogin::set_ui_cs_right(int index, ::google::protobuf::int32 value) {
  ui_cs_right_.Set(index, value);
}
inline void RspClientLogin::add_ui_cs_right(::google::protobuf::int32 value) {
  ui_cs_right_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RspClientLogin::ui_cs_right() const {
  return ui_cs_right_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RspClientLogin::mutable_ui_cs_right() {
  return &ui_cs_right_;
}

// optional int32 is_omni_operator = 11;
inline bool RspClientLogin::has_is_omni_operator() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RspClientLogin::set_has_is_omni_operator() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RspClientLogin::clear_has_is_omni_operator() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RspClientLogin::clear_is_omni_operator() {
  is_omni_operator_ = 0;
  clear_has_is_omni_operator();
}
inline ::google::protobuf::int32 RspClientLogin::is_omni_operator() const {
  return is_omni_operator_;
}
inline void RspClientLogin::set_is_omni_operator(::google::protobuf::int32 value) {
  set_has_is_omni_operator();
  is_omni_operator_ = value;
}

// optional int32 user_level = 12;
inline bool RspClientLogin::has_user_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RspClientLogin::set_has_user_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RspClientLogin::clear_has_user_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RspClientLogin::clear_user_level() {
  user_level_ = 0;
  clear_has_user_level();
}
inline ::google::protobuf::int32 RspClientLogin::user_level() const {
  return user_level_;
}
inline void RspClientLogin::set_user_level(::google::protobuf::int32 value) {
  set_has_user_level();
  user_level_ = value;
}

// optional .cms_8120.UserPwdCheck user_pwd_check = 13;
inline bool RspClientLogin::has_user_pwd_check() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RspClientLogin::set_has_user_pwd_check() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RspClientLogin::clear_has_user_pwd_check() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RspClientLogin::clear_user_pwd_check() {
  if (user_pwd_check_ != NULL) user_pwd_check_->::cms_8120::UserPwdCheck::Clear();
  clear_has_user_pwd_check();
}
inline const ::cms_8120::UserPwdCheck& RspClientLogin::user_pwd_check() const {
  return user_pwd_check_ != NULL ? *user_pwd_check_ : *default_instance_->user_pwd_check_;
}
inline ::cms_8120::UserPwdCheck* RspClientLogin::mutable_user_pwd_check() {
  set_has_user_pwd_check();
  if (user_pwd_check_ == NULL) user_pwd_check_ = new ::cms_8120::UserPwdCheck;
  return user_pwd_check_;
}
inline ::cms_8120::UserPwdCheck* RspClientLogin::release_user_pwd_check() {
  clear_has_user_pwd_check();
  ::cms_8120::UserPwdCheck* temp = user_pwd_check_;
  user_pwd_check_ = NULL;
  return temp;
}

// optional string custom_title = 14;
inline bool RspClientLogin::has_custom_title() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RspClientLogin::set_has_custom_title() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RspClientLogin::clear_has_custom_title() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RspClientLogin::clear_custom_title() {
  if (custom_title_ != &::google::protobuf::internal::kEmptyString) {
    custom_title_->clear();
  }
  clear_has_custom_title();
}
inline const ::std::string& RspClientLogin::custom_title() const {
  return *custom_title_;
}
inline void RspClientLogin::set_custom_title(const ::std::string& value) {
  set_has_custom_title();
  if (custom_title_ == &::google::protobuf::internal::kEmptyString) {
    custom_title_ = new ::std::string;
  }
  custom_title_->assign(value);
}
inline void RspClientLogin::set_custom_title(const char* value) {
  set_has_custom_title();
  if (custom_title_ == &::google::protobuf::internal::kEmptyString) {
    custom_title_ = new ::std::string;
  }
  custom_title_->assign(value);
}
inline void RspClientLogin::set_custom_title(const char* value, size_t size) {
  set_has_custom_title();
  if (custom_title_ == &::google::protobuf::internal::kEmptyString) {
    custom_title_ = new ::std::string;
  }
  custom_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_custom_title() {
  set_has_custom_title();
  if (custom_title_ == &::google::protobuf::internal::kEmptyString) {
    custom_title_ = new ::std::string;
  }
  return custom_title_;
}
inline ::std::string* RspClientLogin::release_custom_title() {
  clear_has_custom_title();
  if (custom_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custom_title_;
    custom_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 skin_color = 15 [default = -1];
inline bool RspClientLogin::has_skin_color() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RspClientLogin::set_has_skin_color() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RspClientLogin::clear_has_skin_color() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RspClientLogin::clear_skin_color() {
  skin_color_ = -1;
  clear_has_skin_color();
}
inline ::google::protobuf::int32 RspClientLogin::skin_color() const {
  return skin_color_;
}
inline void RspClientLogin::set_skin_color(::google::protobuf::int32 value) {
  set_has_skin_color();
  skin_color_ = value;
}

// optional string update_server_ip = 16;
inline bool RspClientLogin::has_update_server_ip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RspClientLogin::set_has_update_server_ip() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RspClientLogin::clear_has_update_server_ip() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RspClientLogin::clear_update_server_ip() {
  if (update_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    update_server_ip_->clear();
  }
  clear_has_update_server_ip();
}
inline const ::std::string& RspClientLogin::update_server_ip() const {
  return *update_server_ip_;
}
inline void RspClientLogin::set_update_server_ip(const ::std::string& value) {
  set_has_update_server_ip();
  if (update_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    update_server_ip_ = new ::std::string;
  }
  update_server_ip_->assign(value);
}
inline void RspClientLogin::set_update_server_ip(const char* value) {
  set_has_update_server_ip();
  if (update_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    update_server_ip_ = new ::std::string;
  }
  update_server_ip_->assign(value);
}
inline void RspClientLogin::set_update_server_ip(const char* value, size_t size) {
  set_has_update_server_ip();
  if (update_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    update_server_ip_ = new ::std::string;
  }
  update_server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_update_server_ip() {
  set_has_update_server_ip();
  if (update_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    update_server_ip_ = new ::std::string;
  }
  return update_server_ip_;
}
inline ::std::string* RspClientLogin::release_update_server_ip() {
  clear_has_update_server_ip();
  if (update_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = update_server_ip_;
    update_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 update_server_port = 17;
inline bool RspClientLogin::has_update_server_port() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RspClientLogin::set_has_update_server_port() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RspClientLogin::clear_has_update_server_port() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RspClientLogin::clear_update_server_port() {
  update_server_port_ = 0;
  clear_has_update_server_port();
}
inline ::google::protobuf::int32 RspClientLogin::update_server_port() const {
  return update_server_port_;
}
inline void RspClientLogin::set_update_server_port(::google::protobuf::int32 value) {
  set_has_update_server_port();
  update_server_port_ = value;
}

// optional int32 line = 18 [default = 0];
inline bool RspClientLogin::has_line() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RspClientLogin::set_has_line() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RspClientLogin::clear_has_line() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RspClientLogin::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 RspClientLogin::line() const {
  return line_;
}
inline void RspClientLogin::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
}

// optional int32 language = 19 [default = 0];
inline bool RspClientLogin::has_language() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RspClientLogin::set_has_language() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RspClientLogin::clear_has_language() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RspClientLogin::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::google::protobuf::int32 RspClientLogin::language() const {
  return language_;
}
inline void RspClientLogin::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
}

// optional string copyright = 20;
inline bool RspClientLogin::has_copyright() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RspClientLogin::set_has_copyright() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RspClientLogin::clear_has_copyright() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RspClientLogin::clear_copyright() {
  if (copyright_ != &::google::protobuf::internal::kEmptyString) {
    copyright_->clear();
  }
  clear_has_copyright();
}
inline const ::std::string& RspClientLogin::copyright() const {
  return *copyright_;
}
inline void RspClientLogin::set_copyright(const ::std::string& value) {
  set_has_copyright();
  if (copyright_ == &::google::protobuf::internal::kEmptyString) {
    copyright_ = new ::std::string;
  }
  copyright_->assign(value);
}
inline void RspClientLogin::set_copyright(const char* value) {
  set_has_copyright();
  if (copyright_ == &::google::protobuf::internal::kEmptyString) {
    copyright_ = new ::std::string;
  }
  copyright_->assign(value);
}
inline void RspClientLogin::set_copyright(const char* value, size_t size) {
  set_has_copyright();
  if (copyright_ == &::google::protobuf::internal::kEmptyString) {
    copyright_ = new ::std::string;
  }
  copyright_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_copyright() {
  set_has_copyright();
  if (copyright_ == &::google::protobuf::internal::kEmptyString) {
    copyright_ = new ::std::string;
  }
  return copyright_;
}
inline ::std::string* RspClientLogin::release_copyright() {
  clear_has_copyright();
  if (copyright_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = copyright_;
    copyright_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 is_inital_pwd = 21;
inline bool RspClientLogin::has_is_inital_pwd() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RspClientLogin::set_has_is_inital_pwd() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RspClientLogin::clear_has_is_inital_pwd() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RspClientLogin::clear_is_inital_pwd() {
  is_inital_pwd_ = 0;
  clear_has_is_inital_pwd();
}
inline ::google::protobuf::int32 RspClientLogin::is_inital_pwd() const {
  return is_inital_pwd_;
}
inline void RspClientLogin::set_is_inital_pwd(::google::protobuf::int32 value) {
  set_has_is_inital_pwd();
  is_inital_pwd_ = value;
}

// optional string data_ex = 22;
inline bool RspClientLogin::has_data_ex() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RspClientLogin::set_has_data_ex() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RspClientLogin::clear_has_data_ex() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RspClientLogin::clear_data_ex() {
  if (data_ex_ != &::google::protobuf::internal::kEmptyString) {
    data_ex_->clear();
  }
  clear_has_data_ex();
}
inline const ::std::string& RspClientLogin::data_ex() const {
  return *data_ex_;
}
inline void RspClientLogin::set_data_ex(const ::std::string& value) {
  set_has_data_ex();
  if (data_ex_ == &::google::protobuf::internal::kEmptyString) {
    data_ex_ = new ::std::string;
  }
  data_ex_->assign(value);
}
inline void RspClientLogin::set_data_ex(const char* value) {
  set_has_data_ex();
  if (data_ex_ == &::google::protobuf::internal::kEmptyString) {
    data_ex_ = new ::std::string;
  }
  data_ex_->assign(value);
}
inline void RspClientLogin::set_data_ex(const char* value, size_t size) {
  set_has_data_ex();
  if (data_ex_ == &::google::protobuf::internal::kEmptyString) {
    data_ex_ = new ::std::string;
  }
  data_ex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_data_ex() {
  set_has_data_ex();
  if (data_ex_ == &::google::protobuf::internal::kEmptyString) {
    data_ex_ = new ::std::string;
  }
  return data_ex_;
}
inline ::std::string* RspClientLogin::release_data_ex() {
  clear_has_data_ex();
  if (data_ex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_ex_;
    data_ex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UserPwdCheck

// optional int32 cmd = 1;
inline bool UserPwdCheck::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPwdCheck::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPwdCheck::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPwdCheck::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 UserPwdCheck::cmd() const {
  return cmd_;
}
inline void UserPwdCheck::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 is_pwdcheck_enabled = 2;
inline bool UserPwdCheck::has_is_pwdcheck_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPwdCheck::set_has_is_pwdcheck_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPwdCheck::clear_has_is_pwdcheck_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPwdCheck::clear_is_pwdcheck_enabled() {
  is_pwdcheck_enabled_ = 0;
  clear_has_is_pwdcheck_enabled();
}
inline ::google::protobuf::int32 UserPwdCheck::is_pwdcheck_enabled() const {
  return is_pwdcheck_enabled_;
}
inline void UserPwdCheck::set_is_pwdcheck_enabled(::google::protobuf::int32 value) {
  set_has_is_pwdcheck_enabled();
  is_pwdcheck_enabled_ = value;
}

// optional int32 remaining_days = 3;
inline bool UserPwdCheck::has_remaining_days() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPwdCheck::set_has_remaining_days() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPwdCheck::clear_has_remaining_days() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPwdCheck::clear_remaining_days() {
  remaining_days_ = 0;
  clear_has_remaining_days();
}
inline ::google::protobuf::int32 UserPwdCheck::remaining_days() const {
  return remaining_days_;
}
inline void UserPwdCheck::set_remaining_days(::google::protobuf::int32 value) {
  set_has_remaining_days();
  remaining_days_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_verify_2fRspClientLogin_2eproto__INCLUDED
