// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "verify/ClientVerify.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* ReqClientLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClientLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChangePassword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChangePassword_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspClientLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspClientLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPwdCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPwdCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqClientInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClientInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspClientInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspClientInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_verify_2fClientVerify_2eproto() {
  protobuf_AddDesc_verify_2fClientVerify_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "verify/ClientVerify.proto");
  GOOGLE_CHECK(file != NULL);
  ReqClientLogin_descriptor_ = file->message_type(0);
  static const int ReqClientLogin_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLogin, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLogin, moudle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLogin, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLogin, user_pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLogin, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLogin, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLogin, module_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLogin, dc_ip_),
  };
  ReqClientLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqClientLogin_descriptor_,
      ReqClientLogin::default_instance_,
      ReqClientLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqClientLogin));
  ReqChangePassword_descriptor_ = file->message_type(1);
  static const int ReqChangePassword_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangePassword, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangePassword, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangePassword, oldpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangePassword, newpwd_),
  };
  ReqChangePassword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChangePassword_descriptor_,
      ReqChangePassword::default_instance_,
      ReqChangePassword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangePassword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangePassword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChangePassword));
  RspClientLogin_descriptor_ = file->message_type(2);
  static const int RspClientLogin_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, authorization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, production_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, trial_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, is_need_sync_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, ui_cs_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, is_omni_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, user_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, user_pwd_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, custom_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, skin_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, update_server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, update_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, copyright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, is_inital_pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, data_ex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, user_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, netid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, version_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, version_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, isforceupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, logupload_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, logreport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, logreportmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, client_ip_),
  };
  RspClientLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspClientLogin_descriptor_,
      RspClientLogin::default_instance_,
      RspClientLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspClientLogin));
  UserPwdCheck_descriptor_ = file->message_type(3);
  static const int UserPwdCheck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPwdCheck, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPwdCheck, is_pwdcheck_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPwdCheck, remaining_days_),
  };
  UserPwdCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPwdCheck_descriptor_,
      UserPwdCheck::default_instance_,
      UserPwdCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPwdCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPwdCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPwdCheck));
  ReqClientInfo_descriptor_ = file->message_type(4);
  static const int ReqClientInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientInfo, userid_),
  };
  ReqClientInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqClientInfo_descriptor_,
      ReqClientInfo::default_instance_,
      ReqClientInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClientInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqClientInfo));
  RspClientInfo_descriptor_ = file->message_type(5);
  static const int RspClientInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientInfo, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientInfo, ismodifypwd_),
  };
  RspClientInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspClientInfo_descriptor_,
      RspClientInfo::default_instance_,
      RspClientInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspClientInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspClientInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_verify_2fClientVerify_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqClientLogin_descriptor_, &ReqClientLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChangePassword_descriptor_, &ReqChangePassword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspClientLogin_descriptor_, &RspClientLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPwdCheck_descriptor_, &UserPwdCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqClientInfo_descriptor_, &ReqClientInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspClientInfo_descriptor_, &RspClientInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_verify_2fClientVerify_2eproto() {
  delete ReqClientLogin::default_instance_;
  delete ReqClientLogin_reflection_;
  delete ReqChangePassword::default_instance_;
  delete ReqChangePassword_reflection_;
  delete RspClientLogin::default_instance_;
  delete RspClientLogin_reflection_;
  delete UserPwdCheck::default_instance_;
  delete UserPwdCheck_reflection_;
  delete ReqClientInfo::default_instance_;
  delete ReqClientInfo_reflection_;
  delete RspClientInfo::default_instance_;
  delete RspClientInfo_reflection_;
}

void protobuf_AddDesc_verify_2fClientVerify_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031verify/ClientVerify.proto\022\010cms_8120\"\227\001"
    "\n\016ReqClientLogin\022\013\n\003cmd\030\001 \001(\005\022\023\n\013moudle_"
    "type\030\002 \001(\005\022\021\n\tuser_name\030\003 \001(\t\022\020\n\010user_pw"
    "d\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\022\013\n\003mac\030\006 \001(\t\022\026\n\016modu"
    "le_version\030\007 \001(\t\022\r\n\005dc_ip\030\010 \001(\t\"P\n\021ReqCh"
    "angePassword\022\013\n\003cmd\030\001 \001(\005\022\016\n\006userId\030\002 \001("
    "\005\022\016\n\006oldPwd\030\003 \001(\t\022\016\n\006newPwd\030\004 \001(\t\"\326\005\n\016Rs"
    "pClientLogin\022\013\n\003cmd\030\001 \001(\005\022\016\n\006result\030\002 \001("
    "\005\022\023\n\013result_info\030\003 \001(\t\022\025\n\rauthorization\030"
    "\004 \001(\005\022\032\n\022production_version\030\005 \001(\t\022\026\n\016tri"
    "al_end_time\030\006 \001(\t\022\017\n\007user_id\030\007 \001(\005\022\017\n\007ro"
    "le_id\030\010 \001(\005\022\031\n\021is_need_sync_time\030\t \001(\005\022\023"
    "\n\013ui_cs_right\030\n \003(\005\022\030\n\020is_omni_operator\030"
    "\013 \001(\005\022\022\n\nuser_level\030\014 \001(\005\022.\n\016user_pwd_ch"
    "eck\030\r \001(\0132\026.cms_8120.UserPwdCheck\022\024\n\014cus"
    "tom_title\030\016 \001(\t\022\026\n\nskin_color\030\017 \001(\005:\002-1\022"
    "\030\n\020update_server_ip\030\020 \001(\t\022\032\n\022update_serv"
    "er_port\030\021 \001(\005\022\017\n\004line\030\022 \001(\005:\0010\022\023\n\010langua"
    "ge\030\023 \001(\005:\0010\022\021\n\tcopyright\030\024 \001(\t\022\025\n\ris_ini"
    "tal_pwd\030\025 \001(\005\022\017\n\007data_ex\030\026 \001(\t\022\017\n\007user_n"
    "o\030\027 \001(\t\022\017\n\007strName\030\030 \001(\t\022\r\n\005netId\030\031 \001(\005\022"
    "\013\n\003net\030\032 \001(\t\022\023\n\013version_url\030\033 \001(\t\022\022\n\nver"
    "sion_no\030\034 \001(\t\022\025\n\risForceUpdate\030\035 \001(\t\022\025\n\r"
    "logUpload_url\030\036 \001(\t\022\021\n\tlogReport\030\037 \001(\005\022\027"
    "\n\017logReportMethod\030  \001(\005\022\021\n\tclient_ip\030! \001"
    "(\t\"P\n\014UserPwdCheck\022\013\n\003cmd\030\001 \001(\005\022\033\n\023is_pw"
    "dcheck_enabled\030\002 \001(\005\022\026\n\016remaining_days\030\003"
    " \001(\005\",\n\rReqClientInfo\022\013\n\003cmd\030\001 \001(\005\022\016\n\006us"
    "erId\030\002 \001(\005\"V\n\rRspClientInfo\022\013\n\003cmd\030\001 \001(\005"
    "\022\016\n\006result\030\002 \001(\005\022\023\n\013result_info\030\003 \001(\t\022\023\n"
    "\013isModifyPwd\030\004 \001(\0052\242\002\n\023ClientVerifyServi"
    "ce\022A\n\013ClientLogin\022\030.cms_8120.ReqClientLo"
    "gin\032\030.cms_8120.RspClientLogin\022@\n\014ClientL"
    "ogout\022\027.cms_8120.ReqClientInfo\032\027.cms_812"
    "0.RspClientInfo\022G\n\016ChangePassword\022\033.cms_"
    "8120.ReqChangePassword\032\030.cms_8120.RspCli"
    "entLogin\022=\n\tWorkState\022\027.cms_8120.ReqClie"
    "ntInfo\032\027.cms_8120.RspClientInfoB@\n(com.h"
    "ikvision.finance.fms.cms.hpp.verifyB\021Cli"
    "entVerifyProto\210\001\001", 1577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "verify/ClientVerify.proto", &protobuf_RegisterTypes);
  ReqClientLogin::default_instance_ = new ReqClientLogin();
  ReqChangePassword::default_instance_ = new ReqChangePassword();
  RspClientLogin::default_instance_ = new RspClientLogin();
  UserPwdCheck::default_instance_ = new UserPwdCheck();
  ReqClientInfo::default_instance_ = new ReqClientInfo();
  RspClientInfo::default_instance_ = new RspClientInfo();
  ReqClientLogin::default_instance_->InitAsDefaultInstance();
  ReqChangePassword::default_instance_->InitAsDefaultInstance();
  RspClientLogin::default_instance_->InitAsDefaultInstance();
  UserPwdCheck::default_instance_->InitAsDefaultInstance();
  ReqClientInfo::default_instance_->InitAsDefaultInstance();
  RspClientInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_verify_2fClientVerify_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_verify_2fClientVerify_2eproto {
  StaticDescriptorInitializer_verify_2fClientVerify_2eproto() {
    protobuf_AddDesc_verify_2fClientVerify_2eproto();
  }
} static_descriptor_initializer_verify_2fClientVerify_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReqClientLogin::kCmdFieldNumber;
const int ReqClientLogin::kMoudleTypeFieldNumber;
const int ReqClientLogin::kUserNameFieldNumber;
const int ReqClientLogin::kUserPwdFieldNumber;
const int ReqClientLogin::kIpFieldNumber;
const int ReqClientLogin::kMacFieldNumber;
const int ReqClientLogin::kModuleVersionFieldNumber;
const int ReqClientLogin::kDcIpFieldNumber;
#endif  // !_MSC_VER

ReqClientLogin::ReqClientLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqClientLogin::InitAsDefaultInstance() {
}

ReqClientLogin::ReqClientLogin(const ReqClientLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqClientLogin::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  moudle_type_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dc_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqClientLogin::~ReqClientLogin() {
  SharedDtor();
}

void ReqClientLogin::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete user_pwd_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (module_version_ != &::google::protobuf::internal::kEmptyString) {
    delete module_version_;
  }
  if (dc_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete dc_ip_;
  }
  if (this != default_instance_) {
  }
}

void ReqClientLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClientLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClientLogin_descriptor_;
}

const ReqClientLogin& ReqClientLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_verify_2fClientVerify_2eproto();  return *default_instance_;
}

ReqClientLogin* ReqClientLogin::default_instance_ = NULL;

ReqClientLogin* ReqClientLogin::New() const {
  return new ReqClientLogin;
}

void ReqClientLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    moudle_type_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_user_pwd()) {
      if (user_pwd_ != &::google::protobuf::internal::kEmptyString) {
        user_pwd_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
    if (has_module_version()) {
      if (module_version_ != &::google::protobuf::internal::kEmptyString) {
        module_version_->clear();
      }
    }
    if (has_dc_ip()) {
      if (dc_ip_ != &::google::protobuf::internal::kEmptyString) {
        dc_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqClientLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moudle_type;
        break;
      }
      
      // optional int32 moudle_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moudle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moudle_type_)));
          set_has_moudle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_pwd;
        break;
      }
      
      // optional string user_pwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_pwd().data(), this->user_pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mac;
        break;
      }
      
      // optional string mac = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_module_version;
        break;
      }
      
      // optional string module_version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_version().data(), this->module_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_dc_ip;
        break;
      }
      
      // optional string dc_ip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dc_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dc_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dc_ip().data(), this->dc_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqClientLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 moudle_type = 2;
  if (has_moudle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->moudle_type(), output);
  }
  
  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }
  
  // optional string user_pwd = 4;
  if (has_user_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_pwd().data(), this->user_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_pwd(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string mac = 6;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mac(), output);
  }
  
  // optional string module_version = 7;
  if (has_module_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_version().data(), this->module_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->module_version(), output);
  }
  
  // optional string dc_ip = 8;
  if (has_dc_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dc_ip().data(), this->dc_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->dc_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqClientLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 moudle_type = 2;
  if (has_moudle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->moudle_type(), target);
  }
  
  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }
  
  // optional string user_pwd = 4;
  if (has_user_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_pwd().data(), this->user_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_pwd(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string mac = 6;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mac(), target);
  }
  
  // optional string module_version = 7;
  if (has_module_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_version().data(), this->module_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->module_version(), target);
  }
  
  // optional string dc_ip = 8;
  if (has_dc_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dc_ip().data(), this->dc_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->dc_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqClientLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 moudle_type = 2;
    if (has_moudle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moudle_type());
    }
    
    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // optional string user_pwd = 4;
    if (has_user_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_pwd());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string mac = 6;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }
    
    // optional string module_version = 7;
    if (has_module_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_version());
    }
    
    // optional string dc_ip = 8;
    if (has_dc_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dc_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClientLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqClientLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqClientLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqClientLogin::MergeFrom(const ReqClientLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_moudle_type()) {
      set_moudle_type(from.moudle_type());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_user_pwd()) {
      set_user_pwd(from.user_pwd());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_module_version()) {
      set_module_version(from.module_version());
    }
    if (from.has_dc_ip()) {
      set_dc_ip(from.dc_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqClientLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClientLogin::CopyFrom(const ReqClientLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClientLogin::IsInitialized() const {
  
  return true;
}

void ReqClientLogin::Swap(ReqClientLogin* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(moudle_type_, other->moudle_type_);
    std::swap(user_name_, other->user_name_);
    std::swap(user_pwd_, other->user_pwd_);
    std::swap(ip_, other->ip_);
    std::swap(mac_, other->mac_);
    std::swap(module_version_, other->module_version_);
    std::swap(dc_ip_, other->dc_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqClientLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClientLogin_descriptor_;
  metadata.reflection = ReqClientLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChangePassword::kCmdFieldNumber;
const int ReqChangePassword::kUserIdFieldNumber;
const int ReqChangePassword::kOldPwdFieldNumber;
const int ReqChangePassword::kNewPwdFieldNumber;
#endif  // !_MSC_VER

ReqChangePassword::ReqChangePassword()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChangePassword::InitAsDefaultInstance() {
}

ReqChangePassword::ReqChangePassword(const ReqChangePassword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChangePassword::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  userid_ = 0;
  oldpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChangePassword::~ReqChangePassword() {
  SharedDtor();
}

void ReqChangePassword::SharedDtor() {
  if (oldpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete oldpwd_;
  }
  if (newpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete newpwd_;
  }
  if (this != default_instance_) {
  }
}

void ReqChangePassword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChangePassword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChangePassword_descriptor_;
}

const ReqChangePassword& ReqChangePassword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_verify_2fClientVerify_2eproto();  return *default_instance_;
}

ReqChangePassword* ReqChangePassword::default_instance_ = NULL;

ReqChangePassword* ReqChangePassword::New() const {
  return new ReqChangePassword;
}

void ReqChangePassword::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    userid_ = 0;
    if (has_oldpwd()) {
      if (oldpwd_ != &::google::protobuf::internal::kEmptyString) {
        oldpwd_->clear();
      }
    }
    if (has_newpwd()) {
      if (newpwd_ != &::google::protobuf::internal::kEmptyString) {
        newpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChangePassword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }
      
      // optional int32 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_oldPwd;
        break;
      }
      
      // optional string oldPwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldpwd().data(), this->oldpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_newPwd;
        break;
      }
      
      // optional string newPwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newpwd().data(), this->newpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChangePassword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional string oldPwd = 3;
  if (has_oldpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldpwd().data(), this->oldpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->oldpwd(), output);
  }
  
  // optional string newPwd = 4;
  if (has_newpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newpwd().data(), this->newpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->newpwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChangePassword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional string oldPwd = 3;
  if (has_oldpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldpwd().data(), this->oldpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->oldpwd(), target);
  }
  
  // optional string newPwd = 4;
  if (has_newpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newpwd().data(), this->newpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->newpwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChangePassword::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional string oldPwd = 3;
    if (has_oldpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldpwd());
    }
    
    // optional string newPwd = 4;
    if (has_newpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newpwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChangePassword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChangePassword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChangePassword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChangePassword::MergeFrom(const ReqChangePassword& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_oldpwd()) {
      set_oldpwd(from.oldpwd());
    }
    if (from.has_newpwd()) {
      set_newpwd(from.newpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChangePassword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChangePassword::CopyFrom(const ReqChangePassword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChangePassword::IsInitialized() const {
  
  return true;
}

void ReqChangePassword::Swap(ReqChangePassword* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(userid_, other->userid_);
    std::swap(oldpwd_, other->oldpwd_);
    std::swap(newpwd_, other->newpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChangePassword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChangePassword_descriptor_;
  metadata.reflection = ReqChangePassword_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspClientLogin::kCmdFieldNumber;
const int RspClientLogin::kResultFieldNumber;
const int RspClientLogin::kResultInfoFieldNumber;
const int RspClientLogin::kAuthorizationFieldNumber;
const int RspClientLogin::kProductionVersionFieldNumber;
const int RspClientLogin::kTrialEndTimeFieldNumber;
const int RspClientLogin::kUserIdFieldNumber;
const int RspClientLogin::kRoleIdFieldNumber;
const int RspClientLogin::kIsNeedSyncTimeFieldNumber;
const int RspClientLogin::kUiCsRightFieldNumber;
const int RspClientLogin::kIsOmniOperatorFieldNumber;
const int RspClientLogin::kUserLevelFieldNumber;
const int RspClientLogin::kUserPwdCheckFieldNumber;
const int RspClientLogin::kCustomTitleFieldNumber;
const int RspClientLogin::kSkinColorFieldNumber;
const int RspClientLogin::kUpdateServerIpFieldNumber;
const int RspClientLogin::kUpdateServerPortFieldNumber;
const int RspClientLogin::kLineFieldNumber;
const int RspClientLogin::kLanguageFieldNumber;
const int RspClientLogin::kCopyrightFieldNumber;
const int RspClientLogin::kIsInitalPwdFieldNumber;
const int RspClientLogin::kDataExFieldNumber;
const int RspClientLogin::kUserNoFieldNumber;
const int RspClientLogin::kStrNameFieldNumber;
const int RspClientLogin::kNetIdFieldNumber;
const int RspClientLogin::kNetFieldNumber;
const int RspClientLogin::kVersionUrlFieldNumber;
const int RspClientLogin::kVersionNoFieldNumber;
const int RspClientLogin::kIsForceUpdateFieldNumber;
const int RspClientLogin::kLogUploadUrlFieldNumber;
const int RspClientLogin::kLogReportFieldNumber;
const int RspClientLogin::kLogReportMethodFieldNumber;
const int RspClientLogin::kClientIpFieldNumber;
#endif  // !_MSC_VER

RspClientLogin::RspClientLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspClientLogin::InitAsDefaultInstance() {
  user_pwd_check_ = const_cast< ::cms_8120::UserPwdCheck*>(&::cms_8120::UserPwdCheck::default_instance());
}

RspClientLogin::RspClientLogin(const RspClientLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspClientLogin::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  result_ = 0;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authorization_ = 0;
  production_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trial_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = 0;
  role_id_ = 0;
  is_need_sync_time_ = 0;
  is_omni_operator_ = 0;
  user_level_ = 0;
  user_pwd_check_ = NULL;
  custom_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skin_color_ = -1;
  update_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_server_port_ = 0;
  line_ = 0;
  language_ = 0;
  copyright_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_inital_pwd_ = 0;
  data_ex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  netid_ = 0;
  net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isforceupdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logupload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logreport_ = 0;
  logreportmethod_ = 0;
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspClientLogin::~RspClientLogin() {
  SharedDtor();
}

void RspClientLogin::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (production_version_ != &::google::protobuf::internal::kEmptyString) {
    delete production_version_;
  }
  if (trial_end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete trial_end_time_;
  }
  if (custom_title_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_title_;
  }
  if (update_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete update_server_ip_;
  }
  if (copyright_ != &::google::protobuf::internal::kEmptyString) {
    delete copyright_;
  }
  if (data_ex_ != &::google::protobuf::internal::kEmptyString) {
    delete data_ex_;
  }
  if (user_no_ != &::google::protobuf::internal::kEmptyString) {
    delete user_no_;
  }
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (net_ != &::google::protobuf::internal::kEmptyString) {
    delete net_;
  }
  if (version_url_ != &::google::protobuf::internal::kEmptyString) {
    delete version_url_;
  }
  if (version_no_ != &::google::protobuf::internal::kEmptyString) {
    delete version_no_;
  }
  if (isforceupdate_ != &::google::protobuf::internal::kEmptyString) {
    delete isforceupdate_;
  }
  if (logupload_url_ != &::google::protobuf::internal::kEmptyString) {
    delete logupload_url_;
  }
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (this != default_instance_) {
    delete user_pwd_check_;
  }
}

void RspClientLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspClientLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspClientLogin_descriptor_;
}

const RspClientLogin& RspClientLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_verify_2fClientVerify_2eproto();  return *default_instance_;
}

RspClientLogin* RspClientLogin::default_instance_ = NULL;

RspClientLogin* RspClientLogin::New() const {
  return new RspClientLogin;
}

void RspClientLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    result_ = 0;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
    authorization_ = 0;
    if (has_production_version()) {
      if (production_version_ != &::google::protobuf::internal::kEmptyString) {
        production_version_->clear();
      }
    }
    if (has_trial_end_time()) {
      if (trial_end_time_ != &::google::protobuf::internal::kEmptyString) {
        trial_end_time_->clear();
      }
    }
    user_id_ = 0;
    role_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_need_sync_time_ = 0;
    is_omni_operator_ = 0;
    user_level_ = 0;
    if (has_user_pwd_check()) {
      if (user_pwd_check_ != NULL) user_pwd_check_->::cms_8120::UserPwdCheck::Clear();
    }
    if (has_custom_title()) {
      if (custom_title_ != &::google::protobuf::internal::kEmptyString) {
        custom_title_->clear();
      }
    }
    skin_color_ = -1;
    if (has_update_server_ip()) {
      if (update_server_ip_ != &::google::protobuf::internal::kEmptyString) {
        update_server_ip_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    update_server_port_ = 0;
    line_ = 0;
    language_ = 0;
    if (has_copyright()) {
      if (copyright_ != &::google::protobuf::internal::kEmptyString) {
        copyright_->clear();
      }
    }
    is_inital_pwd_ = 0;
    if (has_data_ex()) {
      if (data_ex_ != &::google::protobuf::internal::kEmptyString) {
        data_ex_->clear();
      }
    }
    if (has_user_no()) {
      if (user_no_ != &::google::protobuf::internal::kEmptyString) {
        user_no_->clear();
      }
    }
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    netid_ = 0;
    if (has_net()) {
      if (net_ != &::google::protobuf::internal::kEmptyString) {
        net_->clear();
      }
    }
    if (has_version_url()) {
      if (version_url_ != &::google::protobuf::internal::kEmptyString) {
        version_url_->clear();
      }
    }
    if (has_version_no()) {
      if (version_no_ != &::google::protobuf::internal::kEmptyString) {
        version_no_->clear();
      }
    }
    if (has_isforceupdate()) {
      if (isforceupdate_ != &::google::protobuf::internal::kEmptyString) {
        isforceupdate_->clear();
      }
    }
    if (has_logupload_url()) {
      if (logupload_url_ != &::google::protobuf::internal::kEmptyString) {
        logupload_url_->clear();
      }
    }
    logreport_ = 0;
    logreportmethod_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
  }
  ui_cs_right_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspClientLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }
      
      // optional string result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_authorization;
        break;
      }
      
      // optional int32 authorization = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_authorization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &authorization_)));
          set_has_authorization();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_production_version;
        break;
      }
      
      // optional string production_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_production_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_production_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->production_version().data(), this->production_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_trial_end_time;
        break;
      }
      
      // optional string trial_end_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trial_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trial_end_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trial_end_time().data(), this->trial_end_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_need_sync_time;
        break;
      }
      
      // optional int32 is_need_sync_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_need_sync_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_need_sync_time_)));
          set_has_is_need_sync_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ui_cs_right;
        break;
      }
      
      // repeated int32 ui_cs_right = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ui_cs_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_ui_cs_right())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ui_cs_right())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ui_cs_right;
        if (input->ExpectTag(88)) goto parse_is_omni_operator;
        break;
      }
      
      // optional int32 is_omni_operator = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_omni_operator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_omni_operator_)));
          set_has_is_omni_operator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_user_level;
        break;
      }
      
      // optional int32 user_level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_level_)));
          set_has_user_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_user_pwd_check;
        break;
      }
      
      // optional .cms_8120.UserPwdCheck user_pwd_check = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_pwd_check:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_pwd_check()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_custom_title;
        break;
      }
      
      // optional string custom_title = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_title().data(), this->custom_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_skin_color;
        break;
      }
      
      // optional int32 skin_color = 15 [default = -1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skin_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skin_color_)));
          set_has_skin_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_update_server_ip;
        break;
      }
      
      // optional string update_server_ip = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_server_ip().data(), this->update_server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_update_server_port;
        break;
      }
      
      // optional int32 update_server_port = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_server_port_)));
          set_has_update_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_line;
        break;
      }
      
      // optional int32 line = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_language;
        break;
      }
      
      // optional int32 language = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_copyright;
        break;
      }
      
      // optional string copyright = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copyright:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_copyright()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->copyright().data(), this->copyright().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_is_inital_pwd;
        break;
      }
      
      // optional int32 is_inital_pwd = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_inital_pwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_inital_pwd_)));
          set_has_is_inital_pwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_data_ex;
        break;
      }
      
      // optional string data_ex = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_ex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_ex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_ex().data(), this->data_ex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_user_no;
        break;
      }
      
      // optional string user_no = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_no().data(), this->user_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_strName;
        break;
      }
      
      // optional string strName = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_netId;
        break;
      }
      
      // optional int32 netId = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netid_)));
          set_has_netid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_net;
        break;
      }
      
      // optional string net = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->net().data(), this->net().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_version_url;
        break;
      }
      
      // optional string version_url = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version_url().data(), this->version_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_version_no;
        break;
      }
      
      // optional string version_no = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version_no().data(), this->version_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_isForceUpdate;
        break;
      }
      
      // optional string isForceUpdate = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isForceUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isforceupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isforceupdate().data(), this->isforceupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_logUpload_url;
        break;
      }
      
      // optional string logUpload_url = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logUpload_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logupload_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logupload_url().data(), this->logupload_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_logReport;
        break;
      }
      
      // optional int32 logReport = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logReport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logreport_)));
          set_has_logreport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_logReportMethod;
        break;
      }
      
      // optional int32 logReportMethod = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logReportMethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logreportmethod_)));
          set_has_logreportmethod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_client_ip;
        break;
      }
      
      // optional string client_ip = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspClientLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result_info(), output);
  }
  
  // optional int32 authorization = 4;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->authorization(), output);
  }
  
  // optional string production_version = 5;
  if (has_production_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->production_version().data(), this->production_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->production_version(), output);
  }
  
  // optional string trial_end_time = 6;
  if (has_trial_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trial_end_time().data(), this->trial_end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->trial_end_time(), output);
  }
  
  // optional int32 user_id = 7;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->user_id(), output);
  }
  
  // optional int32 role_id = 8;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->role_id(), output);
  }
  
  // optional int32 is_need_sync_time = 9;
  if (has_is_need_sync_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->is_need_sync_time(), output);
  }
  
  // repeated int32 ui_cs_right = 10;
  for (int i = 0; i < this->ui_cs_right_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->ui_cs_right(i), output);
  }
  
  // optional int32 is_omni_operator = 11;
  if (has_is_omni_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->is_omni_operator(), output);
  }
  
  // optional int32 user_level = 12;
  if (has_user_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->user_level(), output);
  }
  
  // optional .cms_8120.UserPwdCheck user_pwd_check = 13;
  if (has_user_pwd_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->user_pwd_check(), output);
  }
  
  // optional string custom_title = 14;
  if (has_custom_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_title().data(), this->custom_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->custom_title(), output);
  }
  
  // optional int32 skin_color = 15 [default = -1];
  if (has_skin_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->skin_color(), output);
  }
  
  // optional string update_server_ip = 16;
  if (has_update_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_server_ip().data(), this->update_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->update_server_ip(), output);
  }
  
  // optional int32 update_server_port = 17;
  if (has_update_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->update_server_port(), output);
  }
  
  // optional int32 line = 18 [default = 0];
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->line(), output);
  }
  
  // optional int32 language = 19 [default = 0];
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->language(), output);
  }
  
  // optional string copyright = 20;
  if (has_copyright()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->copyright().data(), this->copyright().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->copyright(), output);
  }
  
  // optional int32 is_inital_pwd = 21;
  if (has_is_inital_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->is_inital_pwd(), output);
  }
  
  // optional string data_ex = 22;
  if (has_data_ex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_ex().data(), this->data_ex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->data_ex(), output);
  }
  
  // optional string user_no = 23;
  if (has_user_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_no().data(), this->user_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->user_no(), output);
  }
  
  // optional string strName = 24;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->strname(), output);
  }
  
  // optional int32 netId = 25;
  if (has_netid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->netid(), output);
  }
  
  // optional string net = 26;
  if (has_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->net(), output);
  }
  
  // optional string version_url = 27;
  if (has_version_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version_url().data(), this->version_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->version_url(), output);
  }
  
  // optional string version_no = 28;
  if (has_version_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version_no().data(), this->version_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->version_no(), output);
  }
  
  // optional string isForceUpdate = 29;
  if (has_isforceupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isforceupdate().data(), this->isforceupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->isforceupdate(), output);
  }
  
  // optional string logUpload_url = 30;
  if (has_logupload_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logupload_url().data(), this->logupload_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->logupload_url(), output);
  }
  
  // optional int32 logReport = 31;
  if (has_logreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->logreport(), output);
  }
  
  // optional int32 logReportMethod = 32;
  if (has_logreportmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->logreportmethod(), output);
  }
  
  // optional string client_ip = 33;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->client_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspClientLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_info(), target);
  }
  
  // optional int32 authorization = 4;
  if (has_authorization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->authorization(), target);
  }
  
  // optional string production_version = 5;
  if (has_production_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->production_version().data(), this->production_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->production_version(), target);
  }
  
  // optional string trial_end_time = 6;
  if (has_trial_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trial_end_time().data(), this->trial_end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->trial_end_time(), target);
  }
  
  // optional int32 user_id = 7;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->user_id(), target);
  }
  
  // optional int32 role_id = 8;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->role_id(), target);
  }
  
  // optional int32 is_need_sync_time = 9;
  if (has_is_need_sync_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->is_need_sync_time(), target);
  }
  
  // repeated int32 ui_cs_right = 10;
  for (int i = 0; i < this->ui_cs_right_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->ui_cs_right(i), target);
  }
  
  // optional int32 is_omni_operator = 11;
  if (has_is_omni_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->is_omni_operator(), target);
  }
  
  // optional int32 user_level = 12;
  if (has_user_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->user_level(), target);
  }
  
  // optional .cms_8120.UserPwdCheck user_pwd_check = 13;
  if (has_user_pwd_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->user_pwd_check(), target);
  }
  
  // optional string custom_title = 14;
  if (has_custom_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_title().data(), this->custom_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->custom_title(), target);
  }
  
  // optional int32 skin_color = 15 [default = -1];
  if (has_skin_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->skin_color(), target);
  }
  
  // optional string update_server_ip = 16;
  if (has_update_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_server_ip().data(), this->update_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->update_server_ip(), target);
  }
  
  // optional int32 update_server_port = 17;
  if (has_update_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->update_server_port(), target);
  }
  
  // optional int32 line = 18 [default = 0];
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->line(), target);
  }
  
  // optional int32 language = 19 [default = 0];
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->language(), target);
  }
  
  // optional string copyright = 20;
  if (has_copyright()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->copyright().data(), this->copyright().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->copyright(), target);
  }
  
  // optional int32 is_inital_pwd = 21;
  if (has_is_inital_pwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->is_inital_pwd(), target);
  }
  
  // optional string data_ex = 22;
  if (has_data_ex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_ex().data(), this->data_ex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->data_ex(), target);
  }
  
  // optional string user_no = 23;
  if (has_user_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_no().data(), this->user_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->user_no(), target);
  }
  
  // optional string strName = 24;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->strname(), target);
  }
  
  // optional int32 netId = 25;
  if (has_netid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->netid(), target);
  }
  
  // optional string net = 26;
  if (has_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->net(), target);
  }
  
  // optional string version_url = 27;
  if (has_version_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version_url().data(), this->version_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->version_url(), target);
  }
  
  // optional string version_no = 28;
  if (has_version_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version_no().data(), this->version_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->version_no(), target);
  }
  
  // optional string isForceUpdate = 29;
  if (has_isforceupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isforceupdate().data(), this->isforceupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->isforceupdate(), target);
  }
  
  // optional string logUpload_url = 30;
  if (has_logupload_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logupload_url().data(), this->logupload_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->logupload_url(), target);
  }
  
  // optional int32 logReport = 31;
  if (has_logreport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->logreport(), target);
  }
  
  // optional int32 logReportMethod = 32;
  if (has_logreportmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->logreportmethod(), target);
  }
  
  // optional string client_ip = 33;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->client_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspClientLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }
    
    // optional int32 authorization = 4;
    if (has_authorization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->authorization());
    }
    
    // optional string production_version = 5;
    if (has_production_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->production_version());
    }
    
    // optional string trial_end_time = 6;
    if (has_trial_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trial_end_time());
    }
    
    // optional int32 user_id = 7;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional int32 role_id = 8;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 is_need_sync_time = 9;
    if (has_is_need_sync_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_need_sync_time());
    }
    
    // optional int32 is_omni_operator = 11;
    if (has_is_omni_operator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_omni_operator());
    }
    
    // optional int32 user_level = 12;
    if (has_user_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_level());
    }
    
    // optional .cms_8120.UserPwdCheck user_pwd_check = 13;
    if (has_user_pwd_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_pwd_check());
    }
    
    // optional string custom_title = 14;
    if (has_custom_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_title());
    }
    
    // optional int32 skin_color = 15 [default = -1];
    if (has_skin_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skin_color());
    }
    
    // optional string update_server_ip = 16;
    if (has_update_server_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_server_ip());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 update_server_port = 17;
    if (has_update_server_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_server_port());
    }
    
    // optional int32 line = 18 [default = 0];
    if (has_line()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }
    
    // optional int32 language = 19 [default = 0];
    if (has_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }
    
    // optional string copyright = 20;
    if (has_copyright()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->copyright());
    }
    
    // optional int32 is_inital_pwd = 21;
    if (has_is_inital_pwd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_inital_pwd());
    }
    
    // optional string data_ex = 22;
    if (has_data_ex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_ex());
    }
    
    // optional string user_no = 23;
    if (has_user_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_no());
    }
    
    // optional string strName = 24;
    if (has_strname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 netId = 25;
    if (has_netid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netid());
    }
    
    // optional string net = 26;
    if (has_net()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net());
    }
    
    // optional string version_url = 27;
    if (has_version_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version_url());
    }
    
    // optional string version_no = 28;
    if (has_version_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version_no());
    }
    
    // optional string isForceUpdate = 29;
    if (has_isforceupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isforceupdate());
    }
    
    // optional string logUpload_url = 30;
    if (has_logupload_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logupload_url());
    }
    
    // optional int32 logReport = 31;
    if (has_logreport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logreport());
    }
    
    // optional int32 logReportMethod = 32;
    if (has_logreportmethod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logreportmethod());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string client_ip = 33;
    if (has_client_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }
    
  }
  // repeated int32 ui_cs_right = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->ui_cs_right_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ui_cs_right(i));
    }
    total_size += 1 * this->ui_cs_right_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspClientLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspClientLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspClientLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspClientLogin::MergeFrom(const RspClientLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  ui_cs_right_.MergeFrom(from.ui_cs_right_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
    if (from.has_authorization()) {
      set_authorization(from.authorization());
    }
    if (from.has_production_version()) {
      set_production_version(from.production_version());
    }
    if (from.has_trial_end_time()) {
      set_trial_end_time(from.trial_end_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_need_sync_time()) {
      set_is_need_sync_time(from.is_need_sync_time());
    }
    if (from.has_is_omni_operator()) {
      set_is_omni_operator(from.is_omni_operator());
    }
    if (from.has_user_level()) {
      set_user_level(from.user_level());
    }
    if (from.has_user_pwd_check()) {
      mutable_user_pwd_check()->::cms_8120::UserPwdCheck::MergeFrom(from.user_pwd_check());
    }
    if (from.has_custom_title()) {
      set_custom_title(from.custom_title());
    }
    if (from.has_skin_color()) {
      set_skin_color(from.skin_color());
    }
    if (from.has_update_server_ip()) {
      set_update_server_ip(from.update_server_ip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_update_server_port()) {
      set_update_server_port(from.update_server_port());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_copyright()) {
      set_copyright(from.copyright());
    }
    if (from.has_is_inital_pwd()) {
      set_is_inital_pwd(from.is_inital_pwd());
    }
    if (from.has_data_ex()) {
      set_data_ex(from.data_ex());
    }
    if (from.has_user_no()) {
      set_user_no(from.user_no());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_netid()) {
      set_netid(from.netid());
    }
    if (from.has_net()) {
      set_net(from.net());
    }
    if (from.has_version_url()) {
      set_version_url(from.version_url());
    }
    if (from.has_version_no()) {
      set_version_no(from.version_no());
    }
    if (from.has_isforceupdate()) {
      set_isforceupdate(from.isforceupdate());
    }
    if (from.has_logupload_url()) {
      set_logupload_url(from.logupload_url());
    }
    if (from.has_logreport()) {
      set_logreport(from.logreport());
    }
    if (from.has_logreportmethod()) {
      set_logreportmethod(from.logreportmethod());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspClientLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspClientLogin::CopyFrom(const RspClientLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspClientLogin::IsInitialized() const {
  
  return true;
}

void RspClientLogin::Swap(RspClientLogin* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(result_, other->result_);
    std::swap(result_info_, other->result_info_);
    std::swap(authorization_, other->authorization_);
    std::swap(production_version_, other->production_version_);
    std::swap(trial_end_time_, other->trial_end_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(is_need_sync_time_, other->is_need_sync_time_);
    ui_cs_right_.Swap(&other->ui_cs_right_);
    std::swap(is_omni_operator_, other->is_omni_operator_);
    std::swap(user_level_, other->user_level_);
    std::swap(user_pwd_check_, other->user_pwd_check_);
    std::swap(custom_title_, other->custom_title_);
    std::swap(skin_color_, other->skin_color_);
    std::swap(update_server_ip_, other->update_server_ip_);
    std::swap(update_server_port_, other->update_server_port_);
    std::swap(line_, other->line_);
    std::swap(language_, other->language_);
    std::swap(copyright_, other->copyright_);
    std::swap(is_inital_pwd_, other->is_inital_pwd_);
    std::swap(data_ex_, other->data_ex_);
    std::swap(user_no_, other->user_no_);
    std::swap(strname_, other->strname_);
    std::swap(netid_, other->netid_);
    std::swap(net_, other->net_);
    std::swap(version_url_, other->version_url_);
    std::swap(version_no_, other->version_no_);
    std::swap(isforceupdate_, other->isforceupdate_);
    std::swap(logupload_url_, other->logupload_url_);
    std::swap(logreport_, other->logreport_);
    std::swap(logreportmethod_, other->logreportmethod_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspClientLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspClientLogin_descriptor_;
  metadata.reflection = RspClientLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserPwdCheck::kCmdFieldNumber;
const int UserPwdCheck::kIsPwdcheckEnabledFieldNumber;
const int UserPwdCheck::kRemainingDaysFieldNumber;
#endif  // !_MSC_VER

UserPwdCheck::UserPwdCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserPwdCheck::InitAsDefaultInstance() {
}

UserPwdCheck::UserPwdCheck(const UserPwdCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserPwdCheck::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  is_pwdcheck_enabled_ = 0;
  remaining_days_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPwdCheck::~UserPwdCheck() {
  SharedDtor();
}

void UserPwdCheck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserPwdCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPwdCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPwdCheck_descriptor_;
}

const UserPwdCheck& UserPwdCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_verify_2fClientVerify_2eproto();  return *default_instance_;
}

UserPwdCheck* UserPwdCheck::default_instance_ = NULL;

UserPwdCheck* UserPwdCheck::New() const {
  return new UserPwdCheck;
}

void UserPwdCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    is_pwdcheck_enabled_ = 0;
    remaining_days_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPwdCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_pwdcheck_enabled;
        break;
      }
      
      // optional int32 is_pwdcheck_enabled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_pwdcheck_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_pwdcheck_enabled_)));
          set_has_is_pwdcheck_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remaining_days;
        break;
      }
      
      // optional int32 remaining_days = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remaining_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_days_)));
          set_has_remaining_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserPwdCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 is_pwdcheck_enabled = 2;
  if (has_is_pwdcheck_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_pwdcheck_enabled(), output);
  }
  
  // optional int32 remaining_days = 3;
  if (has_remaining_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remaining_days(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserPwdCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 is_pwdcheck_enabled = 2;
  if (has_is_pwdcheck_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_pwdcheck_enabled(), target);
  }
  
  // optional int32 remaining_days = 3;
  if (has_remaining_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remaining_days(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserPwdCheck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 is_pwdcheck_enabled = 2;
    if (has_is_pwdcheck_enabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_pwdcheck_enabled());
    }
    
    // optional int32 remaining_days = 3;
    if (has_remaining_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaining_days());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPwdCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPwdCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPwdCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPwdCheck::MergeFrom(const UserPwdCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_is_pwdcheck_enabled()) {
      set_is_pwdcheck_enabled(from.is_pwdcheck_enabled());
    }
    if (from.has_remaining_days()) {
      set_remaining_days(from.remaining_days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPwdCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPwdCheck::CopyFrom(const UserPwdCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPwdCheck::IsInitialized() const {
  
  return true;
}

void UserPwdCheck::Swap(UserPwdCheck* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(is_pwdcheck_enabled_, other->is_pwdcheck_enabled_);
    std::swap(remaining_days_, other->remaining_days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPwdCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPwdCheck_descriptor_;
  metadata.reflection = UserPwdCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqClientInfo::kCmdFieldNumber;
const int ReqClientInfo::kUserIdFieldNumber;
#endif  // !_MSC_VER

ReqClientInfo::ReqClientInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqClientInfo::InitAsDefaultInstance() {
}

ReqClientInfo::ReqClientInfo(const ReqClientInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqClientInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqClientInfo::~ReqClientInfo() {
  SharedDtor();
}

void ReqClientInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClientInfo_descriptor_;
}

const ReqClientInfo& ReqClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_verify_2fClientVerify_2eproto();  return *default_instance_;
}

ReqClientInfo* ReqClientInfo::default_instance_ = NULL;

ReqClientInfo* ReqClientInfo::New() const {
  return new ReqClientInfo;
}

void ReqClientInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }
      
      // optional int32 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqClientInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqClientInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqClientInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqClientInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqClientInfo::MergeFrom(const ReqClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClientInfo::CopyFrom(const ReqClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClientInfo::IsInitialized() const {
  
  return true;
}

void ReqClientInfo::Swap(ReqClientInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqClientInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClientInfo_descriptor_;
  metadata.reflection = ReqClientInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspClientInfo::kCmdFieldNumber;
const int RspClientInfo::kResultFieldNumber;
const int RspClientInfo::kResultInfoFieldNumber;
const int RspClientInfo::kIsModifyPwdFieldNumber;
#endif  // !_MSC_VER

RspClientInfo::RspClientInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspClientInfo::InitAsDefaultInstance() {
}

RspClientInfo::RspClientInfo(const RspClientInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspClientInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  result_ = 0;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ismodifypwd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspClientInfo::~RspClientInfo() {
  SharedDtor();
}

void RspClientInfo::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (this != default_instance_) {
  }
}

void RspClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspClientInfo_descriptor_;
}

const RspClientInfo& RspClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_verify_2fClientVerify_2eproto();  return *default_instance_;
}

RspClientInfo* RspClientInfo::default_instance_ = NULL;

RspClientInfo* RspClientInfo::New() const {
  return new RspClientInfo;
}

void RspClientInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    result_ = 0;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
    ismodifypwd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }
      
      // optional string result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isModifyPwd;
        break;
      }
      
      // optional int32 isModifyPwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isModifyPwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ismodifypwd_)));
          set_has_ismodifypwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result_info(), output);
  }
  
  // optional int32 isModifyPwd = 4;
  if (has_ismodifypwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ismodifypwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspClientInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_info(), target);
  }
  
  // optional int32 isModifyPwd = 4;
  if (has_ismodifypwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ismodifypwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspClientInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }
    
    // optional int32 isModifyPwd = 4;
    if (has_ismodifypwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ismodifypwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspClientInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspClientInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspClientInfo::MergeFrom(const RspClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
    if (from.has_ismodifypwd()) {
      set_ismodifypwd(from.ismodifypwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspClientInfo::CopyFrom(const RspClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspClientInfo::IsInitialized() const {
  
  return true;
}

void RspClientInfo::Swap(RspClientInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(result_, other->result_);
    std::swap(result_info_, other->result_info_);
    std::swap(ismodifypwd_, other->ismodifypwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspClientInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspClientInfo_descriptor_;
  metadata.reflection = RspClientInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
