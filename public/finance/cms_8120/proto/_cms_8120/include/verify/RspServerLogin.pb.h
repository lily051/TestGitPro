// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: verify/RspServerLogin.proto

#ifndef PROTOBUF_verify_2fRspServerLogin_2eproto__INCLUDED
#define PROTOBUF_verify_2fRspServerLogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "type/cmd.pb.h"
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_verify_2fRspServerLogin_2eproto();
void protobuf_AssignDesc_verify_2fRspServerLogin_2eproto();
void protobuf_ShutdownFile_verify_2fRspServerLogin_2eproto();

class RspServerLogin;

// ===================================================================

class RspServerLogin : public ::google::protobuf::Message {
 public:
  RspServerLogin();
  virtual ~RspServerLogin();
  
  RspServerLogin(const RspServerLogin& from);
  
  inline RspServerLogin& operator=(const RspServerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspServerLogin& default_instance();
  
  void Swap(RspServerLogin* other);
  
  // implements Message ----------------------------------------------
  
  RspServerLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspServerLogin& from);
  void MergeFrom(const RspServerLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string result_info = 3;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 3;
  inline const ::std::string& result_info() const;
  inline void set_result_info(const ::std::string& value);
  inline void set_result_info(const char* value);
  inline void set_result_info(const char* value, size_t size);
  inline ::std::string* mutable_result_info();
  inline ::std::string* release_result_info();
  
  // optional int32 authorization = 4;
  inline bool has_authorization() const;
  inline void clear_authorization();
  static const int kAuthorizationFieldNumber = 4;
  inline ::google::protobuf::int32 authorization() const;
  inline void set_authorization(::google::protobuf::int32 value);
  
  // optional string production_version = 5;
  inline bool has_production_version() const;
  inline void clear_production_version();
  static const int kProductionVersionFieldNumber = 5;
  inline const ::std::string& production_version() const;
  inline void set_production_version(const ::std::string& value);
  inline void set_production_version(const char* value);
  inline void set_production_version(const char* value, size_t size);
  inline ::std::string* mutable_production_version();
  inline ::std::string* release_production_version();
  
  // optional int32 data_port = 6;
  inline bool has_data_port() const;
  inline void clear_data_port();
  static const int kDataPortFieldNumber = 6;
  inline ::google::protobuf::int32 data_port() const;
  inline void set_data_port(::google::protobuf::int32 value);
  
  // optional int32 ctrl_port = 7;
  inline bool has_ctrl_port() const;
  inline void clear_ctrl_port();
  static const int kCtrlPortFieldNumber = 7;
  inline ::google::protobuf::int32 ctrl_port() const;
  inline void set_ctrl_port(::google::protobuf::int32 value);
  
  // optional string config_info = 8;
  inline bool has_config_info() const;
  inline void clear_config_info();
  static const int kConfigInfoFieldNumber = 8;
  inline const ::std::string& config_info() const;
  inline void set_config_info(const ::std::string& value);
  inline void set_config_info(const char* value);
  inline void set_config_info(const char* value, size_t size);
  inline ::std::string* mutable_config_info();
  inline ::std::string* release_config_info();
  
  // optional string trial_end_time = 9;
  inline bool has_trial_end_time() const;
  inline void clear_trial_end_time();
  static const int kTrialEndTimeFieldNumber = 9;
  inline const ::std::string& trial_end_time() const;
  inline void set_trial_end_time(const ::std::string& value);
  inline void set_trial_end_time(const char* value);
  inline void set_trial_end_time(const char* value, size_t size);
  inline ::std::string* mutable_trial_end_time();
  inline ::std::string* release_trial_end_time();
  
  // optional int32 server_id = 10;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 10;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // optional int32 is_need_sync_time = 11;
  inline bool has_is_need_sync_time() const;
  inline void clear_is_need_sync_time();
  static const int kIsNeedSyncTimeFieldNumber = 11;
  inline ::google::protobuf::int32 is_need_sync_time() const;
  inline void set_is_need_sync_time(::google::protobuf::int32 value);
  
  // optional int32 line = 12 [default = 0];
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 12;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);
  
  // optional int32 language = 13 [default = 0];
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 13;
  inline ::google::protobuf::int32 language() const;
  inline void set_language(::google::protobuf::int32 value);
  
  // optional int32 moudle_type = 14;
  inline bool has_moudle_type() const;
  inline void clear_moudle_type();
  static const int kMoudleTypeFieldNumber = 14;
  inline ::google::protobuf::int32 moudle_type() const;
  inline void set_moudle_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cms_8120.RspServerLogin)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_result_info();
  inline void clear_has_result_info();
  inline void set_has_authorization();
  inline void clear_has_authorization();
  inline void set_has_production_version();
  inline void clear_has_production_version();
  inline void set_has_data_port();
  inline void clear_has_data_port();
  inline void set_has_ctrl_port();
  inline void clear_has_ctrl_port();
  inline void set_has_config_info();
  inline void clear_has_config_info();
  inline void set_has_trial_end_time();
  inline void clear_has_trial_end_time();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_is_need_sync_time();
  inline void clear_has_is_need_sync_time();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_moudle_type();
  inline void clear_has_moudle_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 result_;
  ::std::string* result_info_;
  ::std::string* production_version_;
  ::google::protobuf::int32 authorization_;
  ::google::protobuf::int32 data_port_;
  ::std::string* config_info_;
  ::google::protobuf::int32 ctrl_port_;
  ::google::protobuf::int32 server_id_;
  ::std::string* trial_end_time_;
  ::google::protobuf::int32 is_need_sync_time_;
  ::google::protobuf::int32 line_;
  ::google::protobuf::int32 language_;
  ::google::protobuf::int32 moudle_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_verify_2fRspServerLogin_2eproto();
  friend void protobuf_AssignDesc_verify_2fRspServerLogin_2eproto();
  friend void protobuf_ShutdownFile_verify_2fRspServerLogin_2eproto();
  
  void InitAsDefaultInstance();
  static RspServerLogin* default_instance_;
};
// ===================================================================


// ===================================================================

// RspServerLogin

// optional int32 cmd = 1;
inline bool RspServerLogin::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspServerLogin::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspServerLogin::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspServerLogin::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 RspServerLogin::cmd() const {
  return cmd_;
}
inline void RspServerLogin::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 result = 2;
inline bool RspServerLogin::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspServerLogin::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspServerLogin::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspServerLogin::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RspServerLogin::result() const {
  return result_;
}
inline void RspServerLogin::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string result_info = 3;
inline bool RspServerLogin::has_result_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspServerLogin::set_has_result_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspServerLogin::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspServerLogin::clear_result_info() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    result_info_->clear();
  }
  clear_has_result_info();
}
inline const ::std::string& RspServerLogin::result_info() const {
  return *result_info_;
}
inline void RspServerLogin::set_result_info(const ::std::string& value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
}
inline void RspServerLogin::set_result_info(const char* value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
}
inline void RspServerLogin::set_result_info(const char* value, size_t size) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspServerLogin::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  return result_info_;
}
inline ::std::string* RspServerLogin::release_result_info() {
  clear_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_info_;
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 authorization = 4;
inline bool RspServerLogin::has_authorization() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspServerLogin::set_has_authorization() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspServerLogin::clear_has_authorization() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspServerLogin::clear_authorization() {
  authorization_ = 0;
  clear_has_authorization();
}
inline ::google::protobuf::int32 RspServerLogin::authorization() const {
  return authorization_;
}
inline void RspServerLogin::set_authorization(::google::protobuf::int32 value) {
  set_has_authorization();
  authorization_ = value;
}

// optional string production_version = 5;
inline bool RspServerLogin::has_production_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspServerLogin::set_has_production_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspServerLogin::clear_has_production_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspServerLogin::clear_production_version() {
  if (production_version_ != &::google::protobuf::internal::kEmptyString) {
    production_version_->clear();
  }
  clear_has_production_version();
}
inline const ::std::string& RspServerLogin::production_version() const {
  return *production_version_;
}
inline void RspServerLogin::set_production_version(const ::std::string& value) {
  set_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    production_version_ = new ::std::string;
  }
  production_version_->assign(value);
}
inline void RspServerLogin::set_production_version(const char* value) {
  set_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    production_version_ = new ::std::string;
  }
  production_version_->assign(value);
}
inline void RspServerLogin::set_production_version(const char* value, size_t size) {
  set_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    production_version_ = new ::std::string;
  }
  production_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspServerLogin::mutable_production_version() {
  set_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    production_version_ = new ::std::string;
  }
  return production_version_;
}
inline ::std::string* RspServerLogin::release_production_version() {
  clear_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = production_version_;
    production_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 data_port = 6;
inline bool RspServerLogin::has_data_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspServerLogin::set_has_data_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspServerLogin::clear_has_data_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspServerLogin::clear_data_port() {
  data_port_ = 0;
  clear_has_data_port();
}
inline ::google::protobuf::int32 RspServerLogin::data_port() const {
  return data_port_;
}
inline void RspServerLogin::set_data_port(::google::protobuf::int32 value) {
  set_has_data_port();
  data_port_ = value;
}

// optional int32 ctrl_port = 7;
inline bool RspServerLogin::has_ctrl_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspServerLogin::set_has_ctrl_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspServerLogin::clear_has_ctrl_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspServerLogin::clear_ctrl_port() {
  ctrl_port_ = 0;
  clear_has_ctrl_port();
}
inline ::google::protobuf::int32 RspServerLogin::ctrl_port() const {
  return ctrl_port_;
}
inline void RspServerLogin::set_ctrl_port(::google::protobuf::int32 value) {
  set_has_ctrl_port();
  ctrl_port_ = value;
}

// optional string config_info = 8;
inline bool RspServerLogin::has_config_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspServerLogin::set_has_config_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspServerLogin::clear_has_config_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspServerLogin::clear_config_info() {
  if (config_info_ != &::google::protobuf::internal::kEmptyString) {
    config_info_->clear();
  }
  clear_has_config_info();
}
inline const ::std::string& RspServerLogin::config_info() const {
  return *config_info_;
}
inline void RspServerLogin::set_config_info(const ::std::string& value) {
  set_has_config_info();
  if (config_info_ == &::google::protobuf::internal::kEmptyString) {
    config_info_ = new ::std::string;
  }
  config_info_->assign(value);
}
inline void RspServerLogin::set_config_info(const char* value) {
  set_has_config_info();
  if (config_info_ == &::google::protobuf::internal::kEmptyString) {
    config_info_ = new ::std::string;
  }
  config_info_->assign(value);
}
inline void RspServerLogin::set_config_info(const char* value, size_t size) {
  set_has_config_info();
  if (config_info_ == &::google::protobuf::internal::kEmptyString) {
    config_info_ = new ::std::string;
  }
  config_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspServerLogin::mutable_config_info() {
  set_has_config_info();
  if (config_info_ == &::google::protobuf::internal::kEmptyString) {
    config_info_ = new ::std::string;
  }
  return config_info_;
}
inline ::std::string* RspServerLogin::release_config_info() {
  clear_has_config_info();
  if (config_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_info_;
    config_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string trial_end_time = 9;
inline bool RspServerLogin::has_trial_end_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspServerLogin::set_has_trial_end_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspServerLogin::clear_has_trial_end_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspServerLogin::clear_trial_end_time() {
  if (trial_end_time_ != &::google::protobuf::internal::kEmptyString) {
    trial_end_time_->clear();
  }
  clear_has_trial_end_time();
}
inline const ::std::string& RspServerLogin::trial_end_time() const {
  return *trial_end_time_;
}
inline void RspServerLogin::set_trial_end_time(const ::std::string& value) {
  set_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    trial_end_time_ = new ::std::string;
  }
  trial_end_time_->assign(value);
}
inline void RspServerLogin::set_trial_end_time(const char* value) {
  set_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    trial_end_time_ = new ::std::string;
  }
  trial_end_time_->assign(value);
}
inline void RspServerLogin::set_trial_end_time(const char* value, size_t size) {
  set_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    trial_end_time_ = new ::std::string;
  }
  trial_end_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspServerLogin::mutable_trial_end_time() {
  set_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    trial_end_time_ = new ::std::string;
  }
  return trial_end_time_;
}
inline ::std::string* RspServerLogin::release_trial_end_time() {
  clear_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trial_end_time_;
    trial_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 server_id = 10;
inline bool RspServerLogin::has_server_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RspServerLogin::set_has_server_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RspServerLogin::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RspServerLogin::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 RspServerLogin::server_id() const {
  return server_id_;
}
inline void RspServerLogin::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional int32 is_need_sync_time = 11;
inline bool RspServerLogin::has_is_need_sync_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RspServerLogin::set_has_is_need_sync_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RspServerLogin::clear_has_is_need_sync_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RspServerLogin::clear_is_need_sync_time() {
  is_need_sync_time_ = 0;
  clear_has_is_need_sync_time();
}
inline ::google::protobuf::int32 RspServerLogin::is_need_sync_time() const {
  return is_need_sync_time_;
}
inline void RspServerLogin::set_is_need_sync_time(::google::protobuf::int32 value) {
  set_has_is_need_sync_time();
  is_need_sync_time_ = value;
}

// optional int32 line = 12 [default = 0];
inline bool RspServerLogin::has_line() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RspServerLogin::set_has_line() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RspServerLogin::clear_has_line() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RspServerLogin::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 RspServerLogin::line() const {
  return line_;
}
inline void RspServerLogin::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
}

// optional int32 language = 13 [default = 0];
inline bool RspServerLogin::has_language() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RspServerLogin::set_has_language() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RspServerLogin::clear_has_language() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RspServerLogin::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::google::protobuf::int32 RspServerLogin::language() const {
  return language_;
}
inline void RspServerLogin::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
}

// optional int32 moudle_type = 14;
inline bool RspServerLogin::has_moudle_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RspServerLogin::set_has_moudle_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RspServerLogin::clear_has_moudle_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RspServerLogin::clear_moudle_type() {
  moudle_type_ = 0;
  clear_has_moudle_type();
}
inline ::google::protobuf::int32 RspServerLogin::moudle_type() const {
  return moudle_type_;
}
inline void RspServerLogin::set_moudle_type(::google::protobuf::int32 value) {
  set_has_moudle_type();
  moudle_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_verify_2fRspServerLogin_2eproto__INCLUDED
