// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "verify/ReqServerLogin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* ReqServerLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqServerLogin_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_verify_2fReqServerLogin_2eproto() {
  protobuf_AddDesc_verify_2fReqServerLogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "verify/ReqServerLogin.proto");
  GOOGLE_CHECK(file != NULL);
  ReqServerLogin_descriptor_ = file->message_type(0);
  static const int ReqServerLogin_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerLogin, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerLogin, moudle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerLogin, login_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerLogin, login_pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerLogin, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerLogin, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerLogin, server_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerLogin, dc_ip_),
  };
  ReqServerLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqServerLogin_descriptor_,
      ReqServerLogin::default_instance_,
      ReqServerLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqServerLogin));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_verify_2fReqServerLogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqServerLogin_descriptor_, &ReqServerLogin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_verify_2fReqServerLogin_2eproto() {
  delete ReqServerLogin::default_instance_;
  delete ReqServerLogin_reflection_;
}

void protobuf_AddDesc_verify_2fReqServerLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_type_2fModuleType_2eproto();
  ::cms_8120::protobuf_AddDesc_verify_2fRspServerLogin_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033verify/ReqServerLogin.proto\022\010cms_8120\032"
    "\025type/ModuleType.proto\032\033verify/RspServer"
    "Login.proto\"\231\001\n\016ReqServerLogin\022\013\n\003cmd\030\001 "
    "\001(\005\022\023\n\013moudle_type\030\002 \001(\005\022\022\n\nlogin_name\030\003"
    " \001(\t\022\021\n\tlogin_pwd\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\022\013\n\003m"
    "ac\030\006 \001(\t\022\026\n\016server_version\030\007 \001(\t\022\r\n\005dc_i"
    "p\030\010 \001(\t2W\n\022ServerLoginService\022A\n\013ServerL"
    "ogin\022\030.cms_8120.ReqServerLogin\032\030.cms_812"
    "0.RspServerLoginBB\n(com.hikvision.financ"
    "e.fms.cms.hpp.verifyB\023ReqServerLoginProt"
    "o\210\001\001", 404);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "verify/ReqServerLogin.proto", &protobuf_RegisterTypes);
  ReqServerLogin::default_instance_ = new ReqServerLogin();
  ReqServerLogin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_verify_2fReqServerLogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_verify_2fReqServerLogin_2eproto {
  StaticDescriptorInitializer_verify_2fReqServerLogin_2eproto() {
    protobuf_AddDesc_verify_2fReqServerLogin_2eproto();
  }
} static_descriptor_initializer_verify_2fReqServerLogin_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReqServerLogin::kCmdFieldNumber;
const int ReqServerLogin::kMoudleTypeFieldNumber;
const int ReqServerLogin::kLoginNameFieldNumber;
const int ReqServerLogin::kLoginPwdFieldNumber;
const int ReqServerLogin::kIpFieldNumber;
const int ReqServerLogin::kMacFieldNumber;
const int ReqServerLogin::kServerVersionFieldNumber;
const int ReqServerLogin::kDcIpFieldNumber;
#endif  // !_MSC_VER

ReqServerLogin::ReqServerLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqServerLogin::InitAsDefaultInstance() {
}

ReqServerLogin::ReqServerLogin(const ReqServerLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqServerLogin::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  moudle_type_ = 0;
  login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dc_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqServerLogin::~ReqServerLogin() {
  SharedDtor();
}

void ReqServerLogin::SharedDtor() {
  if (login_name_ != &::google::protobuf::internal::kEmptyString) {
    delete login_name_;
  }
  if (login_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete login_pwd_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (server_version_ != &::google::protobuf::internal::kEmptyString) {
    delete server_version_;
  }
  if (dc_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete dc_ip_;
  }
  if (this != default_instance_) {
  }
}

void ReqServerLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqServerLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqServerLogin_descriptor_;
}

const ReqServerLogin& ReqServerLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_verify_2fReqServerLogin_2eproto();  return *default_instance_;
}

ReqServerLogin* ReqServerLogin::default_instance_ = NULL;

ReqServerLogin* ReqServerLogin::New() const {
  return new ReqServerLogin;
}

void ReqServerLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    moudle_type_ = 0;
    if (has_login_name()) {
      if (login_name_ != &::google::protobuf::internal::kEmptyString) {
        login_name_->clear();
      }
    }
    if (has_login_pwd()) {
      if (login_pwd_ != &::google::protobuf::internal::kEmptyString) {
        login_pwd_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
    if (has_server_version()) {
      if (server_version_ != &::google::protobuf::internal::kEmptyString) {
        server_version_->clear();
      }
    }
    if (has_dc_ip()) {
      if (dc_ip_ != &::google::protobuf::internal::kEmptyString) {
        dc_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqServerLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moudle_type;
        break;
      }
      
      // optional int32 moudle_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moudle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moudle_type_)));
          set_has_moudle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_login_name;
        break;
      }
      
      // optional string login_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_name().data(), this->login_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_login_pwd;
        break;
      }
      
      // optional string login_pwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_pwd().data(), this->login_pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mac;
        break;
      }
      
      // optional string mac = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_server_version;
        break;
      }
      
      // optional string server_version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_version().data(), this->server_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_dc_ip;
        break;
      }
      
      // optional string dc_ip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dc_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dc_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dc_ip().data(), this->dc_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqServerLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 moudle_type = 2;
  if (has_moudle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->moudle_type(), output);
  }
  
  // optional string login_name = 3;
  if (has_login_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_name().data(), this->login_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->login_name(), output);
  }
  
  // optional string login_pwd = 4;
  if (has_login_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_pwd().data(), this->login_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->login_pwd(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string mac = 6;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mac(), output);
  }
  
  // optional string server_version = 7;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_version().data(), this->server_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->server_version(), output);
  }
  
  // optional string dc_ip = 8;
  if (has_dc_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dc_ip().data(), this->dc_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->dc_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqServerLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 moudle_type = 2;
  if (has_moudle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->moudle_type(), target);
  }
  
  // optional string login_name = 3;
  if (has_login_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_name().data(), this->login_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->login_name(), target);
  }
  
  // optional string login_pwd = 4;
  if (has_login_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_pwd().data(), this->login_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->login_pwd(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string mac = 6;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mac(), target);
  }
  
  // optional string server_version = 7;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_version().data(), this->server_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->server_version(), target);
  }
  
  // optional string dc_ip = 8;
  if (has_dc_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dc_ip().data(), this->dc_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->dc_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqServerLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 moudle_type = 2;
    if (has_moudle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moudle_type());
    }
    
    // optional string login_name = 3;
    if (has_login_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_name());
    }
    
    // optional string login_pwd = 4;
    if (has_login_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_pwd());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string mac = 6;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }
    
    // optional string server_version = 7;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_version());
    }
    
    // optional string dc_ip = 8;
    if (has_dc_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dc_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqServerLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqServerLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqServerLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqServerLogin::MergeFrom(const ReqServerLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_moudle_type()) {
      set_moudle_type(from.moudle_type());
    }
    if (from.has_login_name()) {
      set_login_name(from.login_name());
    }
    if (from.has_login_pwd()) {
      set_login_pwd(from.login_pwd());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
    if (from.has_dc_ip()) {
      set_dc_ip(from.dc_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqServerLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqServerLogin::CopyFrom(const ReqServerLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqServerLogin::IsInitialized() const {
  
  return true;
}

void ReqServerLogin::Swap(ReqServerLogin* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(moudle_type_, other->moudle_type_);
    std::swap(login_name_, other->login_name_);
    std::swap(login_pwd_, other->login_pwd_);
    std::swap(ip_, other->ip_);
    std::swap(mac_, other->mac_);
    std::swap(server_version_, other->server_version_);
    std::swap(dc_ip_, other->dc_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqServerLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqServerLogin_descriptor_;
  metadata.reflection = ReqServerLogin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
