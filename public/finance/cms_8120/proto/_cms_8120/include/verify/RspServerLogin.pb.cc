// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "verify/RspServerLogin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* RspServerLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspServerLogin_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_verify_2fRspServerLogin_2eproto() {
  protobuf_AddDesc_verify_2fRspServerLogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "verify/RspServerLogin.proto");
  GOOGLE_CHECK(file != NULL);
  RspServerLogin_descriptor_ = file->message_type(0);
  static const int RspServerLogin_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, authorization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, production_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, data_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, ctrl_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, config_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, trial_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, is_need_sync_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, moudle_type_),
  };
  RspServerLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspServerLogin_descriptor_,
      RspServerLogin::default_instance_,
      RspServerLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspServerLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspServerLogin));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_verify_2fRspServerLogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspServerLogin_descriptor_, &RspServerLogin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_verify_2fRspServerLogin_2eproto() {
  delete RspServerLogin::default_instance_;
  delete RspServerLogin_reflection_;
}

void protobuf_AddDesc_verify_2fRspServerLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_type_2fcmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033verify/RspServerLogin.proto\022\010cms_8120\032"
    "\016type/cmd.proto\"\261\002\n\016RspServerLogin\022\013\n\003cm"
    "d\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022\023\n\013result_info\030\003"
    " \001(\t\022\025\n\rauthorization\030\004 \001(\005\022\032\n\022productio"
    "n_version\030\005 \001(\t\022\021\n\tdata_port\030\006 \001(\005\022\021\n\tct"
    "rl_port\030\007 \001(\005\022\023\n\013config_info\030\010 \001(\t\022\026\n\016tr"
    "ial_end_time\030\t \001(\t\022\021\n\tserver_id\030\n \001(\005\022\031\n"
    "\021is_need_sync_time\030\013 \001(\005\022\017\n\004line\030\014 \001(\005:\001"
    "0\022\023\n\010language\030\r \001(\005:\0010\022\023\n\013moudle_type\030\016 "
    "\001(\005B\?\n(com.hikvision.finance.fms.cms.hpp"
    ".verifyB\023RspServerLoginProto", 428);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "verify/RspServerLogin.proto", &protobuf_RegisterTypes);
  RspServerLogin::default_instance_ = new RspServerLogin();
  RspServerLogin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_verify_2fRspServerLogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_verify_2fRspServerLogin_2eproto {
  StaticDescriptorInitializer_verify_2fRspServerLogin_2eproto() {
    protobuf_AddDesc_verify_2fRspServerLogin_2eproto();
  }
} static_descriptor_initializer_verify_2fRspServerLogin_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RspServerLogin::kCmdFieldNumber;
const int RspServerLogin::kResultFieldNumber;
const int RspServerLogin::kResultInfoFieldNumber;
const int RspServerLogin::kAuthorizationFieldNumber;
const int RspServerLogin::kProductionVersionFieldNumber;
const int RspServerLogin::kDataPortFieldNumber;
const int RspServerLogin::kCtrlPortFieldNumber;
const int RspServerLogin::kConfigInfoFieldNumber;
const int RspServerLogin::kTrialEndTimeFieldNumber;
const int RspServerLogin::kServerIdFieldNumber;
const int RspServerLogin::kIsNeedSyncTimeFieldNumber;
const int RspServerLogin::kLineFieldNumber;
const int RspServerLogin::kLanguageFieldNumber;
const int RspServerLogin::kMoudleTypeFieldNumber;
#endif  // !_MSC_VER

RspServerLogin::RspServerLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspServerLogin::InitAsDefaultInstance() {
}

RspServerLogin::RspServerLogin(const RspServerLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspServerLogin::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  result_ = 0;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authorization_ = 0;
  production_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_port_ = 0;
  ctrl_port_ = 0;
  config_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trial_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0;
  is_need_sync_time_ = 0;
  line_ = 0;
  language_ = 0;
  moudle_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspServerLogin::~RspServerLogin() {
  SharedDtor();
}

void RspServerLogin::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (production_version_ != &::google::protobuf::internal::kEmptyString) {
    delete production_version_;
  }
  if (config_info_ != &::google::protobuf::internal::kEmptyString) {
    delete config_info_;
  }
  if (trial_end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete trial_end_time_;
  }
  if (this != default_instance_) {
  }
}

void RspServerLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspServerLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspServerLogin_descriptor_;
}

const RspServerLogin& RspServerLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_verify_2fRspServerLogin_2eproto();  return *default_instance_;
}

RspServerLogin* RspServerLogin::default_instance_ = NULL;

RspServerLogin* RspServerLogin::New() const {
  return new RspServerLogin;
}

void RspServerLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    result_ = 0;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
    authorization_ = 0;
    if (has_production_version()) {
      if (production_version_ != &::google::protobuf::internal::kEmptyString) {
        production_version_->clear();
      }
    }
    data_port_ = 0;
    ctrl_port_ = 0;
    if (has_config_info()) {
      if (config_info_ != &::google::protobuf::internal::kEmptyString) {
        config_info_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_trial_end_time()) {
      if (trial_end_time_ != &::google::protobuf::internal::kEmptyString) {
        trial_end_time_->clear();
      }
    }
    server_id_ = 0;
    is_need_sync_time_ = 0;
    line_ = 0;
    language_ = 0;
    moudle_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspServerLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }
      
      // optional string result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_authorization;
        break;
      }
      
      // optional int32 authorization = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_authorization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &authorization_)));
          set_has_authorization();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_production_version;
        break;
      }
      
      // optional string production_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_production_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_production_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->production_version().data(), this->production_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_data_port;
        break;
      }
      
      // optional int32 data_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_port_)));
          set_has_data_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ctrl_port;
        break;
      }
      
      // optional int32 ctrl_port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctrl_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_port_)));
          set_has_ctrl_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_config_info;
        break;
      }
      
      // optional string config_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config_info().data(), this->config_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_trial_end_time;
        break;
      }
      
      // optional string trial_end_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trial_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trial_end_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trial_end_time().data(), this->trial_end_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_need_sync_time;
        break;
      }
      
      // optional int32 is_need_sync_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_need_sync_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_need_sync_time_)));
          set_has_is_need_sync_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_line;
        break;
      }
      
      // optional int32 line = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_language;
        break;
      }
      
      // optional int32 language = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_moudle_type;
        break;
      }
      
      // optional int32 moudle_type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moudle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moudle_type_)));
          set_has_moudle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspServerLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result_info(), output);
  }
  
  // optional int32 authorization = 4;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->authorization(), output);
  }
  
  // optional string production_version = 5;
  if (has_production_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->production_version().data(), this->production_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->production_version(), output);
  }
  
  // optional int32 data_port = 6;
  if (has_data_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->data_port(), output);
  }
  
  // optional int32 ctrl_port = 7;
  if (has_ctrl_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ctrl_port(), output);
  }
  
  // optional string config_info = 8;
  if (has_config_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config_info().data(), this->config_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->config_info(), output);
  }
  
  // optional string trial_end_time = 9;
  if (has_trial_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trial_end_time().data(), this->trial_end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->trial_end_time(), output);
  }
  
  // optional int32 server_id = 10;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->server_id(), output);
  }
  
  // optional int32 is_need_sync_time = 11;
  if (has_is_need_sync_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->is_need_sync_time(), output);
  }
  
  // optional int32 line = 12 [default = 0];
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->line(), output);
  }
  
  // optional int32 language = 13 [default = 0];
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->language(), output);
  }
  
  // optional int32 moudle_type = 14;
  if (has_moudle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->moudle_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspServerLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_info(), target);
  }
  
  // optional int32 authorization = 4;
  if (has_authorization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->authorization(), target);
  }
  
  // optional string production_version = 5;
  if (has_production_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->production_version().data(), this->production_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->production_version(), target);
  }
  
  // optional int32 data_port = 6;
  if (has_data_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->data_port(), target);
  }
  
  // optional int32 ctrl_port = 7;
  if (has_ctrl_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ctrl_port(), target);
  }
  
  // optional string config_info = 8;
  if (has_config_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config_info().data(), this->config_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->config_info(), target);
  }
  
  // optional string trial_end_time = 9;
  if (has_trial_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trial_end_time().data(), this->trial_end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->trial_end_time(), target);
  }
  
  // optional int32 server_id = 10;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->server_id(), target);
  }
  
  // optional int32 is_need_sync_time = 11;
  if (has_is_need_sync_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->is_need_sync_time(), target);
  }
  
  // optional int32 line = 12 [default = 0];
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->line(), target);
  }
  
  // optional int32 language = 13 [default = 0];
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->language(), target);
  }
  
  // optional int32 moudle_type = 14;
  if (has_moudle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->moudle_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspServerLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }
    
    // optional int32 authorization = 4;
    if (has_authorization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->authorization());
    }
    
    // optional string production_version = 5;
    if (has_production_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->production_version());
    }
    
    // optional int32 data_port = 6;
    if (has_data_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_port());
    }
    
    // optional int32 ctrl_port = 7;
    if (has_ctrl_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_port());
    }
    
    // optional string config_info = 8;
    if (has_config_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_info());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string trial_end_time = 9;
    if (has_trial_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trial_end_time());
    }
    
    // optional int32 server_id = 10;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional int32 is_need_sync_time = 11;
    if (has_is_need_sync_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_need_sync_time());
    }
    
    // optional int32 line = 12 [default = 0];
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }
    
    // optional int32 language = 13 [default = 0];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }
    
    // optional int32 moudle_type = 14;
    if (has_moudle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moudle_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspServerLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspServerLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspServerLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspServerLogin::MergeFrom(const RspServerLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
    if (from.has_authorization()) {
      set_authorization(from.authorization());
    }
    if (from.has_production_version()) {
      set_production_version(from.production_version());
    }
    if (from.has_data_port()) {
      set_data_port(from.data_port());
    }
    if (from.has_ctrl_port()) {
      set_ctrl_port(from.ctrl_port());
    }
    if (from.has_config_info()) {
      set_config_info(from.config_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_trial_end_time()) {
      set_trial_end_time(from.trial_end_time());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_is_need_sync_time()) {
      set_is_need_sync_time(from.is_need_sync_time());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_moudle_type()) {
      set_moudle_type(from.moudle_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspServerLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspServerLogin::CopyFrom(const RspServerLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspServerLogin::IsInitialized() const {
  
  return true;
}

void RspServerLogin::Swap(RspServerLogin* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(result_, other->result_);
    std::swap(result_info_, other->result_info_);
    std::swap(authorization_, other->authorization_);
    std::swap(production_version_, other->production_version_);
    std::swap(data_port_, other->data_port_);
    std::swap(ctrl_port_, other->ctrl_port_);
    std::swap(config_info_, other->config_info_);
    std::swap(trial_end_time_, other->trial_end_time_);
    std::swap(server_id_, other->server_id_);
    std::swap(is_need_sync_time_, other->is_need_sync_time_);
    std::swap(line_, other->line_);
    std::swap(language_, other->language_);
    std::swap(moudle_type_, other->moudle_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspServerLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspServerLogin_descriptor_;
  metadata.reflection = RspServerLogin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
