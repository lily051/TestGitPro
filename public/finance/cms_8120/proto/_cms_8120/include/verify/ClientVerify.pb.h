// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: verify/ClientVerify.proto

#ifndef PROTOBUF_verify_2fClientVerify_2eproto__INCLUDED
#define PROTOBUF_verify_2fClientVerify_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_verify_2fClientVerify_2eproto();
void protobuf_AssignDesc_verify_2fClientVerify_2eproto();
void protobuf_ShutdownFile_verify_2fClientVerify_2eproto();

class ReqClientLogin;
class ReqChangePassword;
class RspClientLogin;
class UserPwdCheck;
class ReqClientInfo;
class RspClientInfo;

// ===================================================================

class ReqClientLogin : public ::google::protobuf::Message {
 public:
  ReqClientLogin();
  virtual ~ReqClientLogin();
  
  ReqClientLogin(const ReqClientLogin& from);
  
  inline ReqClientLogin& operator=(const ReqClientLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqClientLogin& default_instance();
  
  void Swap(ReqClientLogin* other);
  
  // implements Message ----------------------------------------------
  
  ReqClientLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqClientLogin& from);
  void MergeFrom(const ReqClientLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 moudle_type = 2;
  inline bool has_moudle_type() const;
  inline void clear_moudle_type();
  static const int kMoudleTypeFieldNumber = 2;
  inline ::google::protobuf::int32 moudle_type() const;
  inline void set_moudle_type(::google::protobuf::int32 value);
  
  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  
  // optional string user_pwd = 4;
  inline bool has_user_pwd() const;
  inline void clear_user_pwd();
  static const int kUserPwdFieldNumber = 4;
  inline const ::std::string& user_pwd() const;
  inline void set_user_pwd(const ::std::string& value);
  inline void set_user_pwd(const char* value);
  inline void set_user_pwd(const char* value, size_t size);
  inline ::std::string* mutable_user_pwd();
  inline ::std::string* release_user_pwd();
  
  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional string mac = 6;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 6;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  
  // optional string module_version = 7;
  inline bool has_module_version() const;
  inline void clear_module_version();
  static const int kModuleVersionFieldNumber = 7;
  inline const ::std::string& module_version() const;
  inline void set_module_version(const ::std::string& value);
  inline void set_module_version(const char* value);
  inline void set_module_version(const char* value, size_t size);
  inline ::std::string* mutable_module_version();
  inline ::std::string* release_module_version();
  
  // optional string dc_ip = 8;
  inline bool has_dc_ip() const;
  inline void clear_dc_ip();
  static const int kDcIpFieldNumber = 8;
  inline const ::std::string& dc_ip() const;
  inline void set_dc_ip(const ::std::string& value);
  inline void set_dc_ip(const char* value);
  inline void set_dc_ip(const char* value, size_t size);
  inline ::std::string* mutable_dc_ip();
  inline ::std::string* release_dc_ip();
  
  // @@protoc_insertion_point(class_scope:cms_8120.ReqClientLogin)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_moudle_type();
  inline void clear_has_moudle_type();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_user_pwd();
  inline void clear_has_user_pwd();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_module_version();
  inline void clear_has_module_version();
  inline void set_has_dc_ip();
  inline void clear_has_dc_ip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 moudle_type_;
  ::std::string* user_name_;
  ::std::string* user_pwd_;
  ::std::string* ip_;
  ::std::string* mac_;
  ::std::string* module_version_;
  ::std::string* dc_ip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_verify_2fClientVerify_2eproto();
  friend void protobuf_AssignDesc_verify_2fClientVerify_2eproto();
  friend void protobuf_ShutdownFile_verify_2fClientVerify_2eproto();
  
  void InitAsDefaultInstance();
  static ReqClientLogin* default_instance_;
};
// -------------------------------------------------------------------

class ReqChangePassword : public ::google::protobuf::Message {
 public:
  ReqChangePassword();
  virtual ~ReqChangePassword();
  
  ReqChangePassword(const ReqChangePassword& from);
  
  inline ReqChangePassword& operator=(const ReqChangePassword& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqChangePassword& default_instance();
  
  void Swap(ReqChangePassword* other);
  
  // implements Message ----------------------------------------------
  
  ReqChangePassword* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqChangePassword& from);
  void MergeFrom(const ReqChangePassword& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 userId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);
  
  // optional string oldPwd = 3;
  inline bool has_oldpwd() const;
  inline void clear_oldpwd();
  static const int kOldPwdFieldNumber = 3;
  inline const ::std::string& oldpwd() const;
  inline void set_oldpwd(const ::std::string& value);
  inline void set_oldpwd(const char* value);
  inline void set_oldpwd(const char* value, size_t size);
  inline ::std::string* mutable_oldpwd();
  inline ::std::string* release_oldpwd();
  
  // optional string newPwd = 4;
  inline bool has_newpwd() const;
  inline void clear_newpwd();
  static const int kNewPwdFieldNumber = 4;
  inline const ::std::string& newpwd() const;
  inline void set_newpwd(const ::std::string& value);
  inline void set_newpwd(const char* value);
  inline void set_newpwd(const char* value, size_t size);
  inline ::std::string* mutable_newpwd();
  inline ::std::string* release_newpwd();
  
  // @@protoc_insertion_point(class_scope:cms_8120.ReqChangePassword)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_oldpwd();
  inline void clear_has_oldpwd();
  inline void set_has_newpwd();
  inline void clear_has_newpwd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 userid_;
  ::std::string* oldpwd_;
  ::std::string* newpwd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_verify_2fClientVerify_2eproto();
  friend void protobuf_AssignDesc_verify_2fClientVerify_2eproto();
  friend void protobuf_ShutdownFile_verify_2fClientVerify_2eproto();
  
  void InitAsDefaultInstance();
  static ReqChangePassword* default_instance_;
};
// -------------------------------------------------------------------

class RspClientLogin : public ::google::protobuf::Message {
 public:
  RspClientLogin();
  virtual ~RspClientLogin();
  
  RspClientLogin(const RspClientLogin& from);
  
  inline RspClientLogin& operator=(const RspClientLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspClientLogin& default_instance();
  
  void Swap(RspClientLogin* other);
  
  // implements Message ----------------------------------------------
  
  RspClientLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspClientLogin& from);
  void MergeFrom(const RspClientLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string result_info = 3;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 3;
  inline const ::std::string& result_info() const;
  inline void set_result_info(const ::std::string& value);
  inline void set_result_info(const char* value);
  inline void set_result_info(const char* value, size_t size);
  inline ::std::string* mutable_result_info();
  inline ::std::string* release_result_info();
  
  // optional int32 authorization = 4;
  inline bool has_authorization() const;
  inline void clear_authorization();
  static const int kAuthorizationFieldNumber = 4;
  inline ::google::protobuf::int32 authorization() const;
  inline void set_authorization(::google::protobuf::int32 value);
  
  // optional string production_version = 5;
  inline bool has_production_version() const;
  inline void clear_production_version();
  static const int kProductionVersionFieldNumber = 5;
  inline const ::std::string& production_version() const;
  inline void set_production_version(const ::std::string& value);
  inline void set_production_version(const char* value);
  inline void set_production_version(const char* value, size_t size);
  inline ::std::string* mutable_production_version();
  inline ::std::string* release_production_version();
  
  // optional string trial_end_time = 6;
  inline bool has_trial_end_time() const;
  inline void clear_trial_end_time();
  static const int kTrialEndTimeFieldNumber = 6;
  inline const ::std::string& trial_end_time() const;
  inline void set_trial_end_time(const ::std::string& value);
  inline void set_trial_end_time(const char* value);
  inline void set_trial_end_time(const char* value, size_t size);
  inline ::std::string* mutable_trial_end_time();
  inline ::std::string* release_trial_end_time();
  
  // optional int32 user_id = 7;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 7;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // optional int32 role_id = 8;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 8;
  inline ::google::protobuf::int32 role_id() const;
  inline void set_role_id(::google::protobuf::int32 value);
  
  // optional int32 is_need_sync_time = 9;
  inline bool has_is_need_sync_time() const;
  inline void clear_is_need_sync_time();
  static const int kIsNeedSyncTimeFieldNumber = 9;
  inline ::google::protobuf::int32 is_need_sync_time() const;
  inline void set_is_need_sync_time(::google::protobuf::int32 value);
  
  // repeated int32 ui_cs_right = 10;
  inline int ui_cs_right_size() const;
  inline void clear_ui_cs_right();
  static const int kUiCsRightFieldNumber = 10;
  inline ::google::protobuf::int32 ui_cs_right(int index) const;
  inline void set_ui_cs_right(int index, ::google::protobuf::int32 value);
  inline void add_ui_cs_right(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ui_cs_right() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ui_cs_right();
  
  // optional int32 is_omni_operator = 11;
  inline bool has_is_omni_operator() const;
  inline void clear_is_omni_operator();
  static const int kIsOmniOperatorFieldNumber = 11;
  inline ::google::protobuf::int32 is_omni_operator() const;
  inline void set_is_omni_operator(::google::protobuf::int32 value);
  
  // optional int32 user_level = 12;
  inline bool has_user_level() const;
  inline void clear_user_level();
  static const int kUserLevelFieldNumber = 12;
  inline ::google::protobuf::int32 user_level() const;
  inline void set_user_level(::google::protobuf::int32 value);
  
  // optional .cms_8120.UserPwdCheck user_pwd_check = 13;
  inline bool has_user_pwd_check() const;
  inline void clear_user_pwd_check();
  static const int kUserPwdCheckFieldNumber = 13;
  inline const ::cms_8120::UserPwdCheck& user_pwd_check() const;
  inline ::cms_8120::UserPwdCheck* mutable_user_pwd_check();
  inline ::cms_8120::UserPwdCheck* release_user_pwd_check();
  
  // optional string custom_title = 14;
  inline bool has_custom_title() const;
  inline void clear_custom_title();
  static const int kCustomTitleFieldNumber = 14;
  inline const ::std::string& custom_title() const;
  inline void set_custom_title(const ::std::string& value);
  inline void set_custom_title(const char* value);
  inline void set_custom_title(const char* value, size_t size);
  inline ::std::string* mutable_custom_title();
  inline ::std::string* release_custom_title();
  
  // optional int32 skin_color = 15 [default = -1];
  inline bool has_skin_color() const;
  inline void clear_skin_color();
  static const int kSkinColorFieldNumber = 15;
  inline ::google::protobuf::int32 skin_color() const;
  inline void set_skin_color(::google::protobuf::int32 value);
  
  // optional string update_server_ip = 16;
  inline bool has_update_server_ip() const;
  inline void clear_update_server_ip();
  static const int kUpdateServerIpFieldNumber = 16;
  inline const ::std::string& update_server_ip() const;
  inline void set_update_server_ip(const ::std::string& value);
  inline void set_update_server_ip(const char* value);
  inline void set_update_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_update_server_ip();
  inline ::std::string* release_update_server_ip();
  
  // optional int32 update_server_port = 17;
  inline bool has_update_server_port() const;
  inline void clear_update_server_port();
  static const int kUpdateServerPortFieldNumber = 17;
  inline ::google::protobuf::int32 update_server_port() const;
  inline void set_update_server_port(::google::protobuf::int32 value);
  
  // optional int32 line = 18 [default = 0];
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 18;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);
  
  // optional int32 language = 19 [default = 0];
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 19;
  inline ::google::protobuf::int32 language() const;
  inline void set_language(::google::protobuf::int32 value);
  
  // optional string copyright = 20;
  inline bool has_copyright() const;
  inline void clear_copyright();
  static const int kCopyrightFieldNumber = 20;
  inline const ::std::string& copyright() const;
  inline void set_copyright(const ::std::string& value);
  inline void set_copyright(const char* value);
  inline void set_copyright(const char* value, size_t size);
  inline ::std::string* mutable_copyright();
  inline ::std::string* release_copyright();
  
  // optional int32 is_inital_pwd = 21;
  inline bool has_is_inital_pwd() const;
  inline void clear_is_inital_pwd();
  static const int kIsInitalPwdFieldNumber = 21;
  inline ::google::protobuf::int32 is_inital_pwd() const;
  inline void set_is_inital_pwd(::google::protobuf::int32 value);
  
  // optional string data_ex = 22;
  inline bool has_data_ex() const;
  inline void clear_data_ex();
  static const int kDataExFieldNumber = 22;
  inline const ::std::string& data_ex() const;
  inline void set_data_ex(const ::std::string& value);
  inline void set_data_ex(const char* value);
  inline void set_data_ex(const char* value, size_t size);
  inline ::std::string* mutable_data_ex();
  inline ::std::string* release_data_ex();
  
  // optional string user_no = 23;
  inline bool has_user_no() const;
  inline void clear_user_no();
  static const int kUserNoFieldNumber = 23;
  inline const ::std::string& user_no() const;
  inline void set_user_no(const ::std::string& value);
  inline void set_user_no(const char* value);
  inline void set_user_no(const char* value, size_t size);
  inline ::std::string* mutable_user_no();
  inline ::std::string* release_user_no();
  
  // optional string strName = 24;
  inline bool has_strname() const;
  inline void clear_strname();
  static const int kStrNameFieldNumber = 24;
  inline const ::std::string& strname() const;
  inline void set_strname(const ::std::string& value);
  inline void set_strname(const char* value);
  inline void set_strname(const char* value, size_t size);
  inline ::std::string* mutable_strname();
  inline ::std::string* release_strname();
  
  // optional int32 netId = 25;
  inline bool has_netid() const;
  inline void clear_netid();
  static const int kNetIdFieldNumber = 25;
  inline ::google::protobuf::int32 netid() const;
  inline void set_netid(::google::protobuf::int32 value);
  
  // optional string net = 26;
  inline bool has_net() const;
  inline void clear_net();
  static const int kNetFieldNumber = 26;
  inline const ::std::string& net() const;
  inline void set_net(const ::std::string& value);
  inline void set_net(const char* value);
  inline void set_net(const char* value, size_t size);
  inline ::std::string* mutable_net();
  inline ::std::string* release_net();
  
  // optional string version_url = 27;
  inline bool has_version_url() const;
  inline void clear_version_url();
  static const int kVersionUrlFieldNumber = 27;
  inline const ::std::string& version_url() const;
  inline void set_version_url(const ::std::string& value);
  inline void set_version_url(const char* value);
  inline void set_version_url(const char* value, size_t size);
  inline ::std::string* mutable_version_url();
  inline ::std::string* release_version_url();
  
  // optional string version_no = 28;
  inline bool has_version_no() const;
  inline void clear_version_no();
  static const int kVersionNoFieldNumber = 28;
  inline const ::std::string& version_no() const;
  inline void set_version_no(const ::std::string& value);
  inline void set_version_no(const char* value);
  inline void set_version_no(const char* value, size_t size);
  inline ::std::string* mutable_version_no();
  inline ::std::string* release_version_no();
  
  // optional string isForceUpdate = 29;
  inline bool has_isforceupdate() const;
  inline void clear_isforceupdate();
  static const int kIsForceUpdateFieldNumber = 29;
  inline const ::std::string& isforceupdate() const;
  inline void set_isforceupdate(const ::std::string& value);
  inline void set_isforceupdate(const char* value);
  inline void set_isforceupdate(const char* value, size_t size);
  inline ::std::string* mutable_isforceupdate();
  inline ::std::string* release_isforceupdate();
  
  // optional string logUpload_url = 30;
  inline bool has_logupload_url() const;
  inline void clear_logupload_url();
  static const int kLogUploadUrlFieldNumber = 30;
  inline const ::std::string& logupload_url() const;
  inline void set_logupload_url(const ::std::string& value);
  inline void set_logupload_url(const char* value);
  inline void set_logupload_url(const char* value, size_t size);
  inline ::std::string* mutable_logupload_url();
  inline ::std::string* release_logupload_url();
  
  // optional int32 logReport = 31;
  inline bool has_logreport() const;
  inline void clear_logreport();
  static const int kLogReportFieldNumber = 31;
  inline ::google::protobuf::int32 logreport() const;
  inline void set_logreport(::google::protobuf::int32 value);
  
  // optional int32 logReportMethod = 32;
  inline bool has_logreportmethod() const;
  inline void clear_logreportmethod();
  static const int kLogReportMethodFieldNumber = 32;
  inline ::google::protobuf::int32 logreportmethod() const;
  inline void set_logreportmethod(::google::protobuf::int32 value);
  
  // optional string client_ip = 33;
  inline bool has_client_ip() const;
  inline void clear_client_ip();
  static const int kClientIpFieldNumber = 33;
  inline const ::std::string& client_ip() const;
  inline void set_client_ip(const ::std::string& value);
  inline void set_client_ip(const char* value);
  inline void set_client_ip(const char* value, size_t size);
  inline ::std::string* mutable_client_ip();
  inline ::std::string* release_client_ip();
  
  // @@protoc_insertion_point(class_scope:cms_8120.RspClientLogin)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_result_info();
  inline void clear_has_result_info();
  inline void set_has_authorization();
  inline void clear_has_authorization();
  inline void set_has_production_version();
  inline void clear_has_production_version();
  inline void set_has_trial_end_time();
  inline void clear_has_trial_end_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_is_need_sync_time();
  inline void clear_has_is_need_sync_time();
  inline void set_has_is_omni_operator();
  inline void clear_has_is_omni_operator();
  inline void set_has_user_level();
  inline void clear_has_user_level();
  inline void set_has_user_pwd_check();
  inline void clear_has_user_pwd_check();
  inline void set_has_custom_title();
  inline void clear_has_custom_title();
  inline void set_has_skin_color();
  inline void clear_has_skin_color();
  inline void set_has_update_server_ip();
  inline void clear_has_update_server_ip();
  inline void set_has_update_server_port();
  inline void clear_has_update_server_port();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_copyright();
  inline void clear_has_copyright();
  inline void set_has_is_inital_pwd();
  inline void clear_has_is_inital_pwd();
  inline void set_has_data_ex();
  inline void clear_has_data_ex();
  inline void set_has_user_no();
  inline void clear_has_user_no();
  inline void set_has_strname();
  inline void clear_has_strname();
  inline void set_has_netid();
  inline void clear_has_netid();
  inline void set_has_net();
  inline void clear_has_net();
  inline void set_has_version_url();
  inline void clear_has_version_url();
  inline void set_has_version_no();
  inline void clear_has_version_no();
  inline void set_has_isforceupdate();
  inline void clear_has_isforceupdate();
  inline void set_has_logupload_url();
  inline void clear_has_logupload_url();
  inline void set_has_logreport();
  inline void clear_has_logreport();
  inline void set_has_logreportmethod();
  inline void clear_has_logreportmethod();
  inline void set_has_client_ip();
  inline void clear_has_client_ip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 result_;
  ::std::string* result_info_;
  ::std::string* production_version_;
  ::google::protobuf::int32 authorization_;
  ::google::protobuf::int32 user_id_;
  ::std::string* trial_end_time_;
  ::google::protobuf::int32 role_id_;
  ::google::protobuf::int32 is_need_sync_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ui_cs_right_;
  ::google::protobuf::int32 is_omni_operator_;
  ::google::protobuf::int32 user_level_;
  ::cms_8120::UserPwdCheck* user_pwd_check_;
  ::std::string* custom_title_;
  ::std::string* update_server_ip_;
  ::google::protobuf::int32 skin_color_;
  ::google::protobuf::int32 update_server_port_;
  ::google::protobuf::int32 line_;
  ::google::protobuf::int32 language_;
  ::std::string* copyright_;
  ::std::string* data_ex_;
  ::std::string* user_no_;
  ::google::protobuf::int32 is_inital_pwd_;
  ::google::protobuf::int32 netid_;
  ::std::string* strname_;
  ::std::string* net_;
  ::std::string* version_url_;
  ::std::string* version_no_;
  ::std::string* isforceupdate_;
  ::std::string* logupload_url_;
  ::google::protobuf::int32 logreport_;
  ::google::protobuf::int32 logreportmethod_;
  ::std::string* client_ip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(33 + 31) / 32];
  
  friend void  protobuf_AddDesc_verify_2fClientVerify_2eproto();
  friend void protobuf_AssignDesc_verify_2fClientVerify_2eproto();
  friend void protobuf_ShutdownFile_verify_2fClientVerify_2eproto();
  
  void InitAsDefaultInstance();
  static RspClientLogin* default_instance_;
};
// -------------------------------------------------------------------

class UserPwdCheck : public ::google::protobuf::Message {
 public:
  UserPwdCheck();
  virtual ~UserPwdCheck();
  
  UserPwdCheck(const UserPwdCheck& from);
  
  inline UserPwdCheck& operator=(const UserPwdCheck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPwdCheck& default_instance();
  
  void Swap(UserPwdCheck* other);
  
  // implements Message ----------------------------------------------
  
  UserPwdCheck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserPwdCheck& from);
  void MergeFrom(const UserPwdCheck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 is_pwdcheck_enabled = 2;
  inline bool has_is_pwdcheck_enabled() const;
  inline void clear_is_pwdcheck_enabled();
  static const int kIsPwdcheckEnabledFieldNumber = 2;
  inline ::google::protobuf::int32 is_pwdcheck_enabled() const;
  inline void set_is_pwdcheck_enabled(::google::protobuf::int32 value);
  
  // optional int32 remaining_days = 3;
  inline bool has_remaining_days() const;
  inline void clear_remaining_days();
  static const int kRemainingDaysFieldNumber = 3;
  inline ::google::protobuf::int32 remaining_days() const;
  inline void set_remaining_days(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cms_8120.UserPwdCheck)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_is_pwdcheck_enabled();
  inline void clear_has_is_pwdcheck_enabled();
  inline void set_has_remaining_days();
  inline void clear_has_remaining_days();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 is_pwdcheck_enabled_;
  ::google::protobuf::int32 remaining_days_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_verify_2fClientVerify_2eproto();
  friend void protobuf_AssignDesc_verify_2fClientVerify_2eproto();
  friend void protobuf_ShutdownFile_verify_2fClientVerify_2eproto();
  
  void InitAsDefaultInstance();
  static UserPwdCheck* default_instance_;
};
// -------------------------------------------------------------------

class ReqClientInfo : public ::google::protobuf::Message {
 public:
  ReqClientInfo();
  virtual ~ReqClientInfo();
  
  ReqClientInfo(const ReqClientInfo& from);
  
  inline ReqClientInfo& operator=(const ReqClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqClientInfo& default_instance();
  
  void Swap(ReqClientInfo* other);
  
  // implements Message ----------------------------------------------
  
  ReqClientInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqClientInfo& from);
  void MergeFrom(const ReqClientInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 userId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cms_8120.ReqClientInfo)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_userid();
  inline void clear_has_userid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 userid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_verify_2fClientVerify_2eproto();
  friend void protobuf_AssignDesc_verify_2fClientVerify_2eproto();
  friend void protobuf_ShutdownFile_verify_2fClientVerify_2eproto();
  
  void InitAsDefaultInstance();
  static ReqClientInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspClientInfo : public ::google::protobuf::Message {
 public:
  RspClientInfo();
  virtual ~RspClientInfo();
  
  RspClientInfo(const RspClientInfo& from);
  
  inline RspClientInfo& operator=(const RspClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspClientInfo& default_instance();
  
  void Swap(RspClientInfo* other);
  
  // implements Message ----------------------------------------------
  
  RspClientInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspClientInfo& from);
  void MergeFrom(const RspClientInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string result_info = 3;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 3;
  inline const ::std::string& result_info() const;
  inline void set_result_info(const ::std::string& value);
  inline void set_result_info(const char* value);
  inline void set_result_info(const char* value, size_t size);
  inline ::std::string* mutable_result_info();
  inline ::std::string* release_result_info();
  
  // optional int32 isModifyPwd = 4;
  inline bool has_ismodifypwd() const;
  inline void clear_ismodifypwd();
  static const int kIsModifyPwdFieldNumber = 4;
  inline ::google::protobuf::int32 ismodifypwd() const;
  inline void set_ismodifypwd(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cms_8120.RspClientInfo)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_result_info();
  inline void clear_has_result_info();
  inline void set_has_ismodifypwd();
  inline void clear_has_ismodifypwd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 result_;
  ::std::string* result_info_;
  ::google::protobuf::int32 ismodifypwd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_verify_2fClientVerify_2eproto();
  friend void protobuf_AssignDesc_verify_2fClientVerify_2eproto();
  friend void protobuf_ShutdownFile_verify_2fClientVerify_2eproto();
  
  void InitAsDefaultInstance();
  static RspClientInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqClientLogin

// optional int32 cmd = 1;
inline bool ReqClientLogin::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqClientLogin::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqClientLogin::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqClientLogin::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 ReqClientLogin::cmd() const {
  return cmd_;
}
inline void ReqClientLogin::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 moudle_type = 2;
inline bool ReqClientLogin::has_moudle_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqClientLogin::set_has_moudle_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqClientLogin::clear_has_moudle_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqClientLogin::clear_moudle_type() {
  moudle_type_ = 0;
  clear_has_moudle_type();
}
inline ::google::protobuf::int32 ReqClientLogin::moudle_type() const {
  return moudle_type_;
}
inline void ReqClientLogin::set_moudle_type(::google::protobuf::int32 value) {
  set_has_moudle_type();
  moudle_type_ = value;
}

// optional string user_name = 3;
inline bool ReqClientLogin::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqClientLogin::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqClientLogin::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqClientLogin::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& ReqClientLogin::user_name() const {
  return *user_name_;
}
inline void ReqClientLogin::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void ReqClientLogin::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void ReqClientLogin::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqClientLogin::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* ReqClientLogin::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user_pwd = 4;
inline bool ReqClientLogin::has_user_pwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqClientLogin::set_has_user_pwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqClientLogin::clear_has_user_pwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqClientLogin::clear_user_pwd() {
  if (user_pwd_ != &::google::protobuf::internal::kEmptyString) {
    user_pwd_->clear();
  }
  clear_has_user_pwd();
}
inline const ::std::string& ReqClientLogin::user_pwd() const {
  return *user_pwd_;
}
inline void ReqClientLogin::set_user_pwd(const ::std::string& value) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(value);
}
inline void ReqClientLogin::set_user_pwd(const char* value) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(value);
}
inline void ReqClientLogin::set_user_pwd(const char* value, size_t size) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqClientLogin::mutable_user_pwd() {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  return user_pwd_;
}
inline ::std::string* ReqClientLogin::release_user_pwd() {
  clear_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_pwd_;
    user_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool ReqClientLogin::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqClientLogin::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqClientLogin::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqClientLogin::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ReqClientLogin::ip() const {
  return *ip_;
}
inline void ReqClientLogin::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ReqClientLogin::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ReqClientLogin::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqClientLogin::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ReqClientLogin::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mac = 6;
inline bool ReqClientLogin::has_mac() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqClientLogin::set_has_mac() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqClientLogin::clear_has_mac() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqClientLogin::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& ReqClientLogin::mac() const {
  return *mac_;
}
inline void ReqClientLogin::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void ReqClientLogin::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void ReqClientLogin::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqClientLogin::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* ReqClientLogin::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string module_version = 7;
inline bool ReqClientLogin::has_module_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqClientLogin::set_has_module_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqClientLogin::clear_has_module_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqClientLogin::clear_module_version() {
  if (module_version_ != &::google::protobuf::internal::kEmptyString) {
    module_version_->clear();
  }
  clear_has_module_version();
}
inline const ::std::string& ReqClientLogin::module_version() const {
  return *module_version_;
}
inline void ReqClientLogin::set_module_version(const ::std::string& value) {
  set_has_module_version();
  if (module_version_ == &::google::protobuf::internal::kEmptyString) {
    module_version_ = new ::std::string;
  }
  module_version_->assign(value);
}
inline void ReqClientLogin::set_module_version(const char* value) {
  set_has_module_version();
  if (module_version_ == &::google::protobuf::internal::kEmptyString) {
    module_version_ = new ::std::string;
  }
  module_version_->assign(value);
}
inline void ReqClientLogin::set_module_version(const char* value, size_t size) {
  set_has_module_version();
  if (module_version_ == &::google::protobuf::internal::kEmptyString) {
    module_version_ = new ::std::string;
  }
  module_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqClientLogin::mutable_module_version() {
  set_has_module_version();
  if (module_version_ == &::google::protobuf::internal::kEmptyString) {
    module_version_ = new ::std::string;
  }
  return module_version_;
}
inline ::std::string* ReqClientLogin::release_module_version() {
  clear_has_module_version();
  if (module_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = module_version_;
    module_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string dc_ip = 8;
inline bool ReqClientLogin::has_dc_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqClientLogin::set_has_dc_ip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqClientLogin::clear_has_dc_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqClientLogin::clear_dc_ip() {
  if (dc_ip_ != &::google::protobuf::internal::kEmptyString) {
    dc_ip_->clear();
  }
  clear_has_dc_ip();
}
inline const ::std::string& ReqClientLogin::dc_ip() const {
  return *dc_ip_;
}
inline void ReqClientLogin::set_dc_ip(const ::std::string& value) {
  set_has_dc_ip();
  if (dc_ip_ == &::google::protobuf::internal::kEmptyString) {
    dc_ip_ = new ::std::string;
  }
  dc_ip_->assign(value);
}
inline void ReqClientLogin::set_dc_ip(const char* value) {
  set_has_dc_ip();
  if (dc_ip_ == &::google::protobuf::internal::kEmptyString) {
    dc_ip_ = new ::std::string;
  }
  dc_ip_->assign(value);
}
inline void ReqClientLogin::set_dc_ip(const char* value, size_t size) {
  set_has_dc_ip();
  if (dc_ip_ == &::google::protobuf::internal::kEmptyString) {
    dc_ip_ = new ::std::string;
  }
  dc_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqClientLogin::mutable_dc_ip() {
  set_has_dc_ip();
  if (dc_ip_ == &::google::protobuf::internal::kEmptyString) {
    dc_ip_ = new ::std::string;
  }
  return dc_ip_;
}
inline ::std::string* ReqClientLogin::release_dc_ip() {
  clear_has_dc_ip();
  if (dc_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dc_ip_;
    dc_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReqChangePassword

// optional int32 cmd = 1;
inline bool ReqChangePassword::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqChangePassword::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqChangePassword::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqChangePassword::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 ReqChangePassword::cmd() const {
  return cmd_;
}
inline void ReqChangePassword::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 userId = 2;
inline bool ReqChangePassword::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqChangePassword::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqChangePassword::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqChangePassword::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ReqChangePassword::userid() const {
  return userid_;
}
inline void ReqChangePassword::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string oldPwd = 3;
inline bool ReqChangePassword::has_oldpwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqChangePassword::set_has_oldpwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqChangePassword::clear_has_oldpwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqChangePassword::clear_oldpwd() {
  if (oldpwd_ != &::google::protobuf::internal::kEmptyString) {
    oldpwd_->clear();
  }
  clear_has_oldpwd();
}
inline const ::std::string& ReqChangePassword::oldpwd() const {
  return *oldpwd_;
}
inline void ReqChangePassword::set_oldpwd(const ::std::string& value) {
  set_has_oldpwd();
  if (oldpwd_ == &::google::protobuf::internal::kEmptyString) {
    oldpwd_ = new ::std::string;
  }
  oldpwd_->assign(value);
}
inline void ReqChangePassword::set_oldpwd(const char* value) {
  set_has_oldpwd();
  if (oldpwd_ == &::google::protobuf::internal::kEmptyString) {
    oldpwd_ = new ::std::string;
  }
  oldpwd_->assign(value);
}
inline void ReqChangePassword::set_oldpwd(const char* value, size_t size) {
  set_has_oldpwd();
  if (oldpwd_ == &::google::protobuf::internal::kEmptyString) {
    oldpwd_ = new ::std::string;
  }
  oldpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqChangePassword::mutable_oldpwd() {
  set_has_oldpwd();
  if (oldpwd_ == &::google::protobuf::internal::kEmptyString) {
    oldpwd_ = new ::std::string;
  }
  return oldpwd_;
}
inline ::std::string* ReqChangePassword::release_oldpwd() {
  clear_has_oldpwd();
  if (oldpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldpwd_;
    oldpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string newPwd = 4;
inline bool ReqChangePassword::has_newpwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqChangePassword::set_has_newpwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqChangePassword::clear_has_newpwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqChangePassword::clear_newpwd() {
  if (newpwd_ != &::google::protobuf::internal::kEmptyString) {
    newpwd_->clear();
  }
  clear_has_newpwd();
}
inline const ::std::string& ReqChangePassword::newpwd() const {
  return *newpwd_;
}
inline void ReqChangePassword::set_newpwd(const ::std::string& value) {
  set_has_newpwd();
  if (newpwd_ == &::google::protobuf::internal::kEmptyString) {
    newpwd_ = new ::std::string;
  }
  newpwd_->assign(value);
}
inline void ReqChangePassword::set_newpwd(const char* value) {
  set_has_newpwd();
  if (newpwd_ == &::google::protobuf::internal::kEmptyString) {
    newpwd_ = new ::std::string;
  }
  newpwd_->assign(value);
}
inline void ReqChangePassword::set_newpwd(const char* value, size_t size) {
  set_has_newpwd();
  if (newpwd_ == &::google::protobuf::internal::kEmptyString) {
    newpwd_ = new ::std::string;
  }
  newpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqChangePassword::mutable_newpwd() {
  set_has_newpwd();
  if (newpwd_ == &::google::protobuf::internal::kEmptyString) {
    newpwd_ = new ::std::string;
  }
  return newpwd_;
}
inline ::std::string* ReqChangePassword::release_newpwd() {
  clear_has_newpwd();
  if (newpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newpwd_;
    newpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RspClientLogin

// optional int32 cmd = 1;
inline bool RspClientLogin::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspClientLogin::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspClientLogin::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspClientLogin::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 RspClientLogin::cmd() const {
  return cmd_;
}
inline void RspClientLogin::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 result = 2;
inline bool RspClientLogin::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspClientLogin::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspClientLogin::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspClientLogin::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RspClientLogin::result() const {
  return result_;
}
inline void RspClientLogin::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string result_info = 3;
inline bool RspClientLogin::has_result_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspClientLogin::set_has_result_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspClientLogin::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspClientLogin::clear_result_info() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    result_info_->clear();
  }
  clear_has_result_info();
}
inline const ::std::string& RspClientLogin::result_info() const {
  return *result_info_;
}
inline void RspClientLogin::set_result_info(const ::std::string& value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
}
inline void RspClientLogin::set_result_info(const char* value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
}
inline void RspClientLogin::set_result_info(const char* value, size_t size) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  return result_info_;
}
inline ::std::string* RspClientLogin::release_result_info() {
  clear_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_info_;
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 authorization = 4;
inline bool RspClientLogin::has_authorization() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspClientLogin::set_has_authorization() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspClientLogin::clear_has_authorization() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspClientLogin::clear_authorization() {
  authorization_ = 0;
  clear_has_authorization();
}
inline ::google::protobuf::int32 RspClientLogin::authorization() const {
  return authorization_;
}
inline void RspClientLogin::set_authorization(::google::protobuf::int32 value) {
  set_has_authorization();
  authorization_ = value;
}

// optional string production_version = 5;
inline bool RspClientLogin::has_production_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspClientLogin::set_has_production_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspClientLogin::clear_has_production_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspClientLogin::clear_production_version() {
  if (production_version_ != &::google::protobuf::internal::kEmptyString) {
    production_version_->clear();
  }
  clear_has_production_version();
}
inline const ::std::string& RspClientLogin::production_version() const {
  return *production_version_;
}
inline void RspClientLogin::set_production_version(const ::std::string& value) {
  set_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    production_version_ = new ::std::string;
  }
  production_version_->assign(value);
}
inline void RspClientLogin::set_production_version(const char* value) {
  set_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    production_version_ = new ::std::string;
  }
  production_version_->assign(value);
}
inline void RspClientLogin::set_production_version(const char* value, size_t size) {
  set_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    production_version_ = new ::std::string;
  }
  production_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_production_version() {
  set_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    production_version_ = new ::std::string;
  }
  return production_version_;
}
inline ::std::string* RspClientLogin::release_production_version() {
  clear_has_production_version();
  if (production_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = production_version_;
    production_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string trial_end_time = 6;
inline bool RspClientLogin::has_trial_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspClientLogin::set_has_trial_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspClientLogin::clear_has_trial_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspClientLogin::clear_trial_end_time() {
  if (trial_end_time_ != &::google::protobuf::internal::kEmptyString) {
    trial_end_time_->clear();
  }
  clear_has_trial_end_time();
}
inline const ::std::string& RspClientLogin::trial_end_time() const {
  return *trial_end_time_;
}
inline void RspClientLogin::set_trial_end_time(const ::std::string& value) {
  set_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    trial_end_time_ = new ::std::string;
  }
  trial_end_time_->assign(value);
}
inline void RspClientLogin::set_trial_end_time(const char* value) {
  set_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    trial_end_time_ = new ::std::string;
  }
  trial_end_time_->assign(value);
}
inline void RspClientLogin::set_trial_end_time(const char* value, size_t size) {
  set_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    trial_end_time_ = new ::std::string;
  }
  trial_end_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_trial_end_time() {
  set_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    trial_end_time_ = new ::std::string;
  }
  return trial_end_time_;
}
inline ::std::string* RspClientLogin::release_trial_end_time() {
  clear_has_trial_end_time();
  if (trial_end_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trial_end_time_;
    trial_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 user_id = 7;
inline bool RspClientLogin::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspClientLogin::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspClientLogin::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspClientLogin::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 RspClientLogin::user_id() const {
  return user_id_;
}
inline void RspClientLogin::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 role_id = 8;
inline bool RspClientLogin::has_role_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspClientLogin::set_has_role_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspClientLogin::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspClientLogin::clear_role_id() {
  role_id_ = 0;
  clear_has_role_id();
}
inline ::google::protobuf::int32 RspClientLogin::role_id() const {
  return role_id_;
}
inline void RspClientLogin::set_role_id(::google::protobuf::int32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 is_need_sync_time = 9;
inline bool RspClientLogin::has_is_need_sync_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspClientLogin::set_has_is_need_sync_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspClientLogin::clear_has_is_need_sync_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspClientLogin::clear_is_need_sync_time() {
  is_need_sync_time_ = 0;
  clear_has_is_need_sync_time();
}
inline ::google::protobuf::int32 RspClientLogin::is_need_sync_time() const {
  return is_need_sync_time_;
}
inline void RspClientLogin::set_is_need_sync_time(::google::protobuf::int32 value) {
  set_has_is_need_sync_time();
  is_need_sync_time_ = value;
}

// repeated int32 ui_cs_right = 10;
inline int RspClientLogin::ui_cs_right_size() const {
  return ui_cs_right_.size();
}
inline void RspClientLogin::clear_ui_cs_right() {
  ui_cs_right_.Clear();
}
inline ::google::protobuf::int32 RspClientLogin::ui_cs_right(int index) const {
  return ui_cs_right_.Get(index);
}
inline void RspClientLogin::set_ui_cs_right(int index, ::google::protobuf::int32 value) {
  ui_cs_right_.Set(index, value);
}
inline void RspClientLogin::add_ui_cs_right(::google::protobuf::int32 value) {
  ui_cs_right_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RspClientLogin::ui_cs_right() const {
  return ui_cs_right_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RspClientLogin::mutable_ui_cs_right() {
  return &ui_cs_right_;
}

// optional int32 is_omni_operator = 11;
inline bool RspClientLogin::has_is_omni_operator() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RspClientLogin::set_has_is_omni_operator() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RspClientLogin::clear_has_is_omni_operator() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RspClientLogin::clear_is_omni_operator() {
  is_omni_operator_ = 0;
  clear_has_is_omni_operator();
}
inline ::google::protobuf::int32 RspClientLogin::is_omni_operator() const {
  return is_omni_operator_;
}
inline void RspClientLogin::set_is_omni_operator(::google::protobuf::int32 value) {
  set_has_is_omni_operator();
  is_omni_operator_ = value;
}

// optional int32 user_level = 12;
inline bool RspClientLogin::has_user_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RspClientLogin::set_has_user_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RspClientLogin::clear_has_user_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RspClientLogin::clear_user_level() {
  user_level_ = 0;
  clear_has_user_level();
}
inline ::google::protobuf::int32 RspClientLogin::user_level() const {
  return user_level_;
}
inline void RspClientLogin::set_user_level(::google::protobuf::int32 value) {
  set_has_user_level();
  user_level_ = value;
}

// optional .cms_8120.UserPwdCheck user_pwd_check = 13;
inline bool RspClientLogin::has_user_pwd_check() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RspClientLogin::set_has_user_pwd_check() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RspClientLogin::clear_has_user_pwd_check() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RspClientLogin::clear_user_pwd_check() {
  if (user_pwd_check_ != NULL) user_pwd_check_->::cms_8120::UserPwdCheck::Clear();
  clear_has_user_pwd_check();
}
inline const ::cms_8120::UserPwdCheck& RspClientLogin::user_pwd_check() const {
  return user_pwd_check_ != NULL ? *user_pwd_check_ : *default_instance_->user_pwd_check_;
}
inline ::cms_8120::UserPwdCheck* RspClientLogin::mutable_user_pwd_check() {
  set_has_user_pwd_check();
  if (user_pwd_check_ == NULL) user_pwd_check_ = new ::cms_8120::UserPwdCheck;
  return user_pwd_check_;
}
inline ::cms_8120::UserPwdCheck* RspClientLogin::release_user_pwd_check() {
  clear_has_user_pwd_check();
  ::cms_8120::UserPwdCheck* temp = user_pwd_check_;
  user_pwd_check_ = NULL;
  return temp;
}

// optional string custom_title = 14;
inline bool RspClientLogin::has_custom_title() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RspClientLogin::set_has_custom_title() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RspClientLogin::clear_has_custom_title() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RspClientLogin::clear_custom_title() {
  if (custom_title_ != &::google::protobuf::internal::kEmptyString) {
    custom_title_->clear();
  }
  clear_has_custom_title();
}
inline const ::std::string& RspClientLogin::custom_title() const {
  return *custom_title_;
}
inline void RspClientLogin::set_custom_title(const ::std::string& value) {
  set_has_custom_title();
  if (custom_title_ == &::google::protobuf::internal::kEmptyString) {
    custom_title_ = new ::std::string;
  }
  custom_title_->assign(value);
}
inline void RspClientLogin::set_custom_title(const char* value) {
  set_has_custom_title();
  if (custom_title_ == &::google::protobuf::internal::kEmptyString) {
    custom_title_ = new ::std::string;
  }
  custom_title_->assign(value);
}
inline void RspClientLogin::set_custom_title(const char* value, size_t size) {
  set_has_custom_title();
  if (custom_title_ == &::google::protobuf::internal::kEmptyString) {
    custom_title_ = new ::std::string;
  }
  custom_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_custom_title() {
  set_has_custom_title();
  if (custom_title_ == &::google::protobuf::internal::kEmptyString) {
    custom_title_ = new ::std::string;
  }
  return custom_title_;
}
inline ::std::string* RspClientLogin::release_custom_title() {
  clear_has_custom_title();
  if (custom_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custom_title_;
    custom_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 skin_color = 15 [default = -1];
inline bool RspClientLogin::has_skin_color() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RspClientLogin::set_has_skin_color() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RspClientLogin::clear_has_skin_color() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RspClientLogin::clear_skin_color() {
  skin_color_ = -1;
  clear_has_skin_color();
}
inline ::google::protobuf::int32 RspClientLogin::skin_color() const {
  return skin_color_;
}
inline void RspClientLogin::set_skin_color(::google::protobuf::int32 value) {
  set_has_skin_color();
  skin_color_ = value;
}

// optional string update_server_ip = 16;
inline bool RspClientLogin::has_update_server_ip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RspClientLogin::set_has_update_server_ip() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RspClientLogin::clear_has_update_server_ip() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RspClientLogin::clear_update_server_ip() {
  if (update_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    update_server_ip_->clear();
  }
  clear_has_update_server_ip();
}
inline const ::std::string& RspClientLogin::update_server_ip() const {
  return *update_server_ip_;
}
inline void RspClientLogin::set_update_server_ip(const ::std::string& value) {
  set_has_update_server_ip();
  if (update_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    update_server_ip_ = new ::std::string;
  }
  update_server_ip_->assign(value);
}
inline void RspClientLogin::set_update_server_ip(const char* value) {
  set_has_update_server_ip();
  if (update_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    update_server_ip_ = new ::std::string;
  }
  update_server_ip_->assign(value);
}
inline void RspClientLogin::set_update_server_ip(const char* value, size_t size) {
  set_has_update_server_ip();
  if (update_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    update_server_ip_ = new ::std::string;
  }
  update_server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_update_server_ip() {
  set_has_update_server_ip();
  if (update_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    update_server_ip_ = new ::std::string;
  }
  return update_server_ip_;
}
inline ::std::string* RspClientLogin::release_update_server_ip() {
  clear_has_update_server_ip();
  if (update_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = update_server_ip_;
    update_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 update_server_port = 17;
inline bool RspClientLogin::has_update_server_port() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RspClientLogin::set_has_update_server_port() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RspClientLogin::clear_has_update_server_port() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RspClientLogin::clear_update_server_port() {
  update_server_port_ = 0;
  clear_has_update_server_port();
}
inline ::google::protobuf::int32 RspClientLogin::update_server_port() const {
  return update_server_port_;
}
inline void RspClientLogin::set_update_server_port(::google::protobuf::int32 value) {
  set_has_update_server_port();
  update_server_port_ = value;
}

// optional int32 line = 18 [default = 0];
inline bool RspClientLogin::has_line() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RspClientLogin::set_has_line() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RspClientLogin::clear_has_line() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RspClientLogin::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 RspClientLogin::line() const {
  return line_;
}
inline void RspClientLogin::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
}

// optional int32 language = 19 [default = 0];
inline bool RspClientLogin::has_language() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RspClientLogin::set_has_language() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RspClientLogin::clear_has_language() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RspClientLogin::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::google::protobuf::int32 RspClientLogin::language() const {
  return language_;
}
inline void RspClientLogin::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
}

// optional string copyright = 20;
inline bool RspClientLogin::has_copyright() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RspClientLogin::set_has_copyright() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RspClientLogin::clear_has_copyright() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RspClientLogin::clear_copyright() {
  if (copyright_ != &::google::protobuf::internal::kEmptyString) {
    copyright_->clear();
  }
  clear_has_copyright();
}
inline const ::std::string& RspClientLogin::copyright() const {
  return *copyright_;
}
inline void RspClientLogin::set_copyright(const ::std::string& value) {
  set_has_copyright();
  if (copyright_ == &::google::protobuf::internal::kEmptyString) {
    copyright_ = new ::std::string;
  }
  copyright_->assign(value);
}
inline void RspClientLogin::set_copyright(const char* value) {
  set_has_copyright();
  if (copyright_ == &::google::protobuf::internal::kEmptyString) {
    copyright_ = new ::std::string;
  }
  copyright_->assign(value);
}
inline void RspClientLogin::set_copyright(const char* value, size_t size) {
  set_has_copyright();
  if (copyright_ == &::google::protobuf::internal::kEmptyString) {
    copyright_ = new ::std::string;
  }
  copyright_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_copyright() {
  set_has_copyright();
  if (copyright_ == &::google::protobuf::internal::kEmptyString) {
    copyright_ = new ::std::string;
  }
  return copyright_;
}
inline ::std::string* RspClientLogin::release_copyright() {
  clear_has_copyright();
  if (copyright_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = copyright_;
    copyright_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 is_inital_pwd = 21;
inline bool RspClientLogin::has_is_inital_pwd() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RspClientLogin::set_has_is_inital_pwd() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RspClientLogin::clear_has_is_inital_pwd() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RspClientLogin::clear_is_inital_pwd() {
  is_inital_pwd_ = 0;
  clear_has_is_inital_pwd();
}
inline ::google::protobuf::int32 RspClientLogin::is_inital_pwd() const {
  return is_inital_pwd_;
}
inline void RspClientLogin::set_is_inital_pwd(::google::protobuf::int32 value) {
  set_has_is_inital_pwd();
  is_inital_pwd_ = value;
}

// optional string data_ex = 22;
inline bool RspClientLogin::has_data_ex() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RspClientLogin::set_has_data_ex() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RspClientLogin::clear_has_data_ex() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RspClientLogin::clear_data_ex() {
  if (data_ex_ != &::google::protobuf::internal::kEmptyString) {
    data_ex_->clear();
  }
  clear_has_data_ex();
}
inline const ::std::string& RspClientLogin::data_ex() const {
  return *data_ex_;
}
inline void RspClientLogin::set_data_ex(const ::std::string& value) {
  set_has_data_ex();
  if (data_ex_ == &::google::protobuf::internal::kEmptyString) {
    data_ex_ = new ::std::string;
  }
  data_ex_->assign(value);
}
inline void RspClientLogin::set_data_ex(const char* value) {
  set_has_data_ex();
  if (data_ex_ == &::google::protobuf::internal::kEmptyString) {
    data_ex_ = new ::std::string;
  }
  data_ex_->assign(value);
}
inline void RspClientLogin::set_data_ex(const char* value, size_t size) {
  set_has_data_ex();
  if (data_ex_ == &::google::protobuf::internal::kEmptyString) {
    data_ex_ = new ::std::string;
  }
  data_ex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_data_ex() {
  set_has_data_ex();
  if (data_ex_ == &::google::protobuf::internal::kEmptyString) {
    data_ex_ = new ::std::string;
  }
  return data_ex_;
}
inline ::std::string* RspClientLogin::release_data_ex() {
  clear_has_data_ex();
  if (data_ex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_ex_;
    data_ex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user_no = 23;
inline bool RspClientLogin::has_user_no() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RspClientLogin::set_has_user_no() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RspClientLogin::clear_has_user_no() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RspClientLogin::clear_user_no() {
  if (user_no_ != &::google::protobuf::internal::kEmptyString) {
    user_no_->clear();
  }
  clear_has_user_no();
}
inline const ::std::string& RspClientLogin::user_no() const {
  return *user_no_;
}
inline void RspClientLogin::set_user_no(const ::std::string& value) {
  set_has_user_no();
  if (user_no_ == &::google::protobuf::internal::kEmptyString) {
    user_no_ = new ::std::string;
  }
  user_no_->assign(value);
}
inline void RspClientLogin::set_user_no(const char* value) {
  set_has_user_no();
  if (user_no_ == &::google::protobuf::internal::kEmptyString) {
    user_no_ = new ::std::string;
  }
  user_no_->assign(value);
}
inline void RspClientLogin::set_user_no(const char* value, size_t size) {
  set_has_user_no();
  if (user_no_ == &::google::protobuf::internal::kEmptyString) {
    user_no_ = new ::std::string;
  }
  user_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_user_no() {
  set_has_user_no();
  if (user_no_ == &::google::protobuf::internal::kEmptyString) {
    user_no_ = new ::std::string;
  }
  return user_no_;
}
inline ::std::string* RspClientLogin::release_user_no() {
  clear_has_user_no();
  if (user_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_no_;
    user_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strName = 24;
inline bool RspClientLogin::has_strname() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RspClientLogin::set_has_strname() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RspClientLogin::clear_has_strname() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RspClientLogin::clear_strname() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    strname_->clear();
  }
  clear_has_strname();
}
inline const ::std::string& RspClientLogin::strname() const {
  return *strname_;
}
inline void RspClientLogin::set_strname(const ::std::string& value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void RspClientLogin::set_strname(const char* value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void RspClientLogin::set_strname(const char* value, size_t size) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_strname() {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  return strname_;
}
inline ::std::string* RspClientLogin::release_strname() {
  clear_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strname_;
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 netId = 25;
inline bool RspClientLogin::has_netid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RspClientLogin::set_has_netid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RspClientLogin::clear_has_netid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RspClientLogin::clear_netid() {
  netid_ = 0;
  clear_has_netid();
}
inline ::google::protobuf::int32 RspClientLogin::netid() const {
  return netid_;
}
inline void RspClientLogin::set_netid(::google::protobuf::int32 value) {
  set_has_netid();
  netid_ = value;
}

// optional string net = 26;
inline bool RspClientLogin::has_net() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RspClientLogin::set_has_net() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RspClientLogin::clear_has_net() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RspClientLogin::clear_net() {
  if (net_ != &::google::protobuf::internal::kEmptyString) {
    net_->clear();
  }
  clear_has_net();
}
inline const ::std::string& RspClientLogin::net() const {
  return *net_;
}
inline void RspClientLogin::set_net(const ::std::string& value) {
  set_has_net();
  if (net_ == &::google::protobuf::internal::kEmptyString) {
    net_ = new ::std::string;
  }
  net_->assign(value);
}
inline void RspClientLogin::set_net(const char* value) {
  set_has_net();
  if (net_ == &::google::protobuf::internal::kEmptyString) {
    net_ = new ::std::string;
  }
  net_->assign(value);
}
inline void RspClientLogin::set_net(const char* value, size_t size) {
  set_has_net();
  if (net_ == &::google::protobuf::internal::kEmptyString) {
    net_ = new ::std::string;
  }
  net_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_net() {
  set_has_net();
  if (net_ == &::google::protobuf::internal::kEmptyString) {
    net_ = new ::std::string;
  }
  return net_;
}
inline ::std::string* RspClientLogin::release_net() {
  clear_has_net();
  if (net_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = net_;
    net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string version_url = 27;
inline bool RspClientLogin::has_version_url() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RspClientLogin::set_has_version_url() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RspClientLogin::clear_has_version_url() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RspClientLogin::clear_version_url() {
  if (version_url_ != &::google::protobuf::internal::kEmptyString) {
    version_url_->clear();
  }
  clear_has_version_url();
}
inline const ::std::string& RspClientLogin::version_url() const {
  return *version_url_;
}
inline void RspClientLogin::set_version_url(const ::std::string& value) {
  set_has_version_url();
  if (version_url_ == &::google::protobuf::internal::kEmptyString) {
    version_url_ = new ::std::string;
  }
  version_url_->assign(value);
}
inline void RspClientLogin::set_version_url(const char* value) {
  set_has_version_url();
  if (version_url_ == &::google::protobuf::internal::kEmptyString) {
    version_url_ = new ::std::string;
  }
  version_url_->assign(value);
}
inline void RspClientLogin::set_version_url(const char* value, size_t size) {
  set_has_version_url();
  if (version_url_ == &::google::protobuf::internal::kEmptyString) {
    version_url_ = new ::std::string;
  }
  version_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_version_url() {
  set_has_version_url();
  if (version_url_ == &::google::protobuf::internal::kEmptyString) {
    version_url_ = new ::std::string;
  }
  return version_url_;
}
inline ::std::string* RspClientLogin::release_version_url() {
  clear_has_version_url();
  if (version_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_url_;
    version_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string version_no = 28;
inline bool RspClientLogin::has_version_no() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RspClientLogin::set_has_version_no() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RspClientLogin::clear_has_version_no() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RspClientLogin::clear_version_no() {
  if (version_no_ != &::google::protobuf::internal::kEmptyString) {
    version_no_->clear();
  }
  clear_has_version_no();
}
inline const ::std::string& RspClientLogin::version_no() const {
  return *version_no_;
}
inline void RspClientLogin::set_version_no(const ::std::string& value) {
  set_has_version_no();
  if (version_no_ == &::google::protobuf::internal::kEmptyString) {
    version_no_ = new ::std::string;
  }
  version_no_->assign(value);
}
inline void RspClientLogin::set_version_no(const char* value) {
  set_has_version_no();
  if (version_no_ == &::google::protobuf::internal::kEmptyString) {
    version_no_ = new ::std::string;
  }
  version_no_->assign(value);
}
inline void RspClientLogin::set_version_no(const char* value, size_t size) {
  set_has_version_no();
  if (version_no_ == &::google::protobuf::internal::kEmptyString) {
    version_no_ = new ::std::string;
  }
  version_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_version_no() {
  set_has_version_no();
  if (version_no_ == &::google::protobuf::internal::kEmptyString) {
    version_no_ = new ::std::string;
  }
  return version_no_;
}
inline ::std::string* RspClientLogin::release_version_no() {
  clear_has_version_no();
  if (version_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_no_;
    version_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string isForceUpdate = 29;
inline bool RspClientLogin::has_isforceupdate() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RspClientLogin::set_has_isforceupdate() {
  _has_bits_[0] |= 0x10000000u;
}
inline void RspClientLogin::clear_has_isforceupdate() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void RspClientLogin::clear_isforceupdate() {
  if (isforceupdate_ != &::google::protobuf::internal::kEmptyString) {
    isforceupdate_->clear();
  }
  clear_has_isforceupdate();
}
inline const ::std::string& RspClientLogin::isforceupdate() const {
  return *isforceupdate_;
}
inline void RspClientLogin::set_isforceupdate(const ::std::string& value) {
  set_has_isforceupdate();
  if (isforceupdate_ == &::google::protobuf::internal::kEmptyString) {
    isforceupdate_ = new ::std::string;
  }
  isforceupdate_->assign(value);
}
inline void RspClientLogin::set_isforceupdate(const char* value) {
  set_has_isforceupdate();
  if (isforceupdate_ == &::google::protobuf::internal::kEmptyString) {
    isforceupdate_ = new ::std::string;
  }
  isforceupdate_->assign(value);
}
inline void RspClientLogin::set_isforceupdate(const char* value, size_t size) {
  set_has_isforceupdate();
  if (isforceupdate_ == &::google::protobuf::internal::kEmptyString) {
    isforceupdate_ = new ::std::string;
  }
  isforceupdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_isforceupdate() {
  set_has_isforceupdate();
  if (isforceupdate_ == &::google::protobuf::internal::kEmptyString) {
    isforceupdate_ = new ::std::string;
  }
  return isforceupdate_;
}
inline ::std::string* RspClientLogin::release_isforceupdate() {
  clear_has_isforceupdate();
  if (isforceupdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = isforceupdate_;
    isforceupdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string logUpload_url = 30;
inline bool RspClientLogin::has_logupload_url() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void RspClientLogin::set_has_logupload_url() {
  _has_bits_[0] |= 0x20000000u;
}
inline void RspClientLogin::clear_has_logupload_url() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void RspClientLogin::clear_logupload_url() {
  if (logupload_url_ != &::google::protobuf::internal::kEmptyString) {
    logupload_url_->clear();
  }
  clear_has_logupload_url();
}
inline const ::std::string& RspClientLogin::logupload_url() const {
  return *logupload_url_;
}
inline void RspClientLogin::set_logupload_url(const ::std::string& value) {
  set_has_logupload_url();
  if (logupload_url_ == &::google::protobuf::internal::kEmptyString) {
    logupload_url_ = new ::std::string;
  }
  logupload_url_->assign(value);
}
inline void RspClientLogin::set_logupload_url(const char* value) {
  set_has_logupload_url();
  if (logupload_url_ == &::google::protobuf::internal::kEmptyString) {
    logupload_url_ = new ::std::string;
  }
  logupload_url_->assign(value);
}
inline void RspClientLogin::set_logupload_url(const char* value, size_t size) {
  set_has_logupload_url();
  if (logupload_url_ == &::google::protobuf::internal::kEmptyString) {
    logupload_url_ = new ::std::string;
  }
  logupload_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_logupload_url() {
  set_has_logupload_url();
  if (logupload_url_ == &::google::protobuf::internal::kEmptyString) {
    logupload_url_ = new ::std::string;
  }
  return logupload_url_;
}
inline ::std::string* RspClientLogin::release_logupload_url() {
  clear_has_logupload_url();
  if (logupload_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logupload_url_;
    logupload_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 logReport = 31;
inline bool RspClientLogin::has_logreport() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void RspClientLogin::set_has_logreport() {
  _has_bits_[0] |= 0x40000000u;
}
inline void RspClientLogin::clear_has_logreport() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void RspClientLogin::clear_logreport() {
  logreport_ = 0;
  clear_has_logreport();
}
inline ::google::protobuf::int32 RspClientLogin::logreport() const {
  return logreport_;
}
inline void RspClientLogin::set_logreport(::google::protobuf::int32 value) {
  set_has_logreport();
  logreport_ = value;
}

// optional int32 logReportMethod = 32;
inline bool RspClientLogin::has_logreportmethod() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void RspClientLogin::set_has_logreportmethod() {
  _has_bits_[0] |= 0x80000000u;
}
inline void RspClientLogin::clear_has_logreportmethod() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void RspClientLogin::clear_logreportmethod() {
  logreportmethod_ = 0;
  clear_has_logreportmethod();
}
inline ::google::protobuf::int32 RspClientLogin::logreportmethod() const {
  return logreportmethod_;
}
inline void RspClientLogin::set_logreportmethod(::google::protobuf::int32 value) {
  set_has_logreportmethod();
  logreportmethod_ = value;
}

// optional string client_ip = 33;
inline bool RspClientLogin::has_client_ip() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void RspClientLogin::set_has_client_ip() {
  _has_bits_[1] |= 0x00000001u;
}
inline void RspClientLogin::clear_has_client_ip() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void RspClientLogin::clear_client_ip() {
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    client_ip_->clear();
  }
  clear_has_client_ip();
}
inline const ::std::string& RspClientLogin::client_ip() const {
  return *client_ip_;
}
inline void RspClientLogin::set_client_ip(const ::std::string& value) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(value);
}
inline void RspClientLogin::set_client_ip(const char* value) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(value);
}
inline void RspClientLogin::set_client_ip(const char* value, size_t size) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientLogin::mutable_client_ip() {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  return client_ip_;
}
inline ::std::string* RspClientLogin::release_client_ip() {
  clear_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_ip_;
    client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UserPwdCheck

// optional int32 cmd = 1;
inline bool UserPwdCheck::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPwdCheck::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPwdCheck::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPwdCheck::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 UserPwdCheck::cmd() const {
  return cmd_;
}
inline void UserPwdCheck::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 is_pwdcheck_enabled = 2;
inline bool UserPwdCheck::has_is_pwdcheck_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPwdCheck::set_has_is_pwdcheck_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPwdCheck::clear_has_is_pwdcheck_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPwdCheck::clear_is_pwdcheck_enabled() {
  is_pwdcheck_enabled_ = 0;
  clear_has_is_pwdcheck_enabled();
}
inline ::google::protobuf::int32 UserPwdCheck::is_pwdcheck_enabled() const {
  return is_pwdcheck_enabled_;
}
inline void UserPwdCheck::set_is_pwdcheck_enabled(::google::protobuf::int32 value) {
  set_has_is_pwdcheck_enabled();
  is_pwdcheck_enabled_ = value;
}

// optional int32 remaining_days = 3;
inline bool UserPwdCheck::has_remaining_days() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPwdCheck::set_has_remaining_days() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPwdCheck::clear_has_remaining_days() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPwdCheck::clear_remaining_days() {
  remaining_days_ = 0;
  clear_has_remaining_days();
}
inline ::google::protobuf::int32 UserPwdCheck::remaining_days() const {
  return remaining_days_;
}
inline void UserPwdCheck::set_remaining_days(::google::protobuf::int32 value) {
  set_has_remaining_days();
  remaining_days_ = value;
}

// -------------------------------------------------------------------

// ReqClientInfo

// optional int32 cmd = 1;
inline bool ReqClientInfo::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqClientInfo::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqClientInfo::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqClientInfo::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 ReqClientInfo::cmd() const {
  return cmd_;
}
inline void ReqClientInfo::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 userId = 2;
inline bool ReqClientInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqClientInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqClientInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqClientInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ReqClientInfo::userid() const {
  return userid_;
}
inline void ReqClientInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// RspClientInfo

// optional int32 cmd = 1;
inline bool RspClientInfo::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspClientInfo::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspClientInfo::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspClientInfo::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 RspClientInfo::cmd() const {
  return cmd_;
}
inline void RspClientInfo::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 result = 2;
inline bool RspClientInfo::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspClientInfo::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspClientInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspClientInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RspClientInfo::result() const {
  return result_;
}
inline void RspClientInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string result_info = 3;
inline bool RspClientInfo::has_result_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspClientInfo::set_has_result_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspClientInfo::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspClientInfo::clear_result_info() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    result_info_->clear();
  }
  clear_has_result_info();
}
inline const ::std::string& RspClientInfo::result_info() const {
  return *result_info_;
}
inline void RspClientInfo::set_result_info(const ::std::string& value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
}
inline void RspClientInfo::set_result_info(const char* value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
}
inline void RspClientInfo::set_result_info(const char* value, size_t size) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspClientInfo::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  return result_info_;
}
inline ::std::string* RspClientInfo::release_result_info() {
  clear_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_info_;
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 isModifyPwd = 4;
inline bool RspClientInfo::has_ismodifypwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspClientInfo::set_has_ismodifypwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspClientInfo::clear_has_ismodifypwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspClientInfo::clear_ismodifypwd() {
  ismodifypwd_ = 0;
  clear_has_ismodifypwd();
}
inline ::google::protobuf::int32 RspClientInfo::ismodifypwd() const {
  return ismodifypwd_;
}
inline void RspClientInfo::set_ismodifypwd(::google::protobuf::int32 value) {
  set_has_ismodifypwd();
  ismodifypwd_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_verify_2fClientVerify_2eproto__INCLUDED
