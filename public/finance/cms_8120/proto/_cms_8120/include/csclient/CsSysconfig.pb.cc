// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csclient/CsSysconfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* SysconfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysconfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSysconfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSysconfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspSysconfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspSysconfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_csclient_2fCsSysconfig_2eproto() {
  protobuf_AddDesc_csclient_2fCsSysconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "csclient/CsSysconfig.proto");
  GOOGLE_CHECK(file != NULL);
  SysconfigInfo_descriptor_ = file->message_type(0);
  static const int SysconfigInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysconfigInfo, nkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysconfigInfo, strvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysconfigInfo, strcomment_),
  };
  SysconfigInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysconfigInfo_descriptor_,
      SysconfigInfo::default_instance_,
      SysconfigInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysconfigInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysconfigInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysconfigInfo));
  ReqSysconfig_descriptor_ = file->message_type(1);
  static const int ReqSysconfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSysconfig, cmd_),
  };
  ReqSysconfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSysconfig_descriptor_,
      ReqSysconfig::default_instance_,
      ReqSysconfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSysconfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSysconfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSysconfig));
  RspSysconfig_descriptor_ = file->message_type(2);
  static const int RspSysconfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSysconfig, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSysconfig, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSysconfig, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSysconfig, sysconfiginfo_),
  };
  RspSysconfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspSysconfig_descriptor_,
      RspSysconfig::default_instance_,
      RspSysconfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSysconfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSysconfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspSysconfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_csclient_2fCsSysconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysconfigInfo_descriptor_, &SysconfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSysconfig_descriptor_, &ReqSysconfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspSysconfig_descriptor_, &RspSysconfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_csclient_2fCsSysconfig_2eproto() {
  delete SysconfigInfo::default_instance_;
  delete SysconfigInfo_reflection_;
  delete ReqSysconfig::default_instance_;
  delete ReqSysconfig_reflection_;
  delete RspSysconfig::default_instance_;
  delete RspSysconfig_reflection_;
}

void protobuf_AddDesc_csclient_2fCsSysconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032csclient/CsSysconfig.proto\022\010cms_8120\"C"
    "\n\rSysconfigInfo\022\014\n\004nKey\030\001 \001(\005\022\020\n\010strValu"
    "e\030\002 \001(\t\022\022\n\nstrComment\030\003 \001(\t\"\033\n\014ReqSyscon"
    "fig\022\013\n\003cmd\030\001 \001(\005\"p\n\014RspSysconfig\022\013\n\003cmd\030"
    "\001 \001(\005\022\016\n\006result\030\002 \001(\005\022\023\n\013result_info\030\003 \001"
    "(\t\022.\n\rsysconfigInfo\030\004 \003(\0132\027.cms_8120.Sys"
    "configInfo2[\n\023SystemConfigService\022D\n\022Que"
    "rySysconfigInfo\022\026.cms_8120.ReqSysconfig\032"
    "\026.cms_8120.RspSysconfigBB\n*com.hikvision"
    ".finance.fms.cms.hpp.csclientB\021SystemCon"
    "figProto\210\001\001", 411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "csclient/CsSysconfig.proto", &protobuf_RegisterTypes);
  SysconfigInfo::default_instance_ = new SysconfigInfo();
  ReqSysconfig::default_instance_ = new ReqSysconfig();
  RspSysconfig::default_instance_ = new RspSysconfig();
  SysconfigInfo::default_instance_->InitAsDefaultInstance();
  ReqSysconfig::default_instance_->InitAsDefaultInstance();
  RspSysconfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_csclient_2fCsSysconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_csclient_2fCsSysconfig_2eproto {
  StaticDescriptorInitializer_csclient_2fCsSysconfig_2eproto() {
    protobuf_AddDesc_csclient_2fCsSysconfig_2eproto();
  }
} static_descriptor_initializer_csclient_2fCsSysconfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SysconfigInfo::kNKeyFieldNumber;
const int SysconfigInfo::kStrValueFieldNumber;
const int SysconfigInfo::kStrCommentFieldNumber;
#endif  // !_MSC_VER

SysconfigInfo::SysconfigInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysconfigInfo::InitAsDefaultInstance() {
}

SysconfigInfo::SysconfigInfo(const SysconfigInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysconfigInfo::SharedCtor() {
  _cached_size_ = 0;
  nkey_ = 0;
  strvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcomment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysconfigInfo::~SysconfigInfo() {
  SharedDtor();
}

void SysconfigInfo::SharedDtor() {
  if (strvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete strvalue_;
  }
  if (strcomment_ != &::google::protobuf::internal::kEmptyString) {
    delete strcomment_;
  }
  if (this != default_instance_) {
  }
}

void SysconfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysconfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysconfigInfo_descriptor_;
}

const SysconfigInfo& SysconfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsSysconfig_2eproto();  return *default_instance_;
}

SysconfigInfo* SysconfigInfo::default_instance_ = NULL;

SysconfigInfo* SysconfigInfo::New() const {
  return new SysconfigInfo;
}

void SysconfigInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nkey_ = 0;
    if (has_strvalue()) {
      if (strvalue_ != &::google::protobuf::internal::kEmptyString) {
        strvalue_->clear();
      }
    }
    if (has_strcomment()) {
      if (strcomment_ != &::google::protobuf::internal::kEmptyString) {
        strcomment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysconfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nkey_)));
          set_has_nkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strValue;
        break;
      }
      
      // optional string strValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strvalue().data(), this->strvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strComment;
        break;
      }
      
      // optional string strComment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strComment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcomment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcomment().data(), this->strcomment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysconfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nKey = 1;
  if (has_nkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nkey(), output);
  }
  
  // optional string strValue = 2;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strvalue(), output);
  }
  
  // optional string strComment = 3;
  if (has_strcomment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcomment().data(), this->strcomment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strcomment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysconfigInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nKey = 1;
  if (has_nkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nkey(), target);
  }
  
  // optional string strValue = 2;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strvalue(), target);
  }
  
  // optional string strComment = 3;
  if (has_strcomment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcomment().data(), this->strcomment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strcomment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysconfigInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nKey = 1;
    if (has_nkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nkey());
    }
    
    // optional string strValue = 2;
    if (has_strvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strvalue());
    }
    
    // optional string strComment = 3;
    if (has_strcomment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcomment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysconfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysconfigInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysconfigInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysconfigInfo::MergeFrom(const SysconfigInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nkey()) {
      set_nkey(from.nkey());
    }
    if (from.has_strvalue()) {
      set_strvalue(from.strvalue());
    }
    if (from.has_strcomment()) {
      set_strcomment(from.strcomment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysconfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysconfigInfo::CopyFrom(const SysconfigInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysconfigInfo::IsInitialized() const {
  
  return true;
}

void SysconfigInfo::Swap(SysconfigInfo* other) {
  if (other != this) {
    std::swap(nkey_, other->nkey_);
    std::swap(strvalue_, other->strvalue_);
    std::swap(strcomment_, other->strcomment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysconfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysconfigInfo_descriptor_;
  metadata.reflection = SysconfigInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSysconfig::kCmdFieldNumber;
#endif  // !_MSC_VER

ReqSysconfig::ReqSysconfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSysconfig::InitAsDefaultInstance() {
}

ReqSysconfig::ReqSysconfig(const ReqSysconfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSysconfig::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSysconfig::~ReqSysconfig() {
  SharedDtor();
}

void ReqSysconfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqSysconfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSysconfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSysconfig_descriptor_;
}

const ReqSysconfig& ReqSysconfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsSysconfig_2eproto();  return *default_instance_;
}

ReqSysconfig* ReqSysconfig::default_instance_ = NULL;

ReqSysconfig* ReqSysconfig::New() const {
  return new ReqSysconfig;
}

void ReqSysconfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSysconfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSysconfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSysconfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSysconfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSysconfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSysconfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSysconfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSysconfig::MergeFrom(const ReqSysconfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSysconfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSysconfig::CopyFrom(const ReqSysconfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSysconfig::IsInitialized() const {
  
  return true;
}

void ReqSysconfig::Swap(ReqSysconfig* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSysconfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSysconfig_descriptor_;
  metadata.reflection = ReqSysconfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspSysconfig::kCmdFieldNumber;
const int RspSysconfig::kResultFieldNumber;
const int RspSysconfig::kResultInfoFieldNumber;
const int RspSysconfig::kSysconfigInfoFieldNumber;
#endif  // !_MSC_VER

RspSysconfig::RspSysconfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspSysconfig::InitAsDefaultInstance() {
}

RspSysconfig::RspSysconfig(const RspSysconfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspSysconfig::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  result_ = 0;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspSysconfig::~RspSysconfig() {
  SharedDtor();
}

void RspSysconfig::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (this != default_instance_) {
  }
}

void RspSysconfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspSysconfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspSysconfig_descriptor_;
}

const RspSysconfig& RspSysconfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsSysconfig_2eproto();  return *default_instance_;
}

RspSysconfig* RspSysconfig::default_instance_ = NULL;

RspSysconfig* RspSysconfig::New() const {
  return new RspSysconfig;
}

void RspSysconfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    result_ = 0;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
  }
  sysconfiginfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspSysconfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }
      
      // optional string result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sysconfigInfo;
        break;
      }
      
      // repeated .cms_8120.SysconfigInfo sysconfigInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sysconfigInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sysconfiginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sysconfigInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspSysconfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result_info(), output);
  }
  
  // repeated .cms_8120.SysconfigInfo sysconfigInfo = 4;
  for (int i = 0; i < this->sysconfiginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sysconfiginfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspSysconfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_info(), target);
  }
  
  // repeated .cms_8120.SysconfigInfo sysconfigInfo = 4;
  for (int i = 0; i < this->sysconfiginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sysconfiginfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspSysconfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }
    
  }
  // repeated .cms_8120.SysconfigInfo sysconfigInfo = 4;
  total_size += 1 * this->sysconfiginfo_size();
  for (int i = 0; i < this->sysconfiginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sysconfiginfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspSysconfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspSysconfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspSysconfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspSysconfig::MergeFrom(const RspSysconfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  sysconfiginfo_.MergeFrom(from.sysconfiginfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspSysconfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspSysconfig::CopyFrom(const RspSysconfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspSysconfig::IsInitialized() const {
  
  return true;
}

void RspSysconfig::Swap(RspSysconfig* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(result_, other->result_);
    std::swap(result_info_, other->result_info_);
    sysconfiginfo_.Swap(&other->sysconfiginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspSysconfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspSysconfig_descriptor_;
  metadata.reflection = RspSysconfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
