// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csclient/Product.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* ReqProduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqProduct_reflection_ = NULL;
const ::google::protobuf::Descriptor* Product_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Product_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_csclient_2fProduct_2eproto() {
  protobuf_AddDesc_csclient_2fProduct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "csclient/Product.proto");
  GOOGLE_CHECK(file != NULL);
  ReqProduct_descriptor_ = file->message_type(0);
  static const int ReqProduct_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProduct, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProduct, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProduct, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProduct, inputuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProduct, strcode_),
  };
  ReqProduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqProduct_descriptor_,
      ReqProduct::default_instance_,
      ReqProduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqProduct));
  Product_descriptor_ = file->message_type(1);
  static const int Product_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, producttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, strcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, strenddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, guaranteetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, guaranteeyears_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, savetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, saveyears_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, strgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, strrisklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, wordtemplate_),
  };
  Product_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Product_descriptor_,
      Product::default_instance_,
      Product_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Product));
  ProductList_descriptor_ = file->message_type(2);
  static const int ProductList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductList, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductList, product_),
  };
  ProductList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductList_descriptor_,
      ProductList::default_instance_,
      ProductList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductList));
  ProductInfo_descriptor_ = file->message_type(3);
  static const int ProductInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, product_),
  };
  ProductInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductInfo_descriptor_,
      ProductInfo::default_instance_,
      ProductInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_csclient_2fProduct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqProduct_descriptor_, &ReqProduct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Product_descriptor_, &Product::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductList_descriptor_, &ProductList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductInfo_descriptor_, &ProductInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_csclient_2fProduct_2eproto() {
  delete ReqProduct::default_instance_;
  delete ReqProduct_reflection_;
  delete Product::default_instance_;
  delete Product_reflection_;
  delete ProductList::default_instance_;
  delete ProductList_reflection_;
  delete ProductInfo::default_instance_;
  delete ProductInfo_reflection_;
}

void protobuf_AddDesc_csclient_2fProduct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026csclient/Product.proto\022\010cms_8120\"V\n\nRe"
    "qProduct\022\013\n\003cmd\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\013\n\003pId"
    "\030\003 \001(\005\022\021\n\tinputUser\030\004 \001(\005\022\017\n\007strCode\030\005 \001"
    "(\t\"\377\001\n\007Product\022\n\n\002id\030\001 \001(\005\022\013\n\003pId\030\002 \001(\005\022"
    "\023\n\013productType\030\003 \001(\t\022\017\n\007strName\030\004 \001(\t\022\017\n"
    "\007strCode\030\005 \001(\t\022\022\n\nstrEndDate\030\006 \001(\t\022\025\n\rgu"
    "aranteeType\030\007 \001(\005\022\026\n\016guaranteeYears\030\010 \001("
    "\005\022\020\n\010saveType\030\t \001(\005\022\021\n\tsaveYears\030\n \001(\005\022\020"
    "\n\010strGrade\030\013 \001(\t\022\024\n\014strRisklevel\030\014 \001(\t\022\024"
    "\n\014wordTemplate\030\r \001(\t\"c\n\013ProductList\022\013\n\003c"
    "md\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022\023\n\013result_info\030"
    "\003 \001(\t\022\"\n\007product\030\004 \003(\0132\021.cms_8120.Produc"
    "t\"c\n\013ProductInfo\022\013\n\003cmd\030\001 \001(\005\022\016\n\006result\030"
    "\002 \001(\005\022\023\n\013result_info\030\003 \001(\t\022\"\n\007product\030\004 "
    "\001(\0132\021.cms_8120.Product2\325\001\n\016ProductServic"
    "e\022=\n\016GetProductList\022\024.cms_8120.ReqProduc"
    "t\032\025.cms_8120.ProductList\022=\n\016GetProductIn"
    "fo\022\024.cms_8120.ReqProduct\032\025.cms_8120.Prod"
    "uctInfo\022E\n\026GetProductWordTemplate\022\024.cms_"
    "8120.ReqProduct\032\025.cms_8120.ProductInfoB="
    "\n*com.hikvision.finance.fms.cms.hpp.cscl"
    "ientB\014ProductProto\210\001\001", 861);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "csclient/Product.proto", &protobuf_RegisterTypes);
  ReqProduct::default_instance_ = new ReqProduct();
  Product::default_instance_ = new Product();
  ProductList::default_instance_ = new ProductList();
  ProductInfo::default_instance_ = new ProductInfo();
  ReqProduct::default_instance_->InitAsDefaultInstance();
  Product::default_instance_->InitAsDefaultInstance();
  ProductList::default_instance_->InitAsDefaultInstance();
  ProductInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_csclient_2fProduct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_csclient_2fProduct_2eproto {
  StaticDescriptorInitializer_csclient_2fProduct_2eproto() {
    protobuf_AddDesc_csclient_2fProduct_2eproto();
  }
} static_descriptor_initializer_csclient_2fProduct_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReqProduct::kCmdFieldNumber;
const int ReqProduct::kIdFieldNumber;
const int ReqProduct::kPIdFieldNumber;
const int ReqProduct::kInputUserFieldNumber;
const int ReqProduct::kStrCodeFieldNumber;
#endif  // !_MSC_VER

ReqProduct::ReqProduct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqProduct::InitAsDefaultInstance() {
}

ReqProduct::ReqProduct(const ReqProduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqProduct::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  id_ = 0;
  pid_ = 0;
  inputuser_ = 0;
  strcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqProduct::~ReqProduct() {
  SharedDtor();
}

void ReqProduct::SharedDtor() {
  if (strcode_ != &::google::protobuf::internal::kEmptyString) {
    delete strcode_;
  }
  if (this != default_instance_) {
  }
}

void ReqProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqProduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqProduct_descriptor_;
}

const ReqProduct& ReqProduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fProduct_2eproto();  return *default_instance_;
}

ReqProduct* ReqProduct::default_instance_ = NULL;

ReqProduct* ReqProduct::New() const {
  return new ReqProduct;
}

void ReqProduct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    id_ = 0;
    pid_ = 0;
    inputuser_ = 0;
    if (has_strcode()) {
      if (strcode_ != &::google::protobuf::internal::kEmptyString) {
        strcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pId;
        break;
      }
      
      // optional int32 pId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inputUser;
        break;
      }
      
      // optional int32 inputUser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputuser_)));
          set_has_inputuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strCode;
        break;
      }
      
      // optional string strCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcode().data(), this->strcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 pId = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }
  
  // optional int32 inputUser = 4;
  if (has_inputuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inputuser(), output);
  }
  
  // optional string strCode = 5;
  if (has_strcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcode().data(), this->strcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqProduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 pId = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }
  
  // optional int32 inputUser = 4;
  if (has_inputuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inputuser(), target);
  }
  
  // optional string strCode = 5;
  if (has_strcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcode().data(), this->strcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqProduct::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 pId = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // optional int32 inputUser = 4;
    if (has_inputuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputuser());
    }
    
    // optional string strCode = 5;
    if (has_strcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqProduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqProduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqProduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqProduct::MergeFrom(const ReqProduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_inputuser()) {
      set_inputuser(from.inputuser());
    }
    if (from.has_strcode()) {
      set_strcode(from.strcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqProduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqProduct::CopyFrom(const ReqProduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqProduct::IsInitialized() const {
  
  return true;
}

void ReqProduct::Swap(ReqProduct* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(id_, other->id_);
    std::swap(pid_, other->pid_);
    std::swap(inputuser_, other->inputuser_);
    std::swap(strcode_, other->strcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqProduct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqProduct_descriptor_;
  metadata.reflection = ReqProduct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Product::kIdFieldNumber;
const int Product::kPIdFieldNumber;
const int Product::kProductTypeFieldNumber;
const int Product::kStrNameFieldNumber;
const int Product::kStrCodeFieldNumber;
const int Product::kStrEndDateFieldNumber;
const int Product::kGuaranteeTypeFieldNumber;
const int Product::kGuaranteeYearsFieldNumber;
const int Product::kSaveTypeFieldNumber;
const int Product::kSaveYearsFieldNumber;
const int Product::kStrGradeFieldNumber;
const int Product::kStrRisklevelFieldNumber;
const int Product::kWordTemplateFieldNumber;
#endif  // !_MSC_VER

Product::Product()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Product::InitAsDefaultInstance() {
}

Product::Product(const Product& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Product::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pid_ = 0;
  producttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strenddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guaranteetype_ = 0;
  guaranteeyears_ = 0;
  savetype_ = 0;
  saveyears_ = 0;
  strgrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strrisklevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wordtemplate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Product::~Product() {
  SharedDtor();
}

void Product::SharedDtor() {
  if (producttype_ != &::google::protobuf::internal::kEmptyString) {
    delete producttype_;
  }
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (strcode_ != &::google::protobuf::internal::kEmptyString) {
    delete strcode_;
  }
  if (strenddate_ != &::google::protobuf::internal::kEmptyString) {
    delete strenddate_;
  }
  if (strgrade_ != &::google::protobuf::internal::kEmptyString) {
    delete strgrade_;
  }
  if (strrisklevel_ != &::google::protobuf::internal::kEmptyString) {
    delete strrisklevel_;
  }
  if (wordtemplate_ != &::google::protobuf::internal::kEmptyString) {
    delete wordtemplate_;
  }
  if (this != default_instance_) {
  }
}

void Product::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Product::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Product_descriptor_;
}

const Product& Product::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fProduct_2eproto();  return *default_instance_;
}

Product* Product::default_instance_ = NULL;

Product* Product::New() const {
  return new Product;
}

void Product::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    pid_ = 0;
    if (has_producttype()) {
      if (producttype_ != &::google::protobuf::internal::kEmptyString) {
        producttype_->clear();
      }
    }
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    if (has_strcode()) {
      if (strcode_ != &::google::protobuf::internal::kEmptyString) {
        strcode_->clear();
      }
    }
    if (has_strenddate()) {
      if (strenddate_ != &::google::protobuf::internal::kEmptyString) {
        strenddate_->clear();
      }
    }
    guaranteetype_ = 0;
    guaranteeyears_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    savetype_ = 0;
    saveyears_ = 0;
    if (has_strgrade()) {
      if (strgrade_ != &::google::protobuf::internal::kEmptyString) {
        strgrade_->clear();
      }
    }
    if (has_strrisklevel()) {
      if (strrisklevel_ != &::google::protobuf::internal::kEmptyString) {
        strrisklevel_->clear();
      }
    }
    if (has_wordtemplate()) {
      if (wordtemplate_ != &::google::protobuf::internal::kEmptyString) {
        wordtemplate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Product::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pId;
        break;
      }
      
      // optional int32 pId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_productType;
        break;
      }
      
      // optional string productType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->producttype().data(), this->producttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strName;
        break;
      }
      
      // optional string strName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strCode;
        break;
      }
      
      // optional string strCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcode().data(), this->strcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strEndDate;
        break;
      }
      
      // optional string strEndDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strEndDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strenddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strenddate().data(), this->strenddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_guaranteeType;
        break;
      }
      
      // optional int32 guaranteeType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guaranteeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guaranteetype_)));
          set_has_guaranteetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_guaranteeYears;
        break;
      }
      
      // optional int32 guaranteeYears = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guaranteeYears:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guaranteeyears_)));
          set_has_guaranteeyears();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_saveType;
        break;
      }
      
      // optional int32 saveType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saveType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &savetype_)));
          set_has_savetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_saveYears;
        break;
      }
      
      // optional int32 saveYears = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saveYears:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &saveyears_)));
          set_has_saveyears();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_strGrade;
        break;
      }
      
      // optional string strGrade = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strGrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strgrade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strgrade().data(), this->strgrade().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_strRisklevel;
        break;
      }
      
      // optional string strRisklevel = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRisklevel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strrisklevel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strrisklevel().data(), this->strrisklevel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_wordTemplate;
        break;
      }
      
      // optional string wordTemplate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wordTemplate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wordtemplate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wordtemplate().data(), this->wordtemplate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Product::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 pId = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }
  
  // optional string productType = 3;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttype().data(), this->producttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->producttype(), output);
  }
  
  // optional string strName = 4;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strname(), output);
  }
  
  // optional string strCode = 5;
  if (has_strcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcode().data(), this->strcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strcode(), output);
  }
  
  // optional string strEndDate = 6;
  if (has_strenddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strenddate().data(), this->strenddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->strenddate(), output);
  }
  
  // optional int32 guaranteeType = 7;
  if (has_guaranteetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guaranteetype(), output);
  }
  
  // optional int32 guaranteeYears = 8;
  if (has_guaranteeyears()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->guaranteeyears(), output);
  }
  
  // optional int32 saveType = 9;
  if (has_savetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->savetype(), output);
  }
  
  // optional int32 saveYears = 10;
  if (has_saveyears()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->saveyears(), output);
  }
  
  // optional string strGrade = 11;
  if (has_strgrade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strgrade().data(), this->strgrade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->strgrade(), output);
  }
  
  // optional string strRisklevel = 12;
  if (has_strrisklevel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrisklevel().data(), this->strrisklevel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->strrisklevel(), output);
  }
  
  // optional string wordTemplate = 13;
  if (has_wordtemplate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wordtemplate().data(), this->wordtemplate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->wordtemplate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Product::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 pId = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }
  
  // optional string productType = 3;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttype().data(), this->producttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->producttype(), target);
  }
  
  // optional string strName = 4;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strname(), target);
  }
  
  // optional string strCode = 5;
  if (has_strcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcode().data(), this->strcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strcode(), target);
  }
  
  // optional string strEndDate = 6;
  if (has_strenddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strenddate().data(), this->strenddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strenddate(), target);
  }
  
  // optional int32 guaranteeType = 7;
  if (has_guaranteetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->guaranteetype(), target);
  }
  
  // optional int32 guaranteeYears = 8;
  if (has_guaranteeyears()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->guaranteeyears(), target);
  }
  
  // optional int32 saveType = 9;
  if (has_savetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->savetype(), target);
  }
  
  // optional int32 saveYears = 10;
  if (has_saveyears()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->saveyears(), target);
  }
  
  // optional string strGrade = 11;
  if (has_strgrade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strgrade().data(), this->strgrade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->strgrade(), target);
  }
  
  // optional string strRisklevel = 12;
  if (has_strrisklevel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrisklevel().data(), this->strrisklevel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->strrisklevel(), target);
  }
  
  // optional string wordTemplate = 13;
  if (has_wordtemplate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wordtemplate().data(), this->wordtemplate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->wordtemplate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Product::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 pId = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // optional string productType = 3;
    if (has_producttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->producttype());
    }
    
    // optional string strName = 4;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }
    
    // optional string strCode = 5;
    if (has_strcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcode());
    }
    
    // optional string strEndDate = 6;
    if (has_strenddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strenddate());
    }
    
    // optional int32 guaranteeType = 7;
    if (has_guaranteetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guaranteetype());
    }
    
    // optional int32 guaranteeYears = 8;
    if (has_guaranteeyears()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guaranteeyears());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 saveType = 9;
    if (has_savetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->savetype());
    }
    
    // optional int32 saveYears = 10;
    if (has_saveyears()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->saveyears());
    }
    
    // optional string strGrade = 11;
    if (has_strgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strgrade());
    }
    
    // optional string strRisklevel = 12;
    if (has_strrisklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strrisklevel());
    }
    
    // optional string wordTemplate = 13;
    if (has_wordtemplate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wordtemplate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Product::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Product* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Product*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Product::MergeFrom(const Product& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_producttype()) {
      set_producttype(from.producttype());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_strcode()) {
      set_strcode(from.strcode());
    }
    if (from.has_strenddate()) {
      set_strenddate(from.strenddate());
    }
    if (from.has_guaranteetype()) {
      set_guaranteetype(from.guaranteetype());
    }
    if (from.has_guaranteeyears()) {
      set_guaranteeyears(from.guaranteeyears());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_savetype()) {
      set_savetype(from.savetype());
    }
    if (from.has_saveyears()) {
      set_saveyears(from.saveyears());
    }
    if (from.has_strgrade()) {
      set_strgrade(from.strgrade());
    }
    if (from.has_strrisklevel()) {
      set_strrisklevel(from.strrisklevel());
    }
    if (from.has_wordtemplate()) {
      set_wordtemplate(from.wordtemplate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Product::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Product::CopyFrom(const Product& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Product::IsInitialized() const {
  
  return true;
}

void Product::Swap(Product* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pid_, other->pid_);
    std::swap(producttype_, other->producttype_);
    std::swap(strname_, other->strname_);
    std::swap(strcode_, other->strcode_);
    std::swap(strenddate_, other->strenddate_);
    std::swap(guaranteetype_, other->guaranteetype_);
    std::swap(guaranteeyears_, other->guaranteeyears_);
    std::swap(savetype_, other->savetype_);
    std::swap(saveyears_, other->saveyears_);
    std::swap(strgrade_, other->strgrade_);
    std::swap(strrisklevel_, other->strrisklevel_);
    std::swap(wordtemplate_, other->wordtemplate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Product::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Product_descriptor_;
  metadata.reflection = Product_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductList::kCmdFieldNumber;
const int ProductList::kResultFieldNumber;
const int ProductList::kResultInfoFieldNumber;
const int ProductList::kProductFieldNumber;
#endif  // !_MSC_VER

ProductList::ProductList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductList::InitAsDefaultInstance() {
}

ProductList::ProductList(const ProductList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  result_ = 0;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductList::~ProductList() {
  SharedDtor();
}

void ProductList::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (this != default_instance_) {
  }
}

void ProductList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductList_descriptor_;
}

const ProductList& ProductList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fProduct_2eproto();  return *default_instance_;
}

ProductList* ProductList::default_instance_ = NULL;

ProductList* ProductList::New() const {
  return new ProductList;
}

void ProductList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    result_ = 0;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
  }
  product_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }
      
      // optional string result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_product;
        break;
      }
      
      // repeated .cms_8120.Product product = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_product()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_product;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result_info(), output);
  }
  
  // repeated .cms_8120.Product product = 4;
  for (int i = 0; i < this->product_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->product(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_info(), target);
  }
  
  // repeated .cms_8120.Product product = 4;
  for (int i = 0; i < this->product_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->product(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }
    
  }
  // repeated .cms_8120.Product product = 4;
  total_size += 1 * this->product_size();
  for (int i = 0; i < this->product_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->product(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductList::MergeFrom(const ProductList& from) {
  GOOGLE_CHECK_NE(&from, this);
  product_.MergeFrom(from.product_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductList::CopyFrom(const ProductList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductList::IsInitialized() const {
  
  return true;
}

void ProductList::Swap(ProductList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(result_, other->result_);
    std::swap(result_info_, other->result_info_);
    product_.Swap(&other->product_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductList_descriptor_;
  metadata.reflection = ProductList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductInfo::kCmdFieldNumber;
const int ProductInfo::kResultFieldNumber;
const int ProductInfo::kResultInfoFieldNumber;
const int ProductInfo::kProductFieldNumber;
#endif  // !_MSC_VER

ProductInfo::ProductInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductInfo::InitAsDefaultInstance() {
  product_ = const_cast< ::cms_8120::Product*>(&::cms_8120::Product::default_instance());
}

ProductInfo::ProductInfo(const ProductInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  result_ = 0;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  product_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductInfo::~ProductInfo() {
  SharedDtor();
}

void ProductInfo::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (this != default_instance_) {
    delete product_;
  }
}

void ProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductInfo_descriptor_;
}

const ProductInfo& ProductInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fProduct_2eproto();  return *default_instance_;
}

ProductInfo* ProductInfo::default_instance_ = NULL;

ProductInfo* ProductInfo::New() const {
  return new ProductInfo;
}

void ProductInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    result_ = 0;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
    if (has_product()) {
      if (product_ != NULL) product_->::cms_8120::Product::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }
      
      // optional string result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_product;
        break;
      }
      
      // optional .cms_8120.Product product = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result_info(), output);
  }
  
  // optional .cms_8120.Product product = 4;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->product(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_info(), target);
  }
  
  // optional .cms_8120.Product product = 4;
  if (has_product()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->product(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }
    
    // optional .cms_8120.Product product = 4;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductInfo::MergeFrom(const ProductInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
    if (from.has_product()) {
      mutable_product()->::cms_8120::Product::MergeFrom(from.product());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductInfo::CopyFrom(const ProductInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductInfo::IsInitialized() const {
  
  return true;
}

void ProductInfo::Swap(ProductInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(result_, other->result_);
    std::swap(result_info_, other->result_info_);
    std::swap(product_, other->product_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductInfo_descriptor_;
  metadata.reflection = ProductInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
