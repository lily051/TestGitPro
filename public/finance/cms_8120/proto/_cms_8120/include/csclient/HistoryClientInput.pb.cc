// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csclient/HistoryClientInput.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* HisClientInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HisClientInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHisClientInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHisClientInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCHisClientInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCHisClientInput_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_csclient_2fHistoryClientInput_2eproto() {
  protobuf_AddDesc_csclient_2fHistoryClientInput_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "csclient/HistoryClientInput.proto");
  GOOGLE_CHECK(file != NULL);
  HisClientInput_descriptor_ = file->message_type(0);
  static const int HisClientInput_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, nproid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, inputregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, inputregioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, inputregionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, strcreditphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, creditid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, creditcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, producttypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, producttypename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, productname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, productcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, strgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, strbuymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, inputuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, businesstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, picturestrart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, pictureend_),
  };
  HisClientInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HisClientInput_descriptor_,
      HisClientInput::default_instance_,
      HisClientInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HisClientInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HisClientInput));
  ReqHisClientInput_descriptor_ = file->message_type(1);
  static const int ReqHisClientInput_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHisClientInput, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHisClientInput, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHisClientInput, enddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHisClientInput, custname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHisClientInput, nproid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHisClientInput, inputuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHisClientInput, pageno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHisClientInput, pagesize_),
  };
  ReqHisClientInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHisClientInput_descriptor_,
      ReqHisClientInput::default_instance_,
      ReqHisClientInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHisClientInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHisClientInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHisClientInput));
  RspCHisClientInput_descriptor_ = file->message_type(2);
  static const int RspCHisClientInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCHisClientInput, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCHisClientInput, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCHisClientInput, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCHisClientInput, hisclientinput_),
  };
  RspCHisClientInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCHisClientInput_descriptor_,
      RspCHisClientInput::default_instance_,
      RspCHisClientInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCHisClientInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCHisClientInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCHisClientInput));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_csclient_2fHistoryClientInput_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HisClientInput_descriptor_, &HisClientInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHisClientInput_descriptor_, &ReqHisClientInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCHisClientInput_descriptor_, &RspCHisClientInput::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_csclient_2fHistoryClientInput_2eproto() {
  delete HisClientInput::default_instance_;
  delete HisClientInput_reflection_;
  delete ReqHisClientInput::default_instance_;
  delete ReqHisClientInput_reflection_;
  delete RspCHisClientInput::default_instance_;
  delete RspCHisClientInput_reflection_;
}

void protobuf_AddDesc_csclient_2fHistoryClientInput_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!csclient/HistoryClientInput.proto\022\010cms"
    "_8120\"\257\003\n\016HisClientInput\022\016\n\006nProId\030\001 \001(\t"
    "\022\025\n\rinputRegionId\030\002 \001(\005\022\027\n\017inputRegionCo"
    "de\030\003 \001(\t\022\027\n\017inputRegionName\030\005 \001(\t\022\014\n\004nam"
    "e\030\006 \001(\t\022\026\n\016strCreditPhone\030\007 \001(\t\022\020\n\010credi"
    "tId\030\010 \001(\005\022\022\n\ncreditCode\030\t \001(\t\022\025\n\rproduct"
    "TypeId\030\n \001(\005\022\027\n\017productTypeName\030\013 \001(\t\022\021\n"
    "\tproductId\030\014 \001(\005\022\023\n\013productName\030\r \001(\t\022\023\n"
    "\013productCode\030\016 \001(\t\022\020\n\010strGrade\030\017 \001(\t\022\023\n\013"
    "strBuyMoney\030\020 \001(\t\022\021\n\tinputUser\030\021 \001(\005\022\024\n\014"
    "businessTime\030\022 \001(\t\022\020\n\010clientId\030\023 \001(\005\022\025\n\r"
    "pictureStrart\030\024 \001(\t\022\022\n\npictureEnd\030\025 \001(\t\""
    "\233\001\n\021ReqHisClientInput\022\013\n\003cmd\030\001 \001(\005\022\021\n\tst"
    "artDate\030\002 \001(\t\022\017\n\007endDate\030\003 \001(\t\022\020\n\010custNa"
    "me\030\004 \001(\t\022\016\n\006nproId\030\005 \001(\t\022\021\n\tinputUser\030\006 "
    "\001(\005\022\016\n\006pageNo\030\007 \001(\005\022\020\n\010pageSize\030\010 \001(\005\"x\n"
    "\022RspCHisClientInput\022\013\n\003cmd\030\001 \001(\005\022\016\n\006resu"
    "lt\030\002 \001(\005\022\023\n\013result_info\030\003 \001(\t\0220\n\016hisClie"
    "ntInput\030\004 \003(\0132\030.cms_8120.HisClientInput2"
    "i\n\025HisClientInputService\022P\n\023QueryHisClie"
    "ntInput\022\033.cms_8120.ReqHisClientInput\032\034.c"
    "ms_8120.RspCHisClientInputBH\n*com.hikvis"
    "ion.finance.fms.cms.hpp.csclientB\027Histor"
    "yClientInputProto\210\001\001", 940);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "csclient/HistoryClientInput.proto", &protobuf_RegisterTypes);
  HisClientInput::default_instance_ = new HisClientInput();
  ReqHisClientInput::default_instance_ = new ReqHisClientInput();
  RspCHisClientInput::default_instance_ = new RspCHisClientInput();
  HisClientInput::default_instance_->InitAsDefaultInstance();
  ReqHisClientInput::default_instance_->InitAsDefaultInstance();
  RspCHisClientInput::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_csclient_2fHistoryClientInput_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_csclient_2fHistoryClientInput_2eproto {
  StaticDescriptorInitializer_csclient_2fHistoryClientInput_2eproto() {
    protobuf_AddDesc_csclient_2fHistoryClientInput_2eproto();
  }
} static_descriptor_initializer_csclient_2fHistoryClientInput_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int HisClientInput::kNProIdFieldNumber;
const int HisClientInput::kInputRegionIdFieldNumber;
const int HisClientInput::kInputRegionCodeFieldNumber;
const int HisClientInput::kInputRegionNameFieldNumber;
const int HisClientInput::kNameFieldNumber;
const int HisClientInput::kStrCreditPhoneFieldNumber;
const int HisClientInput::kCreditIdFieldNumber;
const int HisClientInput::kCreditCodeFieldNumber;
const int HisClientInput::kProductTypeIdFieldNumber;
const int HisClientInput::kProductTypeNameFieldNumber;
const int HisClientInput::kProductIdFieldNumber;
const int HisClientInput::kProductNameFieldNumber;
const int HisClientInput::kProductCodeFieldNumber;
const int HisClientInput::kStrGradeFieldNumber;
const int HisClientInput::kStrBuyMoneyFieldNumber;
const int HisClientInput::kInputUserFieldNumber;
const int HisClientInput::kBusinessTimeFieldNumber;
const int HisClientInput::kClientIdFieldNumber;
const int HisClientInput::kPictureStrartFieldNumber;
const int HisClientInput::kPictureEndFieldNumber;
#endif  // !_MSC_VER

HisClientInput::HisClientInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HisClientInput::InitAsDefaultInstance() {
}

HisClientInput::HisClientInput(const HisClientInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HisClientInput::SharedCtor() {
  _cached_size_ = 0;
  nproid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inputregionid_ = 0;
  inputregioncode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inputregionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcreditphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creditid_ = 0;
  creditcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  producttypeid_ = 0;
  producttypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = 0;
  productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strgrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strbuymoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inputuser_ = 0;
  businesstime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = 0;
  picturestrart_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pictureend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HisClientInput::~HisClientInput() {
  SharedDtor();
}

void HisClientInput::SharedDtor() {
  if (nproid_ != &::google::protobuf::internal::kEmptyString) {
    delete nproid_;
  }
  if (inputregioncode_ != &::google::protobuf::internal::kEmptyString) {
    delete inputregioncode_;
  }
  if (inputregionname_ != &::google::protobuf::internal::kEmptyString) {
    delete inputregionname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (strcreditphone_ != &::google::protobuf::internal::kEmptyString) {
    delete strcreditphone_;
  }
  if (creditcode_ != &::google::protobuf::internal::kEmptyString) {
    delete creditcode_;
  }
  if (producttypename_ != &::google::protobuf::internal::kEmptyString) {
    delete producttypename_;
  }
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    delete productname_;
  }
  if (productcode_ != &::google::protobuf::internal::kEmptyString) {
    delete productcode_;
  }
  if (strgrade_ != &::google::protobuf::internal::kEmptyString) {
    delete strgrade_;
  }
  if (strbuymoney_ != &::google::protobuf::internal::kEmptyString) {
    delete strbuymoney_;
  }
  if (businesstime_ != &::google::protobuf::internal::kEmptyString) {
    delete businesstime_;
  }
  if (picturestrart_ != &::google::protobuf::internal::kEmptyString) {
    delete picturestrart_;
  }
  if (pictureend_ != &::google::protobuf::internal::kEmptyString) {
    delete pictureend_;
  }
  if (this != default_instance_) {
  }
}

void HisClientInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HisClientInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HisClientInput_descriptor_;
}

const HisClientInput& HisClientInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fHistoryClientInput_2eproto();  return *default_instance_;
}

HisClientInput* HisClientInput::default_instance_ = NULL;

HisClientInput* HisClientInput::New() const {
  return new HisClientInput;
}

void HisClientInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nproid()) {
      if (nproid_ != &::google::protobuf::internal::kEmptyString) {
        nproid_->clear();
      }
    }
    inputregionid_ = 0;
    if (has_inputregioncode()) {
      if (inputregioncode_ != &::google::protobuf::internal::kEmptyString) {
        inputregioncode_->clear();
      }
    }
    if (has_inputregionname()) {
      if (inputregionname_ != &::google::protobuf::internal::kEmptyString) {
        inputregionname_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_strcreditphone()) {
      if (strcreditphone_ != &::google::protobuf::internal::kEmptyString) {
        strcreditphone_->clear();
      }
    }
    creditid_ = 0;
    if (has_creditcode()) {
      if (creditcode_ != &::google::protobuf::internal::kEmptyString) {
        creditcode_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    producttypeid_ = 0;
    if (has_producttypename()) {
      if (producttypename_ != &::google::protobuf::internal::kEmptyString) {
        producttypename_->clear();
      }
    }
    productid_ = 0;
    if (has_productname()) {
      if (productname_ != &::google::protobuf::internal::kEmptyString) {
        productname_->clear();
      }
    }
    if (has_productcode()) {
      if (productcode_ != &::google::protobuf::internal::kEmptyString) {
        productcode_->clear();
      }
    }
    if (has_strgrade()) {
      if (strgrade_ != &::google::protobuf::internal::kEmptyString) {
        strgrade_->clear();
      }
    }
    if (has_strbuymoney()) {
      if (strbuymoney_ != &::google::protobuf::internal::kEmptyString) {
        strbuymoney_->clear();
      }
    }
    inputuser_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_businesstime()) {
      if (businesstime_ != &::google::protobuf::internal::kEmptyString) {
        businesstime_->clear();
      }
    }
    clientid_ = 0;
    if (has_picturestrart()) {
      if (picturestrart_ != &::google::protobuf::internal::kEmptyString) {
        picturestrart_->clear();
      }
    }
    if (has_pictureend()) {
      if (pictureend_ != &::google::protobuf::internal::kEmptyString) {
        pictureend_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HisClientInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nProId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nproid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nproid().data(), this->nproid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inputRegionId;
        break;
      }
      
      // optional int32 inputRegionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputRegionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputregionid_)));
          set_has_inputregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inputRegionCode;
        break;
      }
      
      // optional string inputRegionCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputRegionCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputregioncode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inputregioncode().data(), this->inputregioncode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_inputRegionName;
        break;
      }
      
      // optional string inputRegionName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputRegionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputregionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inputregionname().data(), this->inputregionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }
      
      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strCreditPhone;
        break;
      }
      
      // optional string strCreditPhone = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCreditPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcreditphone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcreditphone().data(), this->strcreditphone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_creditId;
        break;
      }
      
      // optional int32 creditId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creditId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creditid_)));
          set_has_creditid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_creditCode;
        break;
      }
      
      // optional string creditCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creditCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creditcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creditcode().data(), this->creditcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_productTypeId;
        break;
      }
      
      // optional int32 productTypeId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productTypeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &producttypeid_)));
          set_has_producttypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_productTypeName;
        break;
      }
      
      // optional string productTypeName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productTypeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producttypename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->producttypename().data(), this->producttypename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_productId;
        break;
      }
      
      // optional int32 productId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_productName;
        break;
      }
      
      // optional string productName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productname().data(), this->productname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_productCode;
        break;
      }
      
      // optional string productCode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productcode().data(), this->productcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_strGrade;
        break;
      }
      
      // optional string strGrade = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strGrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strgrade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strgrade().data(), this->strgrade().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_strBuyMoney;
        break;
      }
      
      // optional string strBuyMoney = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strBuyMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strbuymoney()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strbuymoney().data(), this->strbuymoney().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_inputUser;
        break;
      }
      
      // optional int32 inputUser = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputuser_)));
          set_has_inputuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_businessTime;
        break;
      }
      
      // optional string businessTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_businessTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businesstime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->businesstime().data(), this->businesstime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_clientId;
        break;
      }
      
      // optional int32 clientId = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_pictureStrart;
        break;
      }
      
      // optional string pictureStrart = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pictureStrart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picturestrart()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picturestrart().data(), this->picturestrart().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_pictureEnd;
        break;
      }
      
      // optional string pictureEnd = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pictureEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pictureend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pictureend().data(), this->pictureend().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HisClientInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nProId = 1;
  if (has_nproid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nproid().data(), this->nproid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nproid(), output);
  }
  
  // optional int32 inputRegionId = 2;
  if (has_inputregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inputregionid(), output);
  }
  
  // optional string inputRegionCode = 3;
  if (has_inputregioncode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputregioncode().data(), this->inputregioncode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->inputregioncode(), output);
  }
  
  // optional string inputRegionName = 5;
  if (has_inputregionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputregionname().data(), this->inputregionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->inputregionname(), output);
  }
  
  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }
  
  // optional string strCreditPhone = 7;
  if (has_strcreditphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcreditphone().data(), this->strcreditphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strcreditphone(), output);
  }
  
  // optional int32 creditId = 8;
  if (has_creditid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->creditid(), output);
  }
  
  // optional string creditCode = 9;
  if (has_creditcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creditcode().data(), this->creditcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->creditcode(), output);
  }
  
  // optional int32 productTypeId = 10;
  if (has_producttypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->producttypeid(), output);
  }
  
  // optional string productTypeName = 11;
  if (has_producttypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttypename().data(), this->producttypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->producttypename(), output);
  }
  
  // optional int32 productId = 12;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->productid(), output);
  }
  
  // optional string productName = 13;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->productname(), output);
  }
  
  // optional string productCode = 14;
  if (has_productcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productcode().data(), this->productcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->productcode(), output);
  }
  
  // optional string strGrade = 15;
  if (has_strgrade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strgrade().data(), this->strgrade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->strgrade(), output);
  }
  
  // optional string strBuyMoney = 16;
  if (has_strbuymoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbuymoney().data(), this->strbuymoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->strbuymoney(), output);
  }
  
  // optional int32 inputUser = 17;
  if (has_inputuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->inputuser(), output);
  }
  
  // optional string businessTime = 18;
  if (has_businesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businesstime().data(), this->businesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->businesstime(), output);
  }
  
  // optional int32 clientId = 19;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->clientid(), output);
  }
  
  // optional string pictureStrart = 20;
  if (has_picturestrart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picturestrart().data(), this->picturestrart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->picturestrart(), output);
  }
  
  // optional string pictureEnd = 21;
  if (has_pictureend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pictureend().data(), this->pictureend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->pictureend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HisClientInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nProId = 1;
  if (has_nproid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nproid().data(), this->nproid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nproid(), target);
  }
  
  // optional int32 inputRegionId = 2;
  if (has_inputregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inputregionid(), target);
  }
  
  // optional string inputRegionCode = 3;
  if (has_inputregioncode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputregioncode().data(), this->inputregioncode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->inputregioncode(), target);
  }
  
  // optional string inputRegionName = 5;
  if (has_inputregionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputregionname().data(), this->inputregionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->inputregionname(), target);
  }
  
  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }
  
  // optional string strCreditPhone = 7;
  if (has_strcreditphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcreditphone().data(), this->strcreditphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strcreditphone(), target);
  }
  
  // optional int32 creditId = 8;
  if (has_creditid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->creditid(), target);
  }
  
  // optional string creditCode = 9;
  if (has_creditcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creditcode().data(), this->creditcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->creditcode(), target);
  }
  
  // optional int32 productTypeId = 10;
  if (has_producttypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->producttypeid(), target);
  }
  
  // optional string productTypeName = 11;
  if (has_producttypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttypename().data(), this->producttypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->producttypename(), target);
  }
  
  // optional int32 productId = 12;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->productid(), target);
  }
  
  // optional string productName = 13;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->productname(), target);
  }
  
  // optional string productCode = 14;
  if (has_productcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productcode().data(), this->productcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->productcode(), target);
  }
  
  // optional string strGrade = 15;
  if (has_strgrade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strgrade().data(), this->strgrade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->strgrade(), target);
  }
  
  // optional string strBuyMoney = 16;
  if (has_strbuymoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbuymoney().data(), this->strbuymoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->strbuymoney(), target);
  }
  
  // optional int32 inputUser = 17;
  if (has_inputuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->inputuser(), target);
  }
  
  // optional string businessTime = 18;
  if (has_businesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businesstime().data(), this->businesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->businesstime(), target);
  }
  
  // optional int32 clientId = 19;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->clientid(), target);
  }
  
  // optional string pictureStrart = 20;
  if (has_picturestrart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picturestrart().data(), this->picturestrart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->picturestrart(), target);
  }
  
  // optional string pictureEnd = 21;
  if (has_pictureend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pictureend().data(), this->pictureend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->pictureend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HisClientInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nProId = 1;
    if (has_nproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nproid());
    }
    
    // optional int32 inputRegionId = 2;
    if (has_inputregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputregionid());
    }
    
    // optional string inputRegionCode = 3;
    if (has_inputregioncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputregioncode());
    }
    
    // optional string inputRegionName = 5;
    if (has_inputregionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputregionname());
    }
    
    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string strCreditPhone = 7;
    if (has_strcreditphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcreditphone());
    }
    
    // optional int32 creditId = 8;
    if (has_creditid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creditid());
    }
    
    // optional string creditCode = 9;
    if (has_creditcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creditcode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 productTypeId = 10;
    if (has_producttypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->producttypeid());
    }
    
    // optional string productTypeName = 11;
    if (has_producttypename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->producttypename());
    }
    
    // optional int32 productId = 12;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }
    
    // optional string productName = 13;
    if (has_productname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productname());
    }
    
    // optional string productCode = 14;
    if (has_productcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productcode());
    }
    
    // optional string strGrade = 15;
    if (has_strgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strgrade());
    }
    
    // optional string strBuyMoney = 16;
    if (has_strbuymoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strbuymoney());
    }
    
    // optional int32 inputUser = 17;
    if (has_inputuser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputuser());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string businessTime = 18;
    if (has_businesstime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->businesstime());
    }
    
    // optional int32 clientId = 19;
    if (has_clientid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientid());
    }
    
    // optional string pictureStrart = 20;
    if (has_picturestrart()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picturestrart());
    }
    
    // optional string pictureEnd = 21;
    if (has_pictureend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pictureend());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HisClientInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HisClientInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HisClientInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HisClientInput::MergeFrom(const HisClientInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nproid()) {
      set_nproid(from.nproid());
    }
    if (from.has_inputregionid()) {
      set_inputregionid(from.inputregionid());
    }
    if (from.has_inputregioncode()) {
      set_inputregioncode(from.inputregioncode());
    }
    if (from.has_inputregionname()) {
      set_inputregionname(from.inputregionname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_strcreditphone()) {
      set_strcreditphone(from.strcreditphone());
    }
    if (from.has_creditid()) {
      set_creditid(from.creditid());
    }
    if (from.has_creditcode()) {
      set_creditcode(from.creditcode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_producttypeid()) {
      set_producttypeid(from.producttypeid());
    }
    if (from.has_producttypename()) {
      set_producttypename(from.producttypename());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_productname()) {
      set_productname(from.productname());
    }
    if (from.has_productcode()) {
      set_productcode(from.productcode());
    }
    if (from.has_strgrade()) {
      set_strgrade(from.strgrade());
    }
    if (from.has_strbuymoney()) {
      set_strbuymoney(from.strbuymoney());
    }
    if (from.has_inputuser()) {
      set_inputuser(from.inputuser());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_businesstime()) {
      set_businesstime(from.businesstime());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_picturestrart()) {
      set_picturestrart(from.picturestrart());
    }
    if (from.has_pictureend()) {
      set_pictureend(from.pictureend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HisClientInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HisClientInput::CopyFrom(const HisClientInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HisClientInput::IsInitialized() const {
  
  return true;
}

void HisClientInput::Swap(HisClientInput* other) {
  if (other != this) {
    std::swap(nproid_, other->nproid_);
    std::swap(inputregionid_, other->inputregionid_);
    std::swap(inputregioncode_, other->inputregioncode_);
    std::swap(inputregionname_, other->inputregionname_);
    std::swap(name_, other->name_);
    std::swap(strcreditphone_, other->strcreditphone_);
    std::swap(creditid_, other->creditid_);
    std::swap(creditcode_, other->creditcode_);
    std::swap(producttypeid_, other->producttypeid_);
    std::swap(producttypename_, other->producttypename_);
    std::swap(productid_, other->productid_);
    std::swap(productname_, other->productname_);
    std::swap(productcode_, other->productcode_);
    std::swap(strgrade_, other->strgrade_);
    std::swap(strbuymoney_, other->strbuymoney_);
    std::swap(inputuser_, other->inputuser_);
    std::swap(businesstime_, other->businesstime_);
    std::swap(clientid_, other->clientid_);
    std::swap(picturestrart_, other->picturestrart_);
    std::swap(pictureend_, other->pictureend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HisClientInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HisClientInput_descriptor_;
  metadata.reflection = HisClientInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqHisClientInput::kCmdFieldNumber;
const int ReqHisClientInput::kStartDateFieldNumber;
const int ReqHisClientInput::kEndDateFieldNumber;
const int ReqHisClientInput::kCustNameFieldNumber;
const int ReqHisClientInput::kNproIdFieldNumber;
const int ReqHisClientInput::kInputUserFieldNumber;
const int ReqHisClientInput::kPageNoFieldNumber;
const int ReqHisClientInput::kPageSizeFieldNumber;
#endif  // !_MSC_VER

ReqHisClientInput::ReqHisClientInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHisClientInput::InitAsDefaultInstance() {
}

ReqHisClientInput::ReqHisClientInput(const ReqHisClientInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHisClientInput::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  startdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nproid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inputuser_ = 0;
  pageno_ = 0;
  pagesize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHisClientInput::~ReqHisClientInput() {
  SharedDtor();
}

void ReqHisClientInput::SharedDtor() {
  if (startdate_ != &::google::protobuf::internal::kEmptyString) {
    delete startdate_;
  }
  if (enddate_ != &::google::protobuf::internal::kEmptyString) {
    delete enddate_;
  }
  if (custname_ != &::google::protobuf::internal::kEmptyString) {
    delete custname_;
  }
  if (nproid_ != &::google::protobuf::internal::kEmptyString) {
    delete nproid_;
  }
  if (this != default_instance_) {
  }
}

void ReqHisClientInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHisClientInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHisClientInput_descriptor_;
}

const ReqHisClientInput& ReqHisClientInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fHistoryClientInput_2eproto();  return *default_instance_;
}

ReqHisClientInput* ReqHisClientInput::default_instance_ = NULL;

ReqHisClientInput* ReqHisClientInput::New() const {
  return new ReqHisClientInput;
}

void ReqHisClientInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_startdate()) {
      if (startdate_ != &::google::protobuf::internal::kEmptyString) {
        startdate_->clear();
      }
    }
    if (has_enddate()) {
      if (enddate_ != &::google::protobuf::internal::kEmptyString) {
        enddate_->clear();
      }
    }
    if (has_custname()) {
      if (custname_ != &::google::protobuf::internal::kEmptyString) {
        custname_->clear();
      }
    }
    if (has_nproid()) {
      if (nproid_ != &::google::protobuf::internal::kEmptyString) {
        nproid_->clear();
      }
    }
    inputuser_ = 0;
    pageno_ = 0;
    pagesize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHisClientInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_startDate;
        break;
      }
      
      // optional string startDate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->startdate().data(), this->startdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_endDate;
        break;
      }
      
      // optional string endDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enddate().data(), this->enddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_custName;
        break;
      }
      
      // optional string custName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custname().data(), this->custname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nproId;
        break;
      }
      
      // optional string nproId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nproId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nproid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nproid().data(), this->nproid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_inputUser;
        break;
      }
      
      // optional int32 inputUser = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputuser_)));
          set_has_inputuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pageNo;
        break;
      }
      
      // optional int32 pageNo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pageno_)));
          set_has_pageno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pageSize;
        break;
      }
      
      // optional int32 pageSize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqHisClientInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional string startDate = 2;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->startdate(), output);
  }
  
  // optional string endDate = 3;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->enddate(), output);
  }
  
  // optional string custName = 4;
  if (has_custname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custname().data(), this->custname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->custname(), output);
  }
  
  // optional string nproId = 5;
  if (has_nproid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nproid().data(), this->nproid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nproid(), output);
  }
  
  // optional int32 inputUser = 6;
  if (has_inputuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->inputuser(), output);
  }
  
  // optional int32 pageNo = 7;
  if (has_pageno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pageno(), output);
  }
  
  // optional int32 pageSize = 8;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pagesize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHisClientInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional string startDate = 2;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->startdate(), target);
  }
  
  // optional string endDate = 3;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->enddate(), target);
  }
  
  // optional string custName = 4;
  if (has_custname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custname().data(), this->custname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->custname(), target);
  }
  
  // optional string nproId = 5;
  if (has_nproid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nproid().data(), this->nproid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nproid(), target);
  }
  
  // optional int32 inputUser = 6;
  if (has_inputuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->inputuser(), target);
  }
  
  // optional int32 pageNo = 7;
  if (has_pageno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pageno(), target);
  }
  
  // optional int32 pageSize = 8;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pagesize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHisClientInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional string startDate = 2;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startdate());
    }
    
    // optional string endDate = 3;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enddate());
    }
    
    // optional string custName = 4;
    if (has_custname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custname());
    }
    
    // optional string nproId = 5;
    if (has_nproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nproid());
    }
    
    // optional int32 inputUser = 6;
    if (has_inputuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputuser());
    }
    
    // optional int32 pageNo = 7;
    if (has_pageno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pageno());
    }
    
    // optional int32 pageSize = 8;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagesize());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHisClientInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHisClientInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHisClientInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHisClientInput::MergeFrom(const ReqHisClientInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
    if (from.has_enddate()) {
      set_enddate(from.enddate());
    }
    if (from.has_custname()) {
      set_custname(from.custname());
    }
    if (from.has_nproid()) {
      set_nproid(from.nproid());
    }
    if (from.has_inputuser()) {
      set_inputuser(from.inputuser());
    }
    if (from.has_pageno()) {
      set_pageno(from.pageno());
    }
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHisClientInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHisClientInput::CopyFrom(const ReqHisClientInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHisClientInput::IsInitialized() const {
  
  return true;
}

void ReqHisClientInput::Swap(ReqHisClientInput* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(startdate_, other->startdate_);
    std::swap(enddate_, other->enddate_);
    std::swap(custname_, other->custname_);
    std::swap(nproid_, other->nproid_);
    std::swap(inputuser_, other->inputuser_);
    std::swap(pageno_, other->pageno_);
    std::swap(pagesize_, other->pagesize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHisClientInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHisClientInput_descriptor_;
  metadata.reflection = ReqHisClientInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspCHisClientInput::kCmdFieldNumber;
const int RspCHisClientInput::kResultFieldNumber;
const int RspCHisClientInput::kResultInfoFieldNumber;
const int RspCHisClientInput::kHisClientInputFieldNumber;
#endif  // !_MSC_VER

RspCHisClientInput::RspCHisClientInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspCHisClientInput::InitAsDefaultInstance() {
}

RspCHisClientInput::RspCHisClientInput(const RspCHisClientInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspCHisClientInput::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  result_ = 0;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCHisClientInput::~RspCHisClientInput() {
  SharedDtor();
}

void RspCHisClientInput::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (this != default_instance_) {
  }
}

void RspCHisClientInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCHisClientInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCHisClientInput_descriptor_;
}

const RspCHisClientInput& RspCHisClientInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fHistoryClientInput_2eproto();  return *default_instance_;
}

RspCHisClientInput* RspCHisClientInput::default_instance_ = NULL;

RspCHisClientInput* RspCHisClientInput::New() const {
  return new RspCHisClientInput;
}

void RspCHisClientInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    result_ = 0;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
  }
  hisclientinput_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCHisClientInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }
      
      // optional string result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hisClientInput;
        break;
      }
      
      // repeated .cms_8120.HisClientInput hisClientInput = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hisClientInput:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hisclientinput()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hisClientInput;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspCHisClientInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result_info(), output);
  }
  
  // repeated .cms_8120.HisClientInput hisClientInput = 4;
  for (int i = 0; i < this->hisclientinput_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hisclientinput(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspCHisClientInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_info(), target);
  }
  
  // repeated .cms_8120.HisClientInput hisClientInput = 4;
  for (int i = 0; i < this->hisclientinput_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hisclientinput(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspCHisClientInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }
    
  }
  // repeated .cms_8120.HisClientInput hisClientInput = 4;
  total_size += 1 * this->hisclientinput_size();
  for (int i = 0; i < this->hisclientinput_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hisclientinput(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCHisClientInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCHisClientInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCHisClientInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCHisClientInput::MergeFrom(const RspCHisClientInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  hisclientinput_.MergeFrom(from.hisclientinput_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCHisClientInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCHisClientInput::CopyFrom(const RspCHisClientInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCHisClientInput::IsInitialized() const {
  
  return true;
}

void RspCHisClientInput::Swap(RspCHisClientInput* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(result_, other->result_);
    std::swap(result_info_, other->result_info_);
    hisclientinput_.Swap(&other->hisclientinput_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCHisClientInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCHisClientInput_descriptor_;
  metadata.reflection = RspCHisClientInput_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
