// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csclient/WorkState.proto

#ifndef PROTOBUF_csclient_2fWorkState_2eproto__INCLUDED
#define PROTOBUF_csclient_2fWorkState_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "type/cmd.pb.h"
#include "type/ModuleType.pb.h"
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_csclient_2fWorkState_2eproto();
void protobuf_AssignDesc_csclient_2fWorkState_2eproto();
void protobuf_ShutdownFile_csclient_2fWorkState_2eproto();

class WorkState;
class WWorkState;
class WorkStateList;
class UserLoginInfo;
class UserLoginInfoList;

enum INTERVAL_TIME {
  BEAT_TIME_INTERVAL = 30,
  SYNC_TIME_INTERVAL = 3600
};
bool INTERVAL_TIME_IsValid(int value);
const INTERVAL_TIME INTERVAL_TIME_MIN = BEAT_TIME_INTERVAL;
const INTERVAL_TIME INTERVAL_TIME_MAX = SYNC_TIME_INTERVAL;
const int INTERVAL_TIME_ARRAYSIZE = INTERVAL_TIME_MAX + 1;

const ::google::protobuf::EnumDescriptor* INTERVAL_TIME_descriptor();
inline const ::std::string& INTERVAL_TIME_Name(INTERVAL_TIME value) {
  return ::google::protobuf::internal::NameOfEnum(
    INTERVAL_TIME_descriptor(), value);
}
inline bool INTERVAL_TIME_Parse(
    const ::std::string& name, INTERVAL_TIME* value) {
  return ::google::protobuf::internal::ParseNamedEnum<INTERVAL_TIME>(
    INTERVAL_TIME_descriptor(), name, value);
}
// ===================================================================

class WorkState : public ::google::protobuf::Message {
 public:
  WorkState();
  virtual ~WorkState();
  
  WorkState(const WorkState& from);
  
  inline WorkState& operator=(const WorkState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkState& default_instance();
  
  void Swap(WorkState* other);
  
  // implements Message ----------------------------------------------
  
  WorkState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkState& from);
  void MergeFrom(const WorkState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 module_type = 2;
  inline bool has_module_type() const;
  inline void clear_module_type();
  static const int kModuleTypeFieldNumber = 2;
  inline ::google::protobuf::int32 module_type() const;
  inline void set_module_type(::google::protobuf::int32 value);
  
  // optional int32 user_or_server_id = 3;
  inline bool has_user_or_server_id() const;
  inline void clear_user_or_server_id();
  static const int kUserOrServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_or_server_id() const;
  inline void set_user_or_server_id(::google::protobuf::int32 value);
  
  // optional string login_time = 4;
  inline bool has_login_time() const;
  inline void clear_login_time();
  static const int kLoginTimeFieldNumber = 4;
  inline const ::std::string& login_time() const;
  inline void set_login_time(const ::std::string& value);
  inline void set_login_time(const char* value);
  inline void set_login_time(const char* value, size_t size);
  inline ::std::string* mutable_login_time();
  inline ::std::string* release_login_time();
  
  // optional string beat_time = 5;
  inline bool has_beat_time() const;
  inline void clear_beat_time();
  static const int kBeatTimeFieldNumber = 5;
  inline const ::std::string& beat_time() const;
  inline void set_beat_time(const ::std::string& value);
  inline void set_beat_time(const char* value);
  inline void set_beat_time(const char* value, size_t size);
  inline ::std::string* mutable_beat_time();
  inline ::std::string* release_beat_time();
  
  // optional string login_ip = 6;
  inline bool has_login_ip() const;
  inline void clear_login_ip();
  static const int kLoginIpFieldNumber = 6;
  inline const ::std::string& login_ip() const;
  inline void set_login_ip(const ::std::string& value);
  inline void set_login_ip(const char* value);
  inline void set_login_ip(const char* value, size_t size);
  inline ::std::string* mutable_login_ip();
  inline ::std::string* release_login_ip();
  
  // @@protoc_insertion_point(class_scope:cms_8120.WorkState)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_module_type();
  inline void clear_has_module_type();
  inline void set_has_user_or_server_id();
  inline void clear_has_user_or_server_id();
  inline void set_has_login_time();
  inline void clear_has_login_time();
  inline void set_has_beat_time();
  inline void clear_has_beat_time();
  inline void set_has_login_ip();
  inline void clear_has_login_ip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 module_type_;
  ::std::string* login_time_;
  ::std::string* beat_time_;
  ::std::string* login_ip_;
  ::google::protobuf::int32 user_or_server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_csclient_2fWorkState_2eproto();
  friend void protobuf_AssignDesc_csclient_2fWorkState_2eproto();
  friend void protobuf_ShutdownFile_csclient_2fWorkState_2eproto();
  
  void InitAsDefaultInstance();
  static WorkState* default_instance_;
};
// -------------------------------------------------------------------

class WWorkState : public ::google::protobuf::Message {
 public:
  WWorkState();
  virtual ~WWorkState();
  
  WWorkState(const WWorkState& from);
  
  inline WWorkState& operator=(const WWorkState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WWorkState& default_instance();
  
  void Swap(WWorkState* other);
  
  // implements Message ----------------------------------------------
  
  WWorkState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WWorkState& from);
  void MergeFrom(const WWorkState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 data_type = 1;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  inline ::google::protobuf::int32 data_type() const;
  inline void set_data_type(::google::protobuf::int32 value);
  
  // optional int32 module_type = 2;
  inline bool has_module_type() const;
  inline void clear_module_type();
  static const int kModuleTypeFieldNumber = 2;
  inline ::google::protobuf::int32 module_type() const;
  inline void set_module_type(::google::protobuf::int32 value);
  
  // optional int32 user_or_server_id = 3;
  inline bool has_user_or_server_id() const;
  inline void clear_user_or_server_id();
  static const int kUserOrServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_or_server_id() const;
  inline void set_user_or_server_id(::google::protobuf::int32 value);
  
  // optional string login_ip = 4;
  inline bool has_login_ip() const;
  inline void clear_login_ip();
  static const int kLoginIpFieldNumber = 4;
  inline const ::std::string& login_ip() const;
  inline void set_login_ip(const ::std::string& value);
  inline void set_login_ip(const char* value);
  inline void set_login_ip(const char* value, size_t size);
  inline ::std::string* mutable_login_ip();
  inline ::std::string* release_login_ip();
  
  // optional int32 is_first_time = 5;
  inline bool has_is_first_time() const;
  inline void clear_is_first_time();
  static const int kIsFirstTimeFieldNumber = 5;
  inline ::google::protobuf::int32 is_first_time() const;
  inline void set_is_first_time(::google::protobuf::int32 value);
  
  // optional int32 login_port = 6;
  inline bool has_login_port() const;
  inline void clear_login_port();
  static const int kLoginPortFieldNumber = 6;
  inline ::google::protobuf::int32 login_port() const;
  inline void set_login_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cms_8120.WWorkState)
 private:
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_module_type();
  inline void clear_has_module_type();
  inline void set_has_user_or_server_id();
  inline void clear_has_user_or_server_id();
  inline void set_has_login_ip();
  inline void clear_has_login_ip();
  inline void set_has_is_first_time();
  inline void clear_has_is_first_time();
  inline void set_has_login_port();
  inline void clear_has_login_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 data_type_;
  ::google::protobuf::int32 module_type_;
  ::std::string* login_ip_;
  ::google::protobuf::int32 user_or_server_id_;
  ::google::protobuf::int32 is_first_time_;
  ::google::protobuf::int32 login_port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_csclient_2fWorkState_2eproto();
  friend void protobuf_AssignDesc_csclient_2fWorkState_2eproto();
  friend void protobuf_ShutdownFile_csclient_2fWorkState_2eproto();
  
  void InitAsDefaultInstance();
  static WWorkState* default_instance_;
};
// -------------------------------------------------------------------

class WorkStateList : public ::google::protobuf::Message {
 public:
  WorkStateList();
  virtual ~WorkStateList();
  
  WorkStateList(const WorkStateList& from);
  
  inline WorkStateList& operator=(const WorkStateList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkStateList& default_instance();
  
  void Swap(WorkStateList* other);
  
  // implements Message ----------------------------------------------
  
  WorkStateList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkStateList& from);
  void MergeFrom(const WorkStateList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 data_type = 1;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  inline ::google::protobuf::int32 data_type() const;
  inline void set_data_type(::google::protobuf::int32 value);
  
  // repeated .cms_8120.WorkState work_state = 2;
  inline int work_state_size() const;
  inline void clear_work_state();
  static const int kWorkStateFieldNumber = 2;
  inline const ::cms_8120::WorkState& work_state(int index) const;
  inline ::cms_8120::WorkState* mutable_work_state(int index);
  inline ::cms_8120::WorkState* add_work_state();
  inline const ::google::protobuf::RepeatedPtrField< ::cms_8120::WorkState >&
      work_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::cms_8120::WorkState >*
      mutable_work_state();
  
  // @@protoc_insertion_point(class_scope:cms_8120.WorkStateList)
 private:
  inline void set_has_data_type();
  inline void clear_has_data_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::cms_8120::WorkState > work_state_;
  ::google::protobuf::int32 data_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_csclient_2fWorkState_2eproto();
  friend void protobuf_AssignDesc_csclient_2fWorkState_2eproto();
  friend void protobuf_ShutdownFile_csclient_2fWorkState_2eproto();
  
  void InitAsDefaultInstance();
  static WorkStateList* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginInfo : public ::google::protobuf::Message {
 public:
  UserLoginInfo();
  virtual ~UserLoginInfo();
  
  UserLoginInfo(const UserLoginInfo& from);
  
  inline UserLoginInfo& operator=(const UserLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginInfo& default_instance();
  
  void Swap(UserLoginInfo* other);
  
  // implements Message ----------------------------------------------
  
  UserLoginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginInfo& from);
  void MergeFrom(const UserLoginInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 user_or_server_id = 2;
  inline bool has_user_or_server_id() const;
  inline void clear_user_or_server_id();
  static const int kUserOrServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_or_server_id() const;
  inline void set_user_or_server_id(::google::protobuf::int32 value);
  
  // optional string login_ip = 3;
  inline bool has_login_ip() const;
  inline void clear_login_ip();
  static const int kLoginIpFieldNumber = 3;
  inline const ::std::string& login_ip() const;
  inline void set_login_ip(const ::std::string& value);
  inline void set_login_ip(const char* value);
  inline void set_login_ip(const char* value, size_t size);
  inline ::std::string* mutable_login_ip();
  inline ::std::string* release_login_ip();
  
  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cms_8120.UserLoginInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_user_or_server_id();
  inline void clear_has_user_or_server_id();
  inline void set_has_login_ip();
  inline void clear_has_login_ip();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 user_or_server_id_;
  ::std::string* login_ip_;
  ::google::protobuf::int32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_csclient_2fWorkState_2eproto();
  friend void protobuf_AssignDesc_csclient_2fWorkState_2eproto();
  friend void protobuf_ShutdownFile_csclient_2fWorkState_2eproto();
  
  void InitAsDefaultInstance();
  static UserLoginInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginInfoList : public ::google::protobuf::Message {
 public:
  UserLoginInfoList();
  virtual ~UserLoginInfoList();
  
  UserLoginInfoList(const UserLoginInfoList& from);
  
  inline UserLoginInfoList& operator=(const UserLoginInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginInfoList& default_instance();
  
  void Swap(UserLoginInfoList* other);
  
  // implements Message ----------------------------------------------
  
  UserLoginInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginInfoList& from);
  void MergeFrom(const UserLoginInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 data_type = 1;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  inline ::google::protobuf::int32 data_type() const;
  inline void set_data_type(::google::protobuf::int32 value);
  
  // repeated .cms_8120.UserLoginInfo user_login_info = 2;
  inline int user_login_info_size() const;
  inline void clear_user_login_info();
  static const int kUserLoginInfoFieldNumber = 2;
  inline const ::cms_8120::UserLoginInfo& user_login_info(int index) const;
  inline ::cms_8120::UserLoginInfo* mutable_user_login_info(int index);
  inline ::cms_8120::UserLoginInfo* add_user_login_info();
  inline const ::google::protobuf::RepeatedPtrField< ::cms_8120::UserLoginInfo >&
      user_login_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::cms_8120::UserLoginInfo >*
      mutable_user_login_info();
  
  // @@protoc_insertion_point(class_scope:cms_8120.UserLoginInfoList)
 private:
  inline void set_has_data_type();
  inline void clear_has_data_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::cms_8120::UserLoginInfo > user_login_info_;
  ::google::protobuf::int32 data_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_csclient_2fWorkState_2eproto();
  friend void protobuf_AssignDesc_csclient_2fWorkState_2eproto();
  friend void protobuf_ShutdownFile_csclient_2fWorkState_2eproto();
  
  void InitAsDefaultInstance();
  static UserLoginInfoList* default_instance_;
};
// ===================================================================


// ===================================================================

// WorkState

// optional int32 id = 1;
inline bool WorkState::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorkState::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorkState::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorkState::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 WorkState::id() const {
  return id_;
}
inline void WorkState::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 module_type = 2;
inline bool WorkState::has_module_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorkState::set_has_module_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorkState::clear_has_module_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorkState::clear_module_type() {
  module_type_ = 0;
  clear_has_module_type();
}
inline ::google::protobuf::int32 WorkState::module_type() const {
  return module_type_;
}
inline void WorkState::set_module_type(::google::protobuf::int32 value) {
  set_has_module_type();
  module_type_ = value;
}

// optional int32 user_or_server_id = 3;
inline bool WorkState::has_user_or_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorkState::set_has_user_or_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorkState::clear_has_user_or_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorkState::clear_user_or_server_id() {
  user_or_server_id_ = 0;
  clear_has_user_or_server_id();
}
inline ::google::protobuf::int32 WorkState::user_or_server_id() const {
  return user_or_server_id_;
}
inline void WorkState::set_user_or_server_id(::google::protobuf::int32 value) {
  set_has_user_or_server_id();
  user_or_server_id_ = value;
}

// optional string login_time = 4;
inline bool WorkState::has_login_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorkState::set_has_login_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorkState::clear_has_login_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorkState::clear_login_time() {
  if (login_time_ != &::google::protobuf::internal::kEmptyString) {
    login_time_->clear();
  }
  clear_has_login_time();
}
inline const ::std::string& WorkState::login_time() const {
  return *login_time_;
}
inline void WorkState::set_login_time(const ::std::string& value) {
  set_has_login_time();
  if (login_time_ == &::google::protobuf::internal::kEmptyString) {
    login_time_ = new ::std::string;
  }
  login_time_->assign(value);
}
inline void WorkState::set_login_time(const char* value) {
  set_has_login_time();
  if (login_time_ == &::google::protobuf::internal::kEmptyString) {
    login_time_ = new ::std::string;
  }
  login_time_->assign(value);
}
inline void WorkState::set_login_time(const char* value, size_t size) {
  set_has_login_time();
  if (login_time_ == &::google::protobuf::internal::kEmptyString) {
    login_time_ = new ::std::string;
  }
  login_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkState::mutable_login_time() {
  set_has_login_time();
  if (login_time_ == &::google::protobuf::internal::kEmptyString) {
    login_time_ = new ::std::string;
  }
  return login_time_;
}
inline ::std::string* WorkState::release_login_time() {
  clear_has_login_time();
  if (login_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_time_;
    login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string beat_time = 5;
inline bool WorkState::has_beat_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WorkState::set_has_beat_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WorkState::clear_has_beat_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WorkState::clear_beat_time() {
  if (beat_time_ != &::google::protobuf::internal::kEmptyString) {
    beat_time_->clear();
  }
  clear_has_beat_time();
}
inline const ::std::string& WorkState::beat_time() const {
  return *beat_time_;
}
inline void WorkState::set_beat_time(const ::std::string& value) {
  set_has_beat_time();
  if (beat_time_ == &::google::protobuf::internal::kEmptyString) {
    beat_time_ = new ::std::string;
  }
  beat_time_->assign(value);
}
inline void WorkState::set_beat_time(const char* value) {
  set_has_beat_time();
  if (beat_time_ == &::google::protobuf::internal::kEmptyString) {
    beat_time_ = new ::std::string;
  }
  beat_time_->assign(value);
}
inline void WorkState::set_beat_time(const char* value, size_t size) {
  set_has_beat_time();
  if (beat_time_ == &::google::protobuf::internal::kEmptyString) {
    beat_time_ = new ::std::string;
  }
  beat_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkState::mutable_beat_time() {
  set_has_beat_time();
  if (beat_time_ == &::google::protobuf::internal::kEmptyString) {
    beat_time_ = new ::std::string;
  }
  return beat_time_;
}
inline ::std::string* WorkState::release_beat_time() {
  clear_has_beat_time();
  if (beat_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beat_time_;
    beat_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string login_ip = 6;
inline bool WorkState::has_login_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WorkState::set_has_login_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WorkState::clear_has_login_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WorkState::clear_login_ip() {
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    login_ip_->clear();
  }
  clear_has_login_ip();
}
inline const ::std::string& WorkState::login_ip() const {
  return *login_ip_;
}
inline void WorkState::set_login_ip(const ::std::string& value) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(value);
}
inline void WorkState::set_login_ip(const char* value) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(value);
}
inline void WorkState::set_login_ip(const char* value, size_t size) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorkState::mutable_login_ip() {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  return login_ip_;
}
inline ::std::string* WorkState::release_login_ip() {
  clear_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_ip_;
    login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// WWorkState

// optional int32 data_type = 1;
inline bool WWorkState::has_data_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WWorkState::set_has_data_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WWorkState::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WWorkState::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::google::protobuf::int32 WWorkState::data_type() const {
  return data_type_;
}
inline void WWorkState::set_data_type(::google::protobuf::int32 value) {
  set_has_data_type();
  data_type_ = value;
}

// optional int32 module_type = 2;
inline bool WWorkState::has_module_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WWorkState::set_has_module_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WWorkState::clear_has_module_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WWorkState::clear_module_type() {
  module_type_ = 0;
  clear_has_module_type();
}
inline ::google::protobuf::int32 WWorkState::module_type() const {
  return module_type_;
}
inline void WWorkState::set_module_type(::google::protobuf::int32 value) {
  set_has_module_type();
  module_type_ = value;
}

// optional int32 user_or_server_id = 3;
inline bool WWorkState::has_user_or_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WWorkState::set_has_user_or_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WWorkState::clear_has_user_or_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WWorkState::clear_user_or_server_id() {
  user_or_server_id_ = 0;
  clear_has_user_or_server_id();
}
inline ::google::protobuf::int32 WWorkState::user_or_server_id() const {
  return user_or_server_id_;
}
inline void WWorkState::set_user_or_server_id(::google::protobuf::int32 value) {
  set_has_user_or_server_id();
  user_or_server_id_ = value;
}

// optional string login_ip = 4;
inline bool WWorkState::has_login_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WWorkState::set_has_login_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WWorkState::clear_has_login_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WWorkState::clear_login_ip() {
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    login_ip_->clear();
  }
  clear_has_login_ip();
}
inline const ::std::string& WWorkState::login_ip() const {
  return *login_ip_;
}
inline void WWorkState::set_login_ip(const ::std::string& value) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(value);
}
inline void WWorkState::set_login_ip(const char* value) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(value);
}
inline void WWorkState::set_login_ip(const char* value, size_t size) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WWorkState::mutable_login_ip() {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  return login_ip_;
}
inline ::std::string* WWorkState::release_login_ip() {
  clear_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_ip_;
    login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 is_first_time = 5;
inline bool WWorkState::has_is_first_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WWorkState::set_has_is_first_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WWorkState::clear_has_is_first_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WWorkState::clear_is_first_time() {
  is_first_time_ = 0;
  clear_has_is_first_time();
}
inline ::google::protobuf::int32 WWorkState::is_first_time() const {
  return is_first_time_;
}
inline void WWorkState::set_is_first_time(::google::protobuf::int32 value) {
  set_has_is_first_time();
  is_first_time_ = value;
}

// optional int32 login_port = 6;
inline bool WWorkState::has_login_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WWorkState::set_has_login_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WWorkState::clear_has_login_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WWorkState::clear_login_port() {
  login_port_ = 0;
  clear_has_login_port();
}
inline ::google::protobuf::int32 WWorkState::login_port() const {
  return login_port_;
}
inline void WWorkState::set_login_port(::google::protobuf::int32 value) {
  set_has_login_port();
  login_port_ = value;
}

// -------------------------------------------------------------------

// WorkStateList

// optional int32 data_type = 1;
inline bool WorkStateList::has_data_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorkStateList::set_has_data_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorkStateList::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorkStateList::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::google::protobuf::int32 WorkStateList::data_type() const {
  return data_type_;
}
inline void WorkStateList::set_data_type(::google::protobuf::int32 value) {
  set_has_data_type();
  data_type_ = value;
}

// repeated .cms_8120.WorkState work_state = 2;
inline int WorkStateList::work_state_size() const {
  return work_state_.size();
}
inline void WorkStateList::clear_work_state() {
  work_state_.Clear();
}
inline const ::cms_8120::WorkState& WorkStateList::work_state(int index) const {
  return work_state_.Get(index);
}
inline ::cms_8120::WorkState* WorkStateList::mutable_work_state(int index) {
  return work_state_.Mutable(index);
}
inline ::cms_8120::WorkState* WorkStateList::add_work_state() {
  return work_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cms_8120::WorkState >&
WorkStateList::work_state() const {
  return work_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::cms_8120::WorkState >*
WorkStateList::mutable_work_state() {
  return &work_state_;
}

// -------------------------------------------------------------------

// UserLoginInfo

// optional int32 id = 1;
inline bool UserLoginInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserLoginInfo::id() const {
  return id_;
}
inline void UserLoginInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 user_or_server_id = 2;
inline bool UserLoginInfo::has_user_or_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginInfo::set_has_user_or_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginInfo::clear_has_user_or_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginInfo::clear_user_or_server_id() {
  user_or_server_id_ = 0;
  clear_has_user_or_server_id();
}
inline ::google::protobuf::int32 UserLoginInfo::user_or_server_id() const {
  return user_or_server_id_;
}
inline void UserLoginInfo::set_user_or_server_id(::google::protobuf::int32 value) {
  set_has_user_or_server_id();
  user_or_server_id_ = value;
}

// optional string login_ip = 3;
inline bool UserLoginInfo::has_login_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLoginInfo::set_has_login_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLoginInfo::clear_has_login_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLoginInfo::clear_login_ip() {
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    login_ip_->clear();
  }
  clear_has_login_ip();
}
inline const ::std::string& UserLoginInfo::login_ip() const {
  return *login_ip_;
}
inline void UserLoginInfo::set_login_ip(const ::std::string& value) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(value);
}
inline void UserLoginInfo::set_login_ip(const char* value) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(value);
}
inline void UserLoginInfo::set_login_ip(const char* value, size_t size) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLoginInfo::mutable_login_ip() {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  return login_ip_;
}
inline ::std::string* UserLoginInfo::release_login_ip() {
  clear_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_ip_;
    login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 port = 4;
inline bool UserLoginInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserLoginInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserLoginInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserLoginInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 UserLoginInfo::port() const {
  return port_;
}
inline void UserLoginInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// UserLoginInfoList

// optional int32 data_type = 1;
inline bool UserLoginInfoList::has_data_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginInfoList::set_has_data_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginInfoList::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginInfoList::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::google::protobuf::int32 UserLoginInfoList::data_type() const {
  return data_type_;
}
inline void UserLoginInfoList::set_data_type(::google::protobuf::int32 value) {
  set_has_data_type();
  data_type_ = value;
}

// repeated .cms_8120.UserLoginInfo user_login_info = 2;
inline int UserLoginInfoList::user_login_info_size() const {
  return user_login_info_.size();
}
inline void UserLoginInfoList::clear_user_login_info() {
  user_login_info_.Clear();
}
inline const ::cms_8120::UserLoginInfo& UserLoginInfoList::user_login_info(int index) const {
  return user_login_info_.Get(index);
}
inline ::cms_8120::UserLoginInfo* UserLoginInfoList::mutable_user_login_info(int index) {
  return user_login_info_.Mutable(index);
}
inline ::cms_8120::UserLoginInfo* UserLoginInfoList::add_user_login_info() {
  return user_login_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cms_8120::UserLoginInfo >&
UserLoginInfoList::user_login_info() const {
  return user_login_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::cms_8120::UserLoginInfo >*
UserLoginInfoList::mutable_user_login_info() {
  return &user_login_info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< cms_8120::INTERVAL_TIME>() {
  return cms_8120::INTERVAL_TIME_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_csclient_2fWorkState_2eproto__INCLUDED
