// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csclient/WorkState.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* WorkState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkState_reflection_ = NULL;
const ::google::protobuf::Descriptor* WWorkState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WWorkState_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkStateList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkStateList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginInfoList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* INTERVAL_TIME_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_csclient_2fWorkState_2eproto() {
  protobuf_AddDesc_csclient_2fWorkState_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "csclient/WorkState.proto");
  GOOGLE_CHECK(file != NULL);
  WorkState_descriptor_ = file->message_type(0);
  static const int WorkState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkState, module_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkState, user_or_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkState, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkState, beat_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkState, login_ip_),
  };
  WorkState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkState_descriptor_,
      WorkState::default_instance_,
      WorkState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkState));
  WWorkState_descriptor_ = file->message_type(1);
  static const int WWorkState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WWorkState, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WWorkState, module_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WWorkState, user_or_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WWorkState, login_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WWorkState, is_first_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WWorkState, login_port_),
  };
  WWorkState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WWorkState_descriptor_,
      WWorkState::default_instance_,
      WWorkState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WWorkState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WWorkState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WWorkState));
  WorkStateList_descriptor_ = file->message_type(2);
  static const int WorkStateList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkStateList, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkStateList, work_state_),
  };
  WorkStateList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkStateList_descriptor_,
      WorkStateList::default_instance_,
      WorkStateList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkStateList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkStateList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkStateList));
  UserLoginInfo_descriptor_ = file->message_type(3);
  static const int UserLoginInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, user_or_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, login_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, port_),
  };
  UserLoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginInfo_descriptor_,
      UserLoginInfo::default_instance_,
      UserLoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginInfo));
  UserLoginInfoList_descriptor_ = file->message_type(4);
  static const int UserLoginInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfoList, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfoList, user_login_info_),
  };
  UserLoginInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginInfoList_descriptor_,
      UserLoginInfoList::default_instance_,
      UserLoginInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginInfoList));
  INTERVAL_TIME_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_csclient_2fWorkState_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkState_descriptor_, &WorkState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WWorkState_descriptor_, &WWorkState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkStateList_descriptor_, &WorkStateList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginInfo_descriptor_, &UserLoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginInfoList_descriptor_, &UserLoginInfoList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_csclient_2fWorkState_2eproto() {
  delete WorkState::default_instance_;
  delete WorkState_reflection_;
  delete WWorkState::default_instance_;
  delete WWorkState_reflection_;
  delete WorkStateList::default_instance_;
  delete WorkStateList_reflection_;
  delete UserLoginInfo::default_instance_;
  delete UserLoginInfo_reflection_;
  delete UserLoginInfoList::default_instance_;
  delete UserLoginInfoList_reflection_;
}

void protobuf_AddDesc_csclient_2fWorkState_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_type_2fcmd_2eproto();
  ::cms_8120::protobuf_AddDesc_type_2fModuleType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030csclient/WorkState.proto\022\010cms_8120\032\016ty"
    "pe/cmd.proto\032\025type/ModuleType.proto\"\200\001\n\t"
    "WorkState\022\n\n\002id\030\001 \001(\005\022\023\n\013module_type\030\002 \001"
    "(\005\022\031\n\021user_or_server_id\030\003 \001(\005\022\022\n\nlogin_t"
    "ime\030\004 \001(\t\022\021\n\tbeat_time\030\005 \001(\t\022\020\n\010login_ip"
    "\030\006 \001(\t\"\214\001\n\nWWorkState\022\021\n\tdata_type\030\001 \001(\005"
    "\022\023\n\013module_type\030\002 \001(\005\022\031\n\021user_or_server_"
    "id\030\003 \001(\005\022\020\n\010login_ip\030\004 \001(\t\022\025\n\ris_first_t"
    "ime\030\005 \001(\005\022\022\n\nlogin_port\030\006 \001(\005\"K\n\rWorkSta"
    "teList\022\021\n\tdata_type\030\001 \001(\005\022\'\n\nwork_state\030"
    "\002 \003(\0132\023.cms_8120.WorkState\"V\n\rUserLoginI"
    "nfo\022\n\n\002id\030\001 \001(\005\022\031\n\021user_or_server_id\030\002 \001"
    "(\005\022\020\n\010login_ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\"X\n\021Us"
    "erLoginInfoList\022\021\n\tdata_type\030\001 \001(\005\0220\n\017us"
    "er_login_info\030\002 \003(\0132\027.cms_8120.UserLogin"
    "Info*@\n\rINTERVAL_TIME\022\026\n\022BEAT_TIME_INTER"
    "VAL\020\036\022\027\n\022SYNC_TIME_INTERVAL\020\220\034", 670);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "csclient/WorkState.proto", &protobuf_RegisterTypes);
  WorkState::default_instance_ = new WorkState();
  WWorkState::default_instance_ = new WWorkState();
  WorkStateList::default_instance_ = new WorkStateList();
  UserLoginInfo::default_instance_ = new UserLoginInfo();
  UserLoginInfoList::default_instance_ = new UserLoginInfoList();
  WorkState::default_instance_->InitAsDefaultInstance();
  WWorkState::default_instance_->InitAsDefaultInstance();
  WorkStateList::default_instance_->InitAsDefaultInstance();
  UserLoginInfo::default_instance_->InitAsDefaultInstance();
  UserLoginInfoList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_csclient_2fWorkState_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_csclient_2fWorkState_2eproto {
  StaticDescriptorInitializer_csclient_2fWorkState_2eproto() {
    protobuf_AddDesc_csclient_2fWorkState_2eproto();
  }
} static_descriptor_initializer_csclient_2fWorkState_2eproto_;

const ::google::protobuf::EnumDescriptor* INTERVAL_TIME_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return INTERVAL_TIME_descriptor_;
}
bool INTERVAL_TIME_IsValid(int value) {
  switch(value) {
    case 30:
    case 3600:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int WorkState::kIdFieldNumber;
const int WorkState::kModuleTypeFieldNumber;
const int WorkState::kUserOrServerIdFieldNumber;
const int WorkState::kLoginTimeFieldNumber;
const int WorkState::kBeatTimeFieldNumber;
const int WorkState::kLoginIpFieldNumber;
#endif  // !_MSC_VER

WorkState::WorkState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkState::InitAsDefaultInstance() {
}

WorkState::WorkState(const WorkState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkState::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  module_type_ = 0;
  user_or_server_id_ = 0;
  login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beat_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkState::~WorkState() {
  SharedDtor();
}

void WorkState::SharedDtor() {
  if (login_time_ != &::google::protobuf::internal::kEmptyString) {
    delete login_time_;
  }
  if (beat_time_ != &::google::protobuf::internal::kEmptyString) {
    delete beat_time_;
  }
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete login_ip_;
  }
  if (this != default_instance_) {
  }
}

void WorkState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkState_descriptor_;
}

const WorkState& WorkState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fWorkState_2eproto();  return *default_instance_;
}

WorkState* WorkState::default_instance_ = NULL;

WorkState* WorkState::New() const {
  return new WorkState;
}

void WorkState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    module_type_ = 0;
    user_or_server_id_ = 0;
    if (has_login_time()) {
      if (login_time_ != &::google::protobuf::internal::kEmptyString) {
        login_time_->clear();
      }
    }
    if (has_beat_time()) {
      if (beat_time_ != &::google::protobuf::internal::kEmptyString) {
        beat_time_->clear();
      }
    }
    if (has_login_ip()) {
      if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
        login_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_module_type;
        break;
      }
      
      // optional int32 module_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_type_)));
          set_has_module_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_or_server_id;
        break;
      }
      
      // optional int32 user_or_server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_or_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_or_server_id_)));
          set_has_user_or_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_login_time;
        break;
      }
      
      // optional string login_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_time().data(), this->login_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_beat_time;
        break;
      }
      
      // optional string beat_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beat_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beat_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beat_time().data(), this->beat_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_login_ip;
        break;
      }
      
      // optional string login_ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_ip().data(), this->login_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 module_type = 2;
  if (has_module_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->module_type(), output);
  }
  
  // optional int32 user_or_server_id = 3;
  if (has_user_or_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_or_server_id(), output);
  }
  
  // optional string login_time = 4;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_time().data(), this->login_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->login_time(), output);
  }
  
  // optional string beat_time = 5;
  if (has_beat_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beat_time().data(), this->beat_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->beat_time(), output);
  }
  
  // optional string login_ip = 6;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->login_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 module_type = 2;
  if (has_module_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->module_type(), target);
  }
  
  // optional int32 user_or_server_id = 3;
  if (has_user_or_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_or_server_id(), target);
  }
  
  // optional string login_time = 4;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_time().data(), this->login_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->login_time(), target);
  }
  
  // optional string beat_time = 5;
  if (has_beat_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beat_time().data(), this->beat_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->beat_time(), target);
  }
  
  // optional string login_ip = 6;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->login_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 module_type = 2;
    if (has_module_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_type());
    }
    
    // optional int32 user_or_server_id = 3;
    if (has_user_or_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_or_server_id());
    }
    
    // optional string login_time = 4;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_time());
    }
    
    // optional string beat_time = 5;
    if (has_beat_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beat_time());
    }
    
    // optional string login_ip = 6;
    if (has_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkState::MergeFrom(const WorkState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_module_type()) {
      set_module_type(from.module_type());
    }
    if (from.has_user_or_server_id()) {
      set_user_or_server_id(from.user_or_server_id());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_beat_time()) {
      set_beat_time(from.beat_time());
    }
    if (from.has_login_ip()) {
      set_login_ip(from.login_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkState::CopyFrom(const WorkState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkState::IsInitialized() const {
  
  return true;
}

void WorkState::Swap(WorkState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(module_type_, other->module_type_);
    std::swap(user_or_server_id_, other->user_or_server_id_);
    std::swap(login_time_, other->login_time_);
    std::swap(beat_time_, other->beat_time_);
    std::swap(login_ip_, other->login_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkState_descriptor_;
  metadata.reflection = WorkState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WWorkState::kDataTypeFieldNumber;
const int WWorkState::kModuleTypeFieldNumber;
const int WWorkState::kUserOrServerIdFieldNumber;
const int WWorkState::kLoginIpFieldNumber;
const int WWorkState::kIsFirstTimeFieldNumber;
const int WWorkState::kLoginPortFieldNumber;
#endif  // !_MSC_VER

WWorkState::WWorkState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WWorkState::InitAsDefaultInstance() {
}

WWorkState::WWorkState(const WWorkState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WWorkState::SharedCtor() {
  _cached_size_ = 0;
  data_type_ = 0;
  module_type_ = 0;
  user_or_server_id_ = 0;
  login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_first_time_ = 0;
  login_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WWorkState::~WWorkState() {
  SharedDtor();
}

void WWorkState::SharedDtor() {
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete login_ip_;
  }
  if (this != default_instance_) {
  }
}

void WWorkState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WWorkState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WWorkState_descriptor_;
}

const WWorkState& WWorkState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fWorkState_2eproto();  return *default_instance_;
}

WWorkState* WWorkState::default_instance_ = NULL;

WWorkState* WWorkState::New() const {
  return new WWorkState;
}

void WWorkState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_type_ = 0;
    module_type_ = 0;
    user_or_server_id_ = 0;
    if (has_login_ip()) {
      if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
        login_ip_->clear();
      }
    }
    is_first_time_ = 0;
    login_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WWorkState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_)));
          set_has_data_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_module_type;
        break;
      }
      
      // optional int32 module_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_type_)));
          set_has_module_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_or_server_id;
        break;
      }
      
      // optional int32 user_or_server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_or_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_or_server_id_)));
          set_has_user_or_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_login_ip;
        break;
      }
      
      // optional string login_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_ip().data(), this->login_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_first_time;
        break;
      }
      
      // optional int32 is_first_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_first_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_first_time_)));
          set_has_is_first_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_login_port;
        break;
      }
      
      // optional int32 login_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_port_)));
          set_has_login_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WWorkState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 data_type = 1;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_type(), output);
  }
  
  // optional int32 module_type = 2;
  if (has_module_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->module_type(), output);
  }
  
  // optional int32 user_or_server_id = 3;
  if (has_user_or_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_or_server_id(), output);
  }
  
  // optional string login_ip = 4;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->login_ip(), output);
  }
  
  // optional int32 is_first_time = 5;
  if (has_is_first_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_first_time(), output);
  }
  
  // optional int32 login_port = 6;
  if (has_login_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->login_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WWorkState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 data_type = 1;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data_type(), target);
  }
  
  // optional int32 module_type = 2;
  if (has_module_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->module_type(), target);
  }
  
  // optional int32 user_or_server_id = 3;
  if (has_user_or_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_or_server_id(), target);
  }
  
  // optional string login_ip = 4;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->login_ip(), target);
  }
  
  // optional int32 is_first_time = 5;
  if (has_is_first_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_first_time(), target);
  }
  
  // optional int32 login_port = 6;
  if (has_login_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->login_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WWorkState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 data_type = 1;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type());
    }
    
    // optional int32 module_type = 2;
    if (has_module_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_type());
    }
    
    // optional int32 user_or_server_id = 3;
    if (has_user_or_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_or_server_id());
    }
    
    // optional string login_ip = 4;
    if (has_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_ip());
    }
    
    // optional int32 is_first_time = 5;
    if (has_is_first_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_first_time());
    }
    
    // optional int32 login_port = 6;
    if (has_login_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WWorkState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WWorkState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WWorkState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WWorkState::MergeFrom(const WWorkState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_module_type()) {
      set_module_type(from.module_type());
    }
    if (from.has_user_or_server_id()) {
      set_user_or_server_id(from.user_or_server_id());
    }
    if (from.has_login_ip()) {
      set_login_ip(from.login_ip());
    }
    if (from.has_is_first_time()) {
      set_is_first_time(from.is_first_time());
    }
    if (from.has_login_port()) {
      set_login_port(from.login_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WWorkState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WWorkState::CopyFrom(const WWorkState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WWorkState::IsInitialized() const {
  
  return true;
}

void WWorkState::Swap(WWorkState* other) {
  if (other != this) {
    std::swap(data_type_, other->data_type_);
    std::swap(module_type_, other->module_type_);
    std::swap(user_or_server_id_, other->user_or_server_id_);
    std::swap(login_ip_, other->login_ip_);
    std::swap(is_first_time_, other->is_first_time_);
    std::swap(login_port_, other->login_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WWorkState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WWorkState_descriptor_;
  metadata.reflection = WWorkState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkStateList::kDataTypeFieldNumber;
const int WorkStateList::kWorkStateFieldNumber;
#endif  // !_MSC_VER

WorkStateList::WorkStateList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkStateList::InitAsDefaultInstance() {
}

WorkStateList::WorkStateList(const WorkStateList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkStateList::SharedCtor() {
  _cached_size_ = 0;
  data_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkStateList::~WorkStateList() {
  SharedDtor();
}

void WorkStateList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkStateList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkStateList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkStateList_descriptor_;
}

const WorkStateList& WorkStateList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fWorkState_2eproto();  return *default_instance_;
}

WorkStateList* WorkStateList::default_instance_ = NULL;

WorkStateList* WorkStateList::New() const {
  return new WorkStateList;
}

void WorkStateList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_type_ = 0;
  }
  work_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkStateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_)));
          set_has_data_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_work_state;
        break;
      }
      
      // repeated .cms_8120.WorkState work_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_work_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_work_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_work_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkStateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 data_type = 1;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_type(), output);
  }
  
  // repeated .cms_8120.WorkState work_state = 2;
  for (int i = 0; i < this->work_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->work_state(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkStateList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 data_type = 1;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data_type(), target);
  }
  
  // repeated .cms_8120.WorkState work_state = 2;
  for (int i = 0; i < this->work_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->work_state(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkStateList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 data_type = 1;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type());
    }
    
  }
  // repeated .cms_8120.WorkState work_state = 2;
  total_size += 1 * this->work_state_size();
  for (int i = 0; i < this->work_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->work_state(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkStateList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkStateList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkStateList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkStateList::MergeFrom(const WorkStateList& from) {
  GOOGLE_CHECK_NE(&from, this);
  work_state_.MergeFrom(from.work_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkStateList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkStateList::CopyFrom(const WorkStateList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkStateList::IsInitialized() const {
  
  return true;
}

void WorkStateList::Swap(WorkStateList* other) {
  if (other != this) {
    std::swap(data_type_, other->data_type_);
    work_state_.Swap(&other->work_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkStateList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkStateList_descriptor_;
  metadata.reflection = WorkStateList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginInfo::kIdFieldNumber;
const int UserLoginInfo::kUserOrServerIdFieldNumber;
const int UserLoginInfo::kLoginIpFieldNumber;
const int UserLoginInfo::kPortFieldNumber;
#endif  // !_MSC_VER

UserLoginInfo::UserLoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginInfo::InitAsDefaultInstance() {
}

UserLoginInfo::UserLoginInfo(const UserLoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  user_or_server_id_ = 0;
  login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginInfo::~UserLoginInfo() {
  SharedDtor();
}

void UserLoginInfo::SharedDtor() {
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete login_ip_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginInfo_descriptor_;
}

const UserLoginInfo& UserLoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fWorkState_2eproto();  return *default_instance_;
}

UserLoginInfo* UserLoginInfo::default_instance_ = NULL;

UserLoginInfo* UserLoginInfo::New() const {
  return new UserLoginInfo;
}

void UserLoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    user_or_server_id_ = 0;
    if (has_login_ip()) {
      if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
        login_ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_or_server_id;
        break;
      }
      
      // optional int32 user_or_server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_or_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_or_server_id_)));
          set_has_user_or_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_login_ip;
        break;
      }
      
      // optional string login_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_ip().data(), this->login_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }
      
      // optional int32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 user_or_server_id = 2;
  if (has_user_or_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_or_server_id(), output);
  }
  
  // optional string login_ip = 3;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->login_ip(), output);
  }
  
  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 user_or_server_id = 2;
  if (has_user_or_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_or_server_id(), target);
  }
  
  // optional string login_ip = 3;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->login_ip(), target);
  }
  
  // optional int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 user_or_server_id = 2;
    if (has_user_or_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_or_server_id());
    }
    
    // optional string login_ip = 3;
    if (has_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_ip());
    }
    
    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginInfo::MergeFrom(const UserLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_or_server_id()) {
      set_user_or_server_id(from.user_or_server_id());
    }
    if (from.has_login_ip()) {
      set_login_ip(from.login_ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginInfo::CopyFrom(const UserLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginInfo::IsInitialized() const {
  
  return true;
}

void UserLoginInfo::Swap(UserLoginInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_or_server_id_, other->user_or_server_id_);
    std::swap(login_ip_, other->login_ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginInfo_descriptor_;
  metadata.reflection = UserLoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginInfoList::kDataTypeFieldNumber;
const int UserLoginInfoList::kUserLoginInfoFieldNumber;
#endif  // !_MSC_VER

UserLoginInfoList::UserLoginInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginInfoList::InitAsDefaultInstance() {
}

UserLoginInfoList::UserLoginInfoList(const UserLoginInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginInfoList::SharedCtor() {
  _cached_size_ = 0;
  data_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginInfoList::~UserLoginInfoList() {
  SharedDtor();
}

void UserLoginInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserLoginInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginInfoList_descriptor_;
}

const UserLoginInfoList& UserLoginInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fWorkState_2eproto();  return *default_instance_;
}

UserLoginInfoList* UserLoginInfoList::default_instance_ = NULL;

UserLoginInfoList* UserLoginInfoList::New() const {
  return new UserLoginInfoList;
}

void UserLoginInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_type_ = 0;
  }
  user_login_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_)));
          set_has_data_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_login_info;
        break;
      }
      
      // repeated .cms_8120.UserLoginInfo user_login_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_login_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_login_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_login_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 data_type = 1;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_type(), output);
  }
  
  // repeated .cms_8120.UserLoginInfo user_login_info = 2;
  for (int i = 0; i < this->user_login_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_login_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 data_type = 1;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data_type(), target);
  }
  
  // repeated .cms_8120.UserLoginInfo user_login_info = 2;
  for (int i = 0; i < this->user_login_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_login_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginInfoList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 data_type = 1;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type());
    }
    
  }
  // repeated .cms_8120.UserLoginInfo user_login_info = 2;
  total_size += 1 * this->user_login_info_size();
  for (int i = 0; i < this->user_login_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_login_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginInfoList::MergeFrom(const UserLoginInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_login_info_.MergeFrom(from.user_login_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginInfoList::CopyFrom(const UserLoginInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginInfoList::IsInitialized() const {
  
  return true;
}

void UserLoginInfoList::Swap(UserLoginInfoList* other) {
  if (other != this) {
    std::swap(data_type_, other->data_type_);
    user_login_info_.Swap(&other->user_login_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginInfoList_descriptor_;
  metadata.reflection = UserLoginInfoList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
