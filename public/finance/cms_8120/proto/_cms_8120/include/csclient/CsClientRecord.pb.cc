// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csclient/CsClientRecord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* CSClientInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSClientInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRecords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRecords_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCsClientRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCsClientRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCsClientRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCsClientRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordsDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordsDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRecordsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRecordsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCsClientRecordsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCsClientRecordsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrRecordsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrRecordsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspErrRecordsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspErrRecordsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqErrorRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqErrorRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPrintRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPrintRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspPrintRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspPrintRecord_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_csclient_2fCsClientRecord_2eproto() {
  protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "csclient/CsClientRecord.proto");
  GOOGLE_CHECK(file != NULL);
  CSClientInput_descriptor_ = file->message_type(0);
  static const int CSClientInput_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, inputregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, inputuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, nproid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, inputtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, businesstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, creditcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, creditid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, strbankno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, strbuymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, strcreditphone_),
  };
  CSClientInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSClientInput_descriptor_,
      CSClientInput::default_instance_,
      CSClientInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSClientInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSClientInput));
  CSRecords_descriptor_ = file->message_type(1);
  static const int CSRecords_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, strrecordname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, inputuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, inputregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, nrecordfiletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, strurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, nuploadpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, nfilesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, screenshotsrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, strcloudip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, strcloudport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, straccesskey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, strsecretkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, strbucket_),
  };
  CSRecords_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRecords_descriptor_,
      CSRecords::default_instance_,
      CSRecords_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecords, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRecords));
  ReqCsClientRecord_descriptor_ = file->message_type(2);
  static const int ReqCsClientRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCsClientRecord, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCsClientRecord, clientinput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCsClientRecord, records_),
  };
  ReqCsClientRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCsClientRecord_descriptor_,
      ReqCsClientRecord::default_instance_,
      ReqCsClientRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCsClientRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCsClientRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCsClientRecord));
  RspCsClientRecord_descriptor_ = file->message_type(3);
  static const int RspCsClientRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCsClientRecord, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCsClientRecord, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCsClientRecord, result_info_),
  };
  RspCsClientRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCsClientRecord_descriptor_,
      RspCsClientRecord::default_instance_,
      RspCsClientRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCsClientRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCsClientRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCsClientRecord));
  RecordsDetailInfo_descriptor_ = file->message_type(4);
  static const int RecordsDetailInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsDetailInfo, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsDetailInfo, recordstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsDetailInfo, strrecordstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsDetailInfo, errormsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsDetailInfo, strurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsDetailInfo, videoid_),
  };
  RecordsDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordsDetailInfo_descriptor_,
      RecordsDetailInfo::default_instance_,
      RecordsDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordsDetailInfo));
  RecordsInfo_descriptor_ = file->message_type(5);
  static const int RecordsInfo_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, nproid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, inputregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, inputregioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, inputregionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, custname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, strcreditphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, creditid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, creditname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, creditcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, producttypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, producttypename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, productcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, productname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, strbuymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, strgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, videonum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, businesstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, lockclient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, strlockclient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, recordstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, strrecordstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, picturestrart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, pictureend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, recordsdetailinfo_),
  };
  RecordsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordsInfo_descriptor_,
      RecordsInfo::default_instance_,
      RecordsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordsInfo));
  ReqRecordsInfo_descriptor_ = file->message_type(6);
  static const int ReqRecordsInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecordsInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecordsInfo, recordtab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecordsInfo, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecordsInfo, enddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecordsInfo, pageno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecordsInfo, pagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecordsInfo, inputuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecordsInfo, productname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecordsInfo, custname_),
  };
  ReqRecordsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRecordsInfo_descriptor_,
      ReqRecordsInfo::default_instance_,
      ReqRecordsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecordsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecordsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRecordsInfo));
  RspCsClientRecordsInfo_descriptor_ = file->message_type(7);
  static const int RspCsClientRecordsInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCsClientRecordsInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCsClientRecordsInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCsClientRecordsInfo, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCsClientRecordsInfo, recordsinfo_),
  };
  RspCsClientRecordsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCsClientRecordsInfo_descriptor_,
      RspCsClientRecordsInfo::default_instance_,
      RspCsClientRecordsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCsClientRecordsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCsClientRecordsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCsClientRecordsInfo));
  ErrRecordsInfo_descriptor_ = file->message_type(8);
  static const int ErrRecordsInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, nproid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, custname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, businesstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, recordstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, strrecordstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, producttypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, producttypename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, productcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, productname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, strbuymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, recordcheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, strrecordcheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, strurl_),
  };
  ErrRecordsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrRecordsInfo_descriptor_,
      ErrRecordsInfo::default_instance_,
      ErrRecordsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrRecordsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrRecordsInfo));
  RspErrRecordsInfo_descriptor_ = file->message_type(9);
  static const int RspErrRecordsInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspErrRecordsInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspErrRecordsInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspErrRecordsInfo, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspErrRecordsInfo, errrecordsinfo_),
  };
  RspErrRecordsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspErrRecordsInfo_descriptor_,
      RspErrRecordsInfo::default_instance_,
      RspErrRecordsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspErrRecordsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspErrRecordsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspErrRecordsInfo));
  ReqErrorRecord_descriptor_ = file->message_type(10);
  static const int ReqErrorRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqErrorRecord, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqErrorRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqErrorRecord, inputuser_),
  };
  ReqErrorRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqErrorRecord_descriptor_,
      ReqErrorRecord::default_instance_,
      ReqErrorRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqErrorRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqErrorRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqErrorRecord));
  ReqPrintRecord_descriptor_ = file->message_type(11);
  static const int ReqPrintRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPrintRecord, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPrintRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPrintRecord, inputuser_),
  };
  ReqPrintRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPrintRecord_descriptor_,
      ReqPrintRecord::default_instance_,
      ReqPrintRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPrintRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPrintRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPrintRecord));
  RspPrintRecord_descriptor_ = file->message_type(12);
  static const int RspPrintRecord_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, creditname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, creditcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, nproid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, strgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, producttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, productname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, proname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, prouserno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, picturestrart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, pictureend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, businesstime_),
  };
  RspPrintRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspPrintRecord_descriptor_,
      RspPrintRecord::default_instance_,
      RspPrintRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspPrintRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspPrintRecord));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_csclient_2fCsClientRecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSClientInput_descriptor_, &CSClientInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRecords_descriptor_, &CSRecords::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCsClientRecord_descriptor_, &ReqCsClientRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCsClientRecord_descriptor_, &RspCsClientRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordsDetailInfo_descriptor_, &RecordsDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordsInfo_descriptor_, &RecordsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRecordsInfo_descriptor_, &ReqRecordsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCsClientRecordsInfo_descriptor_, &RspCsClientRecordsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrRecordsInfo_descriptor_, &ErrRecordsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspErrRecordsInfo_descriptor_, &RspErrRecordsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqErrorRecord_descriptor_, &ReqErrorRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPrintRecord_descriptor_, &ReqPrintRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspPrintRecord_descriptor_, &RspPrintRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_csclient_2fCsClientRecord_2eproto() {
  delete CSClientInput::default_instance_;
  delete CSClientInput_reflection_;
  delete CSRecords::default_instance_;
  delete CSRecords_reflection_;
  delete ReqCsClientRecord::default_instance_;
  delete ReqCsClientRecord_reflection_;
  delete RspCsClientRecord::default_instance_;
  delete RspCsClientRecord_reflection_;
  delete RecordsDetailInfo::default_instance_;
  delete RecordsDetailInfo_reflection_;
  delete RecordsInfo::default_instance_;
  delete RecordsInfo_reflection_;
  delete ReqRecordsInfo::default_instance_;
  delete ReqRecordsInfo_reflection_;
  delete RspCsClientRecordsInfo::default_instance_;
  delete RspCsClientRecordsInfo_reflection_;
  delete ErrRecordsInfo::default_instance_;
  delete ErrRecordsInfo_reflection_;
  delete RspErrRecordsInfo::default_instance_;
  delete RspErrRecordsInfo_reflection_;
  delete ReqErrorRecord::default_instance_;
  delete ReqErrorRecord_reflection_;
  delete ReqPrintRecord::default_instance_;
  delete ReqPrintRecord_reflection_;
  delete RspPrintRecord::default_instance_;
  delete RspPrintRecord_reflection_;
}

void protobuf_AddDesc_csclient_2fCsClientRecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035csclient/CsClientRecord.proto\022\010cms_812"
    "0\"\205\002\n\rCSClientInput\022\n\n\002id\030\001 \001(\005\022\025\n\rinput"
    "RegionId\030\002 \001(\005\022\021\n\tinputUser\030\003 \001(\005\022\016\n\006npr"
    "oId\030\004 \001(\t\022\021\n\tinputTime\030\005 \001(\t\022\024\n\014business"
    "Time\030\006 \001(\t\022\014\n\004name\030\007 \001(\t\022\022\n\ncreditCode\030\010"
    " \001(\t\022\020\n\010creditId\030\t \001(\005\022\021\n\tproductId\030\n \001("
    "\005\022\021\n\tstrBankNo\030\013 \001(\t\022\023\n\013strBuyMoney\030\014 \001("
    "\t\022\026\n\016strCreditPhone\030\r \001(\t\"\320\002\n\tCSRecords\022"
    "\n\n\002id\030\001 \001(\005\022\025\n\rstrRecordName\030\002 \001(\t\022\021\n\tin"
    "putUser\030\003 \001(\005\022\025\n\rinputRegionId\030\004 \001(\005\022\027\n\017"
    "nrecordFileType\030\005 \001(\005\022\021\n\tstartTime\030\006 \001(\t"
    "\022\017\n\007endTime\030\007 \001(\t\022\016\n\006strUrl\030\010 \001(\t\022\026\n\016nup"
    "LoadPercent\030\t \001(\005\022\021\n\tnfileSize\030\n \001(\005\022\025\n\r"
    "screenshotSrc\030\013 \001(\t\022\022\n\nstrCloudIp\030\014 \001(\t\022"
    "\024\n\014strCloudPort\030\r \001(\005\022\024\n\014strAccessKey\030\016 "
    "\001(\t\022\024\n\014strSecretKey\030\017 \001(\t\022\021\n\tstrBucket\030\020"
    " \001(\t\"t\n\021ReqCsClientRecord\022\013\n\003cmd\030\001 \001(\005\022,"
    "\n\013clientInput\030\002 \001(\0132\027.cms_8120.CSClientI"
    "nput\022$\n\007records\030\003 \003(\0132\023.cms_8120.CSRecor"
    "ds\"E\n\021RspCsClientRecord\022\013\n\003cmd\030\001 \001(\005\022\016\n\006"
    "result\030\002 \001(\005\022\023\n\013result_info\030\003 \001(\t\"\207\001\n\021Re"
    "cordsDetailInfo\022\020\n\010fileName\030\001 \001(\t\022\024\n\014rec"
    "ordStatus\030\002 \001(\005\022\027\n\017strRecordStatus\030\003 \001(\t"
    "\022\020\n\010errorMsg\030\004 \001(\t\022\016\n\006strUrl\030\005 \001(\t\022\017\n\007vi"
    "deoId\030\006 \001(\005\"\317\004\n\013RecordsInfo\022\n\n\002id\030\001 \001(\005\022"
    "\016\n\006nProId\030\002 \001(\t\022\025\n\rinputRegionId\030\003 \001(\005\022\027"
    "\n\017inputRegionCode\030\004 \001(\t\022\027\n\017inputRegionNa"
    "me\030\005 \001(\t\022\020\n\010custName\030\006 \001(\t\022\026\n\016strCreditP"
    "hone\030\007 \001(\t\022\020\n\010creditId\030\010 \001(\005\022\022\n\ncreditNa"
    "me\030\t \001(\t\022\022\n\ncreditCode\030\n \001(\t\022\025\n\rproductT"
    "ypeId\030\013 \001(\005\022\027\n\017productTypeName\030\014 \001(\t\022\021\n\t"
    "productId\030\r \001(\005\022\023\n\013productCode\030\016 \001(\t\022\023\n\013"
    "productName\030\017 \001(\t\022\023\n\013strBuyMoney\030\020 \001(\t\022\020"
    "\n\010strGrade\030\021 \001(\t\022\020\n\010videoNum\030\022 \001(\005\022\024\n\014bu"
    "sinessTime\030\023 \001(\t\022\022\n\nlockClient\030\024 \001(\005\022\025\n\r"
    "strlockClient\030\025 \001(\t\022\024\n\014recordStatus\030\026 \001("
    "\005\022\027\n\017strRecordStatus\030\027 \001(\t\022\025\n\rpictureStr"
    "art\030\030 \001(\t\022\022\n\npictureEnd\030\031 \001(\t\0226\n\021records"
    "DetailInfo\030\032 \003(\0132\033.cms_8120.RecordsDetai"
    "lInfo\"\260\001\n\016ReqRecordsInfo\022\013\n\003cmd\030\001 \001(\005\022\021\n"
    "\trecordTab\030\002 \001(\005\022\021\n\tstartDate\030\003 \001(\t\022\017\n\007e"
    "ndDate\030\004 \001(\t\022\016\n\006pageNo\030\005 \001(\005\022\020\n\010pageSize"
    "\030\006 \001(\005\022\021\n\tinputUser\030\007 \001(\005\022\023\n\013productName"
    "\030\010 \001(\t\022\020\n\010custName\030\t \001(\t\"v\n\026RspCsClientR"
    "ecordsInfo\022\013\n\003cmd\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022"
    "\023\n\013result_info\030\003 \001(\t\022*\n\013recordsInfo\030\004 \003("
    "\0132\025.cms_8120.RecordsInfo\"\324\002\n\016ErrRecordsI"
    "nfo\022\n\n\002id\030\001 \001(\005\022\020\n\010fileName\030\002 \001(\t\022\016\n\006nPr"
    "oId\030\003 \001(\t\022\020\n\010custName\030\004 \001(\t\022\024\n\014businessT"
    "ime\030\005 \001(\t\022\024\n\014recordStatus\030\006 \001(\005\022\027\n\017strRe"
    "cordStatus\030\007 \001(\t\022\025\n\rproductTypeId\030\010 \001(\005\022"
    "\027\n\017productTypeName\030\t \001(\t\022\021\n\tproductId\030\n "
    "\001(\005\022\023\n\013productCode\030\013 \001(\t\022\023\n\013productName\030"
    "\014 \001(\t\022\023\n\013strBuyMoney\030\r \001(\t\022\023\n\013recordChec"
    "k\030\016 \001(\005\022\026\n\016strRecordCheck\030\017 \001(\t\022\016\n\006strUr"
    "l\030\020 \001(\t\"w\n\021RspErrRecordsInfo\022\013\n\003cmd\030\001 \001("
    "\005\022\016\n\006result\030\002 \001(\005\022\023\n\013result_info\030\003 \001(\t\0220"
    "\n\016errRecordsInfo\030\004 \003(\0132\030.cms_8120.ErrRec"
    "ordsInfo\"<\n\016ReqErrorRecord\022\013\n\003cmd\030\001 \001(\005\022"
    "\n\n\002id\030\002 \003(\005\022\021\n\tinputUser\030\003 \001(\005\"<\n\016ReqPri"
    "ntRecord\022\013\n\003cmd\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\021\n\tinp"
    "utUser\030\003 \001(\005\"\265\002\n\016RspPrintRecord\022\013\n\003cmd\030\001"
    " \001(\005\022\016\n\006result\030\002 \001(\005\022\023\n\013result_info\030\003 \001("
    "\t\022\n\n\002id\030\004 \001(\005\022\014\n\004name\030\005 \001(\t\022\022\n\ncreditNam"
    "e\030\006 \001(\t\022\022\n\ncreditCode\030\007 \001(\t\022\016\n\006nproId\030\010 "
    "\001(\t\022\020\n\010strGrade\030\t \001(\t\022\023\n\013productType\030\n \001"
    "(\t\022\023\n\013productName\030\013 \001(\t\022\017\n\007proName\030\014 \001(\t"
    "\022\021\n\tproUserNo\030\r \001(\t\022\025\n\rpictureStrart\030\016 \001"
    "(\t\022\022\n\npictureEnd\030\017 \001(\t\022\024\n\014businessTime\030\020"
    " \001(\t2\305\004\n\033ModifyCsClientRecordService\022N\n\022"
    "SaveCsClientRecord\022\033.cms_8120.ReqCsClien"
    "tRecord\032\033.cms_8120.RspCsClientRecord\022P\n\024"
    "UpdateCsClientRecord\022\033.cms_8120.ReqCsCli"
    "entRecord\032\033.cms_8120.RspCsClientRecord\022R"
    "\n\024QueryCsClientRecords\022\030.cms_8120.ReqRec"
    "ordsInfo\032 .cms_8120.RspCsClientRecordsIn"
    "fo\022K\n\022DeleteErrorRecords\022\030.cms_8120.ReqE"
    "rrorRecord\032\033.cms_8120.RspCsClientRecord\022"
    "J\n\021QueryErrorRecords\022\030.cms_8120.ReqRecor"
    "dsInfo\032\033.cms_8120.RspErrRecordsInfo\022K\n\022U"
    "ploadErrorRecords\022\030.cms_8120.ReqErrorRec"
    "ord\032\033.cms_8120.RspCsClientRecord\022J\n\024Prin"
    "tCsClientRecords\022\030.cms_8120.ReqPrintReco"
    "rd\032\030.cms_8120.RspPrintRecordBD\n*com.hikv"
    "ision.finance.fms.cms.hpp.csclientB\023CsCl"
    "ientRecordProto\210\001\001", 3418);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "csclient/CsClientRecord.proto", &protobuf_RegisterTypes);
  CSClientInput::default_instance_ = new CSClientInput();
  CSRecords::default_instance_ = new CSRecords();
  ReqCsClientRecord::default_instance_ = new ReqCsClientRecord();
  RspCsClientRecord::default_instance_ = new RspCsClientRecord();
  RecordsDetailInfo::default_instance_ = new RecordsDetailInfo();
  RecordsInfo::default_instance_ = new RecordsInfo();
  ReqRecordsInfo::default_instance_ = new ReqRecordsInfo();
  RspCsClientRecordsInfo::default_instance_ = new RspCsClientRecordsInfo();
  ErrRecordsInfo::default_instance_ = new ErrRecordsInfo();
  RspErrRecordsInfo::default_instance_ = new RspErrRecordsInfo();
  ReqErrorRecord::default_instance_ = new ReqErrorRecord();
  ReqPrintRecord::default_instance_ = new ReqPrintRecord();
  RspPrintRecord::default_instance_ = new RspPrintRecord();
  CSClientInput::default_instance_->InitAsDefaultInstance();
  CSRecords::default_instance_->InitAsDefaultInstance();
  ReqCsClientRecord::default_instance_->InitAsDefaultInstance();
  RspCsClientRecord::default_instance_->InitAsDefaultInstance();
  RecordsDetailInfo::default_instance_->InitAsDefaultInstance();
  RecordsInfo::default_instance_->InitAsDefaultInstance();
  ReqRecordsInfo::default_instance_->InitAsDefaultInstance();
  RspCsClientRecordsInfo::default_instance_->InitAsDefaultInstance();
  ErrRecordsInfo::default_instance_->InitAsDefaultInstance();
  RspErrRecordsInfo::default_instance_->InitAsDefaultInstance();
  ReqErrorRecord::default_instance_->InitAsDefaultInstance();
  ReqPrintRecord::default_instance_->InitAsDefaultInstance();
  RspPrintRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_csclient_2fCsClientRecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_csclient_2fCsClientRecord_2eproto {
  StaticDescriptorInitializer_csclient_2fCsClientRecord_2eproto() {
    protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();
  }
} static_descriptor_initializer_csclient_2fCsClientRecord_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CSClientInput::kIdFieldNumber;
const int CSClientInput::kInputRegionIdFieldNumber;
const int CSClientInput::kInputUserFieldNumber;
const int CSClientInput::kNproIdFieldNumber;
const int CSClientInput::kInputTimeFieldNumber;
const int CSClientInput::kBusinessTimeFieldNumber;
const int CSClientInput::kNameFieldNumber;
const int CSClientInput::kCreditCodeFieldNumber;
const int CSClientInput::kCreditIdFieldNumber;
const int CSClientInput::kProductIdFieldNumber;
const int CSClientInput::kStrBankNoFieldNumber;
const int CSClientInput::kStrBuyMoneyFieldNumber;
const int CSClientInput::kStrCreditPhoneFieldNumber;
#endif  // !_MSC_VER

CSClientInput::CSClientInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSClientInput::InitAsDefaultInstance() {
}

CSClientInput::CSClientInput(const CSClientInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSClientInput::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  inputregionid_ = 0;
  inputuser_ = 0;
  nproid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inputtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  businesstime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creditcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creditid_ = 0;
  productid_ = 0;
  strbankno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strbuymoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcreditphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSClientInput::~CSClientInput() {
  SharedDtor();
}

void CSClientInput::SharedDtor() {
  if (nproid_ != &::google::protobuf::internal::kEmptyString) {
    delete nproid_;
  }
  if (inputtime_ != &::google::protobuf::internal::kEmptyString) {
    delete inputtime_;
  }
  if (businesstime_ != &::google::protobuf::internal::kEmptyString) {
    delete businesstime_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (creditcode_ != &::google::protobuf::internal::kEmptyString) {
    delete creditcode_;
  }
  if (strbankno_ != &::google::protobuf::internal::kEmptyString) {
    delete strbankno_;
  }
  if (strbuymoney_ != &::google::protobuf::internal::kEmptyString) {
    delete strbuymoney_;
  }
  if (strcreditphone_ != &::google::protobuf::internal::kEmptyString) {
    delete strcreditphone_;
  }
  if (this != default_instance_) {
  }
}

void CSClientInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSClientInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSClientInput_descriptor_;
}

const CSClientInput& CSClientInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

CSClientInput* CSClientInput::default_instance_ = NULL;

CSClientInput* CSClientInput::New() const {
  return new CSClientInput;
}

void CSClientInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    inputregionid_ = 0;
    inputuser_ = 0;
    if (has_nproid()) {
      if (nproid_ != &::google::protobuf::internal::kEmptyString) {
        nproid_->clear();
      }
    }
    if (has_inputtime()) {
      if (inputtime_ != &::google::protobuf::internal::kEmptyString) {
        inputtime_->clear();
      }
    }
    if (has_businesstime()) {
      if (businesstime_ != &::google::protobuf::internal::kEmptyString) {
        businesstime_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_creditcode()) {
      if (creditcode_ != &::google::protobuf::internal::kEmptyString) {
        creditcode_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    creditid_ = 0;
    productid_ = 0;
    if (has_strbankno()) {
      if (strbankno_ != &::google::protobuf::internal::kEmptyString) {
        strbankno_->clear();
      }
    }
    if (has_strbuymoney()) {
      if (strbuymoney_ != &::google::protobuf::internal::kEmptyString) {
        strbuymoney_->clear();
      }
    }
    if (has_strcreditphone()) {
      if (strcreditphone_ != &::google::protobuf::internal::kEmptyString) {
        strcreditphone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSClientInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inputRegionId;
        break;
      }
      
      // optional int32 inputRegionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputRegionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputregionid_)));
          set_has_inputregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inputUser;
        break;
      }
      
      // optional int32 inputUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputuser_)));
          set_has_inputuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nproId;
        break;
      }
      
      // optional string nproId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nproId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nproid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nproid().data(), this->nproid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_inputTime;
        break;
      }
      
      // optional string inputTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inputtime().data(), this->inputtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_businessTime;
        break;
      }
      
      // optional string businessTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_businessTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businesstime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->businesstime().data(), this->businesstime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }
      
      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_creditCode;
        break;
      }
      
      // optional string creditCode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creditCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creditcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creditcode().data(), this->creditcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_creditId;
        break;
      }
      
      // optional int32 creditId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creditId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creditid_)));
          set_has_creditid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_productId;
        break;
      }
      
      // optional int32 productId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_strBankNo;
        break;
      }
      
      // optional string strBankNo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strBankNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strbankno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strbankno().data(), this->strbankno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_strBuyMoney;
        break;
      }
      
      // optional string strBuyMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strBuyMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strbuymoney()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strbuymoney().data(), this->strbuymoney().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_strCreditPhone;
        break;
      }
      
      // optional string strCreditPhone = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCreditPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcreditphone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcreditphone().data(), this->strcreditphone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSClientInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 inputRegionId = 2;
  if (has_inputregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inputregionid(), output);
  }
  
  // optional int32 inputUser = 3;
  if (has_inputuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inputuser(), output);
  }
  
  // optional string nproId = 4;
  if (has_nproid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nproid().data(), this->nproid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nproid(), output);
  }
  
  // optional string inputTime = 5;
  if (has_inputtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputtime().data(), this->inputtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->inputtime(), output);
  }
  
  // optional string businessTime = 6;
  if (has_businesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businesstime().data(), this->businesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->businesstime(), output);
  }
  
  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }
  
  // optional string creditCode = 8;
  if (has_creditcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creditcode().data(), this->creditcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->creditcode(), output);
  }
  
  // optional int32 creditId = 9;
  if (has_creditid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->creditid(), output);
  }
  
  // optional int32 productId = 10;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->productid(), output);
  }
  
  // optional string strBankNo = 11;
  if (has_strbankno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbankno().data(), this->strbankno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->strbankno(), output);
  }
  
  // optional string strBuyMoney = 12;
  if (has_strbuymoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbuymoney().data(), this->strbuymoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->strbuymoney(), output);
  }
  
  // optional string strCreditPhone = 13;
  if (has_strcreditphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcreditphone().data(), this->strcreditphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->strcreditphone(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSClientInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 inputRegionId = 2;
  if (has_inputregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inputregionid(), target);
  }
  
  // optional int32 inputUser = 3;
  if (has_inputuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inputuser(), target);
  }
  
  // optional string nproId = 4;
  if (has_nproid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nproid().data(), this->nproid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nproid(), target);
  }
  
  // optional string inputTime = 5;
  if (has_inputtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputtime().data(), this->inputtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->inputtime(), target);
  }
  
  // optional string businessTime = 6;
  if (has_businesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businesstime().data(), this->businesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->businesstime(), target);
  }
  
  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }
  
  // optional string creditCode = 8;
  if (has_creditcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creditcode().data(), this->creditcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->creditcode(), target);
  }
  
  // optional int32 creditId = 9;
  if (has_creditid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->creditid(), target);
  }
  
  // optional int32 productId = 10;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->productid(), target);
  }
  
  // optional string strBankNo = 11;
  if (has_strbankno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbankno().data(), this->strbankno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->strbankno(), target);
  }
  
  // optional string strBuyMoney = 12;
  if (has_strbuymoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbuymoney().data(), this->strbuymoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->strbuymoney(), target);
  }
  
  // optional string strCreditPhone = 13;
  if (has_strcreditphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcreditphone().data(), this->strcreditphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->strcreditphone(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSClientInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 inputRegionId = 2;
    if (has_inputregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputregionid());
    }
    
    // optional int32 inputUser = 3;
    if (has_inputuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputuser());
    }
    
    // optional string nproId = 4;
    if (has_nproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nproid());
    }
    
    // optional string inputTime = 5;
    if (has_inputtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputtime());
    }
    
    // optional string businessTime = 6;
    if (has_businesstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->businesstime());
    }
    
    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string creditCode = 8;
    if (has_creditcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creditcode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 creditId = 9;
    if (has_creditid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creditid());
    }
    
    // optional int32 productId = 10;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }
    
    // optional string strBankNo = 11;
    if (has_strbankno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strbankno());
    }
    
    // optional string strBuyMoney = 12;
    if (has_strbuymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strbuymoney());
    }
    
    // optional string strCreditPhone = 13;
    if (has_strcreditphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcreditphone());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSClientInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSClientInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSClientInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSClientInput::MergeFrom(const CSClientInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_inputregionid()) {
      set_inputregionid(from.inputregionid());
    }
    if (from.has_inputuser()) {
      set_inputuser(from.inputuser());
    }
    if (from.has_nproid()) {
      set_nproid(from.nproid());
    }
    if (from.has_inputtime()) {
      set_inputtime(from.inputtime());
    }
    if (from.has_businesstime()) {
      set_businesstime(from.businesstime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_creditcode()) {
      set_creditcode(from.creditcode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_creditid()) {
      set_creditid(from.creditid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_strbankno()) {
      set_strbankno(from.strbankno());
    }
    if (from.has_strbuymoney()) {
      set_strbuymoney(from.strbuymoney());
    }
    if (from.has_strcreditphone()) {
      set_strcreditphone(from.strcreditphone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSClientInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSClientInput::CopyFrom(const CSClientInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSClientInput::IsInitialized() const {
  
  return true;
}

void CSClientInput::Swap(CSClientInput* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(inputregionid_, other->inputregionid_);
    std::swap(inputuser_, other->inputuser_);
    std::swap(nproid_, other->nproid_);
    std::swap(inputtime_, other->inputtime_);
    std::swap(businesstime_, other->businesstime_);
    std::swap(name_, other->name_);
    std::swap(creditcode_, other->creditcode_);
    std::swap(creditid_, other->creditid_);
    std::swap(productid_, other->productid_);
    std::swap(strbankno_, other->strbankno_);
    std::swap(strbuymoney_, other->strbuymoney_);
    std::swap(strcreditphone_, other->strcreditphone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSClientInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSClientInput_descriptor_;
  metadata.reflection = CSClientInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRecords::kIdFieldNumber;
const int CSRecords::kStrRecordNameFieldNumber;
const int CSRecords::kInputUserFieldNumber;
const int CSRecords::kInputRegionIdFieldNumber;
const int CSRecords::kNrecordFileTypeFieldNumber;
const int CSRecords::kStartTimeFieldNumber;
const int CSRecords::kEndTimeFieldNumber;
const int CSRecords::kStrUrlFieldNumber;
const int CSRecords::kNupLoadPercentFieldNumber;
const int CSRecords::kNfileSizeFieldNumber;
const int CSRecords::kScreenshotSrcFieldNumber;
const int CSRecords::kStrCloudIpFieldNumber;
const int CSRecords::kStrCloudPortFieldNumber;
const int CSRecords::kStrAccessKeyFieldNumber;
const int CSRecords::kStrSecretKeyFieldNumber;
const int CSRecords::kStrBucketFieldNumber;
#endif  // !_MSC_VER

CSRecords::CSRecords()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRecords::InitAsDefaultInstance() {
}

CSRecords::CSRecords(const CSRecords& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRecords::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  strrecordname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inputuser_ = 0;
  inputregionid_ = 0;
  nrecordfiletype_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nuploadpercent_ = 0;
  nfilesize_ = 0;
  screenshotsrc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcloudip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcloudport_ = 0;
  straccesskey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strsecretkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strbucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRecords::~CSRecords() {
  SharedDtor();
}

void CSRecords::SharedDtor() {
  if (strrecordname_ != &::google::protobuf::internal::kEmptyString) {
    delete strrecordname_;
  }
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (strurl_ != &::google::protobuf::internal::kEmptyString) {
    delete strurl_;
  }
  if (screenshotsrc_ != &::google::protobuf::internal::kEmptyString) {
    delete screenshotsrc_;
  }
  if (strcloudip_ != &::google::protobuf::internal::kEmptyString) {
    delete strcloudip_;
  }
  if (straccesskey_ != &::google::protobuf::internal::kEmptyString) {
    delete straccesskey_;
  }
  if (strsecretkey_ != &::google::protobuf::internal::kEmptyString) {
    delete strsecretkey_;
  }
  if (strbucket_ != &::google::protobuf::internal::kEmptyString) {
    delete strbucket_;
  }
  if (this != default_instance_) {
  }
}

void CSRecords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRecords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRecords_descriptor_;
}

const CSRecords& CSRecords::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

CSRecords* CSRecords::default_instance_ = NULL;

CSRecords* CSRecords::New() const {
  return new CSRecords;
}

void CSRecords::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_strrecordname()) {
      if (strrecordname_ != &::google::protobuf::internal::kEmptyString) {
        strrecordname_->clear();
      }
    }
    inputuser_ = 0;
    inputregionid_ = 0;
    nrecordfiletype_ = 0;
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::kEmptyString) {
        starttime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::kEmptyString) {
        endtime_->clear();
      }
    }
    if (has_strurl()) {
      if (strurl_ != &::google::protobuf::internal::kEmptyString) {
        strurl_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nuploadpercent_ = 0;
    nfilesize_ = 0;
    if (has_screenshotsrc()) {
      if (screenshotsrc_ != &::google::protobuf::internal::kEmptyString) {
        screenshotsrc_->clear();
      }
    }
    if (has_strcloudip()) {
      if (strcloudip_ != &::google::protobuf::internal::kEmptyString) {
        strcloudip_->clear();
      }
    }
    strcloudport_ = 0;
    if (has_straccesskey()) {
      if (straccesskey_ != &::google::protobuf::internal::kEmptyString) {
        straccesskey_->clear();
      }
    }
    if (has_strsecretkey()) {
      if (strsecretkey_ != &::google::protobuf::internal::kEmptyString) {
        strsecretkey_->clear();
      }
    }
    if (has_strbucket()) {
      if (strbucket_ != &::google::protobuf::internal::kEmptyString) {
        strbucket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRecords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strRecordName;
        break;
      }
      
      // optional string strRecordName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRecordName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strrecordname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strrecordname().data(), this->strrecordname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inputUser;
        break;
      }
      
      // optional int32 inputUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputuser_)));
          set_has_inputuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inputRegionId;
        break;
      }
      
      // optional int32 inputRegionId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputRegionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputregionid_)));
          set_has_inputregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nrecordFileType;
        break;
      }
      
      // optional int32 nrecordFileType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nrecordFileType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrecordfiletype_)));
          set_has_nrecordfiletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_startTime;
        break;
      }
      
      // optional string startTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_endTime;
        break;
      }
      
      // optional string endTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_strUrl;
        break;
      }
      
      // optional string strUrl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strurl().data(), this->strurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nupLoadPercent;
        break;
      }
      
      // optional int32 nupLoadPercent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nupLoadPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nuploadpercent_)));
          set_has_nuploadpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_nfileSize;
        break;
      }
      
      // optional int32 nfileSize = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nfileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfilesize_)));
          set_has_nfilesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_screenshotSrc;
        break;
      }
      
      // optional string screenshotSrc = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screenshotSrc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_screenshotsrc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->screenshotsrc().data(), this->screenshotsrc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_strCloudIp;
        break;
      }
      
      // optional string strCloudIp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCloudIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcloudip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcloudip().data(), this->strcloudip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_strCloudPort;
        break;
      }
      
      // optional int32 strCloudPort = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strCloudPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strcloudport_)));
          set_has_strcloudport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_strAccessKey;
        break;
      }
      
      // optional string strAccessKey = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAccessKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccesskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccesskey().data(), this->straccesskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_strSecretKey;
        break;
      }
      
      // optional string strSecretKey = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strSecretKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsecretkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strsecretkey().data(), this->strsecretkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_strBucket;
        break;
      }
      
      // optional string strBucket = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strBucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strbucket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strbucket().data(), this->strbucket().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRecords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string strRecordName = 2;
  if (has_strrecordname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordname().data(), this->strrecordname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strrecordname(), output);
  }
  
  // optional int32 inputUser = 3;
  if (has_inputuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inputuser(), output);
  }
  
  // optional int32 inputRegionId = 4;
  if (has_inputregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inputregionid(), output);
  }
  
  // optional int32 nrecordFileType = 5;
  if (has_nrecordfiletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nrecordfiletype(), output);
  }
  
  // optional string startTime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->starttime(), output);
  }
  
  // optional string endTime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->endtime(), output);
  }
  
  // optional string strUrl = 8;
  if (has_strurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->strurl(), output);
  }
  
  // optional int32 nupLoadPercent = 9;
  if (has_nuploadpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nuploadpercent(), output);
  }
  
  // optional int32 nfileSize = 10;
  if (has_nfilesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->nfilesize(), output);
  }
  
  // optional string screenshotSrc = 11;
  if (has_screenshotsrc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->screenshotsrc().data(), this->screenshotsrc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->screenshotsrc(), output);
  }
  
  // optional string strCloudIp = 12;
  if (has_strcloudip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcloudip().data(), this->strcloudip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->strcloudip(), output);
  }
  
  // optional int32 strCloudPort = 13;
  if (has_strcloudport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->strcloudport(), output);
  }
  
  // optional string strAccessKey = 14;
  if (has_straccesskey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccesskey().data(), this->straccesskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->straccesskey(), output);
  }
  
  // optional string strSecretKey = 15;
  if (has_strsecretkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsecretkey().data(), this->strsecretkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->strsecretkey(), output);
  }
  
  // optional string strBucket = 16;
  if (has_strbucket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbucket().data(), this->strbucket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->strbucket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRecords::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string strRecordName = 2;
  if (has_strrecordname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordname().data(), this->strrecordname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strrecordname(), target);
  }
  
  // optional int32 inputUser = 3;
  if (has_inputuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inputuser(), target);
  }
  
  // optional int32 inputRegionId = 4;
  if (has_inputregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inputregionid(), target);
  }
  
  // optional int32 nrecordFileType = 5;
  if (has_nrecordfiletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nrecordfiletype(), target);
  }
  
  // optional string startTime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->starttime(), target);
  }
  
  // optional string endTime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->endtime(), target);
  }
  
  // optional string strUrl = 8;
  if (has_strurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->strurl(), target);
  }
  
  // optional int32 nupLoadPercent = 9;
  if (has_nuploadpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nuploadpercent(), target);
  }
  
  // optional int32 nfileSize = 10;
  if (has_nfilesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->nfilesize(), target);
  }
  
  // optional string screenshotSrc = 11;
  if (has_screenshotsrc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->screenshotsrc().data(), this->screenshotsrc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->screenshotsrc(), target);
  }
  
  // optional string strCloudIp = 12;
  if (has_strcloudip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcloudip().data(), this->strcloudip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->strcloudip(), target);
  }
  
  // optional int32 strCloudPort = 13;
  if (has_strcloudport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->strcloudport(), target);
  }
  
  // optional string strAccessKey = 14;
  if (has_straccesskey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccesskey().data(), this->straccesskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->straccesskey(), target);
  }
  
  // optional string strSecretKey = 15;
  if (has_strsecretkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsecretkey().data(), this->strsecretkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->strsecretkey(), target);
  }
  
  // optional string strBucket = 16;
  if (has_strbucket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbucket().data(), this->strbucket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->strbucket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRecords::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string strRecordName = 2;
    if (has_strrecordname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strrecordname());
    }
    
    // optional int32 inputUser = 3;
    if (has_inputuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputuser());
    }
    
    // optional int32 inputRegionId = 4;
    if (has_inputregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputregionid());
    }
    
    // optional int32 nrecordFileType = 5;
    if (has_nrecordfiletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrecordfiletype());
    }
    
    // optional string startTime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }
    
    // optional string endTime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }
    
    // optional string strUrl = 8;
    if (has_strurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strurl());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nupLoadPercent = 9;
    if (has_nuploadpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nuploadpercent());
    }
    
    // optional int32 nfileSize = 10;
    if (has_nfilesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nfilesize());
    }
    
    // optional string screenshotSrc = 11;
    if (has_screenshotsrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->screenshotsrc());
    }
    
    // optional string strCloudIp = 12;
    if (has_strcloudip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcloudip());
    }
    
    // optional int32 strCloudPort = 13;
    if (has_strcloudport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strcloudport());
    }
    
    // optional string strAccessKey = 14;
    if (has_straccesskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccesskey());
    }
    
    // optional string strSecretKey = 15;
    if (has_strsecretkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsecretkey());
    }
    
    // optional string strBucket = 16;
    if (has_strbucket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strbucket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRecords::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRecords* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRecords*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRecords::MergeFrom(const CSRecords& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_strrecordname()) {
      set_strrecordname(from.strrecordname());
    }
    if (from.has_inputuser()) {
      set_inputuser(from.inputuser());
    }
    if (from.has_inputregionid()) {
      set_inputregionid(from.inputregionid());
    }
    if (from.has_nrecordfiletype()) {
      set_nrecordfiletype(from.nrecordfiletype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_strurl()) {
      set_strurl(from.strurl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nuploadpercent()) {
      set_nuploadpercent(from.nuploadpercent());
    }
    if (from.has_nfilesize()) {
      set_nfilesize(from.nfilesize());
    }
    if (from.has_screenshotsrc()) {
      set_screenshotsrc(from.screenshotsrc());
    }
    if (from.has_strcloudip()) {
      set_strcloudip(from.strcloudip());
    }
    if (from.has_strcloudport()) {
      set_strcloudport(from.strcloudport());
    }
    if (from.has_straccesskey()) {
      set_straccesskey(from.straccesskey());
    }
    if (from.has_strsecretkey()) {
      set_strsecretkey(from.strsecretkey());
    }
    if (from.has_strbucket()) {
      set_strbucket(from.strbucket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRecords::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRecords::CopyFrom(const CSRecords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRecords::IsInitialized() const {
  
  return true;
}

void CSRecords::Swap(CSRecords* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(strrecordname_, other->strrecordname_);
    std::swap(inputuser_, other->inputuser_);
    std::swap(inputregionid_, other->inputregionid_);
    std::swap(nrecordfiletype_, other->nrecordfiletype_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(strurl_, other->strurl_);
    std::swap(nuploadpercent_, other->nuploadpercent_);
    std::swap(nfilesize_, other->nfilesize_);
    std::swap(screenshotsrc_, other->screenshotsrc_);
    std::swap(strcloudip_, other->strcloudip_);
    std::swap(strcloudport_, other->strcloudport_);
    std::swap(straccesskey_, other->straccesskey_);
    std::swap(strsecretkey_, other->strsecretkey_);
    std::swap(strbucket_, other->strbucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRecords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRecords_descriptor_;
  metadata.reflection = CSRecords_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCsClientRecord::kCmdFieldNumber;
const int ReqCsClientRecord::kClientInputFieldNumber;
const int ReqCsClientRecord::kRecordsFieldNumber;
#endif  // !_MSC_VER

ReqCsClientRecord::ReqCsClientRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCsClientRecord::InitAsDefaultInstance() {
  clientinput_ = const_cast< ::cms_8120::CSClientInput*>(&::cms_8120::CSClientInput::default_instance());
}

ReqCsClientRecord::ReqCsClientRecord(const ReqCsClientRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCsClientRecord::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  clientinput_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCsClientRecord::~ReqCsClientRecord() {
  SharedDtor();
}

void ReqCsClientRecord::SharedDtor() {
  if (this != default_instance_) {
    delete clientinput_;
  }
}

void ReqCsClientRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCsClientRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCsClientRecord_descriptor_;
}

const ReqCsClientRecord& ReqCsClientRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

ReqCsClientRecord* ReqCsClientRecord::default_instance_ = NULL;

ReqCsClientRecord* ReqCsClientRecord::New() const {
  return new ReqCsClientRecord;
}

void ReqCsClientRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_clientinput()) {
      if (clientinput_ != NULL) clientinput_->::cms_8120::CSClientInput::Clear();
    }
  }
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCsClientRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientInput;
        break;
      }
      
      // optional .cms_8120.CSClientInput clientInput = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientInput:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientinput()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_records;
        break;
      }
      
      // repeated .cms_8120.CSRecords records = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCsClientRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional .cms_8120.CSClientInput clientInput = 2;
  if (has_clientinput()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->clientinput(), output);
  }
  
  // repeated .cms_8120.CSRecords records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->records(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCsClientRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional .cms_8120.CSClientInput clientInput = 2;
  if (has_clientinput()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->clientinput(), target);
  }
  
  // repeated .cms_8120.CSRecords records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->records(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCsClientRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional .cms_8120.CSClientInput clientInput = 2;
    if (has_clientinput()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientinput());
    }
    
  }
  // repeated .cms_8120.CSRecords records = 3;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCsClientRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCsClientRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCsClientRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCsClientRecord::MergeFrom(const ReqCsClientRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_clientinput()) {
      mutable_clientinput()->::cms_8120::CSClientInput::MergeFrom(from.clientinput());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCsClientRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCsClientRecord::CopyFrom(const ReqCsClientRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCsClientRecord::IsInitialized() const {
  
  return true;
}

void ReqCsClientRecord::Swap(ReqCsClientRecord* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(clientinput_, other->clientinput_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCsClientRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCsClientRecord_descriptor_;
  metadata.reflection = ReqCsClientRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspCsClientRecord::kCmdFieldNumber;
const int RspCsClientRecord::kResultFieldNumber;
const int RspCsClientRecord::kResultInfoFieldNumber;
#endif  // !_MSC_VER

RspCsClientRecord::RspCsClientRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspCsClientRecord::InitAsDefaultInstance() {
}

RspCsClientRecord::RspCsClientRecord(const RspCsClientRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspCsClientRecord::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  result_ = 0;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCsClientRecord::~RspCsClientRecord() {
  SharedDtor();
}

void RspCsClientRecord::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (this != default_instance_) {
  }
}

void RspCsClientRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCsClientRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCsClientRecord_descriptor_;
}

const RspCsClientRecord& RspCsClientRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

RspCsClientRecord* RspCsClientRecord::default_instance_ = NULL;

RspCsClientRecord* RspCsClientRecord::New() const {
  return new RspCsClientRecord;
}

void RspCsClientRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    result_ = 0;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCsClientRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }
      
      // optional string result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspCsClientRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspCsClientRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspCsClientRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCsClientRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCsClientRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCsClientRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCsClientRecord::MergeFrom(const RspCsClientRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCsClientRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCsClientRecord::CopyFrom(const RspCsClientRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCsClientRecord::IsInitialized() const {
  
  return true;
}

void RspCsClientRecord::Swap(RspCsClientRecord* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(result_, other->result_);
    std::swap(result_info_, other->result_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCsClientRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCsClientRecord_descriptor_;
  metadata.reflection = RspCsClientRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordsDetailInfo::kFileNameFieldNumber;
const int RecordsDetailInfo::kRecordStatusFieldNumber;
const int RecordsDetailInfo::kStrRecordStatusFieldNumber;
const int RecordsDetailInfo::kErrorMsgFieldNumber;
const int RecordsDetailInfo::kStrUrlFieldNumber;
const int RecordsDetailInfo::kVideoIdFieldNumber;
#endif  // !_MSC_VER

RecordsDetailInfo::RecordsDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordsDetailInfo::InitAsDefaultInstance() {
}

RecordsDetailInfo::RecordsDetailInfo(const RecordsDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordsDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recordstatus_ = 0;
  strrecordstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videoid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordsDetailInfo::~RecordsDetailInfo() {
  SharedDtor();
}

void RecordsDetailInfo::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (strrecordstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete strrecordstatus_;
  }
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (strurl_ != &::google::protobuf::internal::kEmptyString) {
    delete strurl_;
  }
  if (this != default_instance_) {
  }
}

void RecordsDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordsDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordsDetailInfo_descriptor_;
}

const RecordsDetailInfo& RecordsDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

RecordsDetailInfo* RecordsDetailInfo::default_instance_ = NULL;

RecordsDetailInfo* RecordsDetailInfo::New() const {
  return new RecordsDetailInfo;
}

void RecordsDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    recordstatus_ = 0;
    if (has_strrecordstatus()) {
      if (strrecordstatus_ != &::google::protobuf::internal::kEmptyString) {
        strrecordstatus_->clear();
      }
    }
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
    if (has_strurl()) {
      if (strurl_ != &::google::protobuf::internal::kEmptyString) {
        strurl_->clear();
      }
    }
    videoid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordsDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fileName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recordStatus;
        break;
      }
      
      // optional int32 recordStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordstatus_)));
          set_has_recordstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strRecordStatus;
        break;
      }
      
      // optional string strRecordStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRecordStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strrecordstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strrecordstatus().data(), this->strrecordstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strUrl;
        break;
      }
      
      // optional string strUrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strurl().data(), this->strurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_videoId;
        break;
      }
      
      // optional int32 videoId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoid_)));
          set_has_videoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordsDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }
  
  // optional int32 recordStatus = 2;
  if (has_recordstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recordstatus(), output);
  }
  
  // optional string strRecordStatus = 3;
  if (has_strrecordstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordstatus().data(), this->strrecordstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strrecordstatus(), output);
  }
  
  // optional string errorMsg = 4;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->errormsg(), output);
  }
  
  // optional string strUrl = 5;
  if (has_strurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strurl(), output);
  }
  
  // optional int32 videoId = 6;
  if (has_videoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->videoid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordsDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }
  
  // optional int32 recordStatus = 2;
  if (has_recordstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recordstatus(), target);
  }
  
  // optional string strRecordStatus = 3;
  if (has_strrecordstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordstatus().data(), this->strrecordstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strrecordstatus(), target);
  }
  
  // optional string errorMsg = 4;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->errormsg(), target);
  }
  
  // optional string strUrl = 5;
  if (has_strurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strurl(), target);
  }
  
  // optional int32 videoId = 6;
  if (has_videoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->videoid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordsDetailInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // optional int32 recordStatus = 2;
    if (has_recordstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordstatus());
    }
    
    // optional string strRecordStatus = 3;
    if (has_strrecordstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strrecordstatus());
    }
    
    // optional string errorMsg = 4;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
    // optional string strUrl = 5;
    if (has_strurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strurl());
    }
    
    // optional int32 videoId = 6;
    if (has_videoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordsDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordsDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordsDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordsDetailInfo::MergeFrom(const RecordsDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_recordstatus()) {
      set_recordstatus(from.recordstatus());
    }
    if (from.has_strrecordstatus()) {
      set_strrecordstatus(from.strrecordstatus());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
    if (from.has_strurl()) {
      set_strurl(from.strurl());
    }
    if (from.has_videoid()) {
      set_videoid(from.videoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordsDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordsDetailInfo::CopyFrom(const RecordsDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordsDetailInfo::IsInitialized() const {
  
  return true;
}

void RecordsDetailInfo::Swap(RecordsDetailInfo* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(recordstatus_, other->recordstatus_);
    std::swap(strrecordstatus_, other->strrecordstatus_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(strurl_, other->strurl_);
    std::swap(videoid_, other->videoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordsDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordsDetailInfo_descriptor_;
  metadata.reflection = RecordsDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordsInfo::kIdFieldNumber;
const int RecordsInfo::kNProIdFieldNumber;
const int RecordsInfo::kInputRegionIdFieldNumber;
const int RecordsInfo::kInputRegionCodeFieldNumber;
const int RecordsInfo::kInputRegionNameFieldNumber;
const int RecordsInfo::kCustNameFieldNumber;
const int RecordsInfo::kStrCreditPhoneFieldNumber;
const int RecordsInfo::kCreditIdFieldNumber;
const int RecordsInfo::kCreditNameFieldNumber;
const int RecordsInfo::kCreditCodeFieldNumber;
const int RecordsInfo::kProductTypeIdFieldNumber;
const int RecordsInfo::kProductTypeNameFieldNumber;
const int RecordsInfo::kProductIdFieldNumber;
const int RecordsInfo::kProductCodeFieldNumber;
const int RecordsInfo::kProductNameFieldNumber;
const int RecordsInfo::kStrBuyMoneyFieldNumber;
const int RecordsInfo::kStrGradeFieldNumber;
const int RecordsInfo::kVideoNumFieldNumber;
const int RecordsInfo::kBusinessTimeFieldNumber;
const int RecordsInfo::kLockClientFieldNumber;
const int RecordsInfo::kStrlockClientFieldNumber;
const int RecordsInfo::kRecordStatusFieldNumber;
const int RecordsInfo::kStrRecordStatusFieldNumber;
const int RecordsInfo::kPictureStrartFieldNumber;
const int RecordsInfo::kPictureEndFieldNumber;
const int RecordsInfo::kRecordsDetailInfoFieldNumber;
#endif  // !_MSC_VER

RecordsInfo::RecordsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordsInfo::InitAsDefaultInstance() {
}

RecordsInfo::RecordsInfo(const RecordsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordsInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  nproid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inputregionid_ = 0;
  inputregioncode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inputregionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcreditphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creditid_ = 0;
  creditname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creditcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  producttypeid_ = 0;
  producttypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = 0;
  productcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strbuymoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strgrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videonum_ = 0;
  businesstime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lockclient_ = 0;
  strlockclient_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recordstatus_ = 0;
  strrecordstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picturestrart_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pictureend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordsInfo::~RecordsInfo() {
  SharedDtor();
}

void RecordsInfo::SharedDtor() {
  if (nproid_ != &::google::protobuf::internal::kEmptyString) {
    delete nproid_;
  }
  if (inputregioncode_ != &::google::protobuf::internal::kEmptyString) {
    delete inputregioncode_;
  }
  if (inputregionname_ != &::google::protobuf::internal::kEmptyString) {
    delete inputregionname_;
  }
  if (custname_ != &::google::protobuf::internal::kEmptyString) {
    delete custname_;
  }
  if (strcreditphone_ != &::google::protobuf::internal::kEmptyString) {
    delete strcreditphone_;
  }
  if (creditname_ != &::google::protobuf::internal::kEmptyString) {
    delete creditname_;
  }
  if (creditcode_ != &::google::protobuf::internal::kEmptyString) {
    delete creditcode_;
  }
  if (producttypename_ != &::google::protobuf::internal::kEmptyString) {
    delete producttypename_;
  }
  if (productcode_ != &::google::protobuf::internal::kEmptyString) {
    delete productcode_;
  }
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    delete productname_;
  }
  if (strbuymoney_ != &::google::protobuf::internal::kEmptyString) {
    delete strbuymoney_;
  }
  if (strgrade_ != &::google::protobuf::internal::kEmptyString) {
    delete strgrade_;
  }
  if (businesstime_ != &::google::protobuf::internal::kEmptyString) {
    delete businesstime_;
  }
  if (strlockclient_ != &::google::protobuf::internal::kEmptyString) {
    delete strlockclient_;
  }
  if (strrecordstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete strrecordstatus_;
  }
  if (picturestrart_ != &::google::protobuf::internal::kEmptyString) {
    delete picturestrart_;
  }
  if (pictureend_ != &::google::protobuf::internal::kEmptyString) {
    delete pictureend_;
  }
  if (this != default_instance_) {
  }
}

void RecordsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordsInfo_descriptor_;
}

const RecordsInfo& RecordsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

RecordsInfo* RecordsInfo::default_instance_ = NULL;

RecordsInfo* RecordsInfo::New() const {
  return new RecordsInfo;
}

void RecordsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_nproid()) {
      if (nproid_ != &::google::protobuf::internal::kEmptyString) {
        nproid_->clear();
      }
    }
    inputregionid_ = 0;
    if (has_inputregioncode()) {
      if (inputregioncode_ != &::google::protobuf::internal::kEmptyString) {
        inputregioncode_->clear();
      }
    }
    if (has_inputregionname()) {
      if (inputregionname_ != &::google::protobuf::internal::kEmptyString) {
        inputregionname_->clear();
      }
    }
    if (has_custname()) {
      if (custname_ != &::google::protobuf::internal::kEmptyString) {
        custname_->clear();
      }
    }
    if (has_strcreditphone()) {
      if (strcreditphone_ != &::google::protobuf::internal::kEmptyString) {
        strcreditphone_->clear();
      }
    }
    creditid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_creditname()) {
      if (creditname_ != &::google::protobuf::internal::kEmptyString) {
        creditname_->clear();
      }
    }
    if (has_creditcode()) {
      if (creditcode_ != &::google::protobuf::internal::kEmptyString) {
        creditcode_->clear();
      }
    }
    producttypeid_ = 0;
    if (has_producttypename()) {
      if (producttypename_ != &::google::protobuf::internal::kEmptyString) {
        producttypename_->clear();
      }
    }
    productid_ = 0;
    if (has_productcode()) {
      if (productcode_ != &::google::protobuf::internal::kEmptyString) {
        productcode_->clear();
      }
    }
    if (has_productname()) {
      if (productname_ != &::google::protobuf::internal::kEmptyString) {
        productname_->clear();
      }
    }
    if (has_strbuymoney()) {
      if (strbuymoney_ != &::google::protobuf::internal::kEmptyString) {
        strbuymoney_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_strgrade()) {
      if (strgrade_ != &::google::protobuf::internal::kEmptyString) {
        strgrade_->clear();
      }
    }
    videonum_ = 0;
    if (has_businesstime()) {
      if (businesstime_ != &::google::protobuf::internal::kEmptyString) {
        businesstime_->clear();
      }
    }
    lockclient_ = 0;
    if (has_strlockclient()) {
      if (strlockclient_ != &::google::protobuf::internal::kEmptyString) {
        strlockclient_->clear();
      }
    }
    recordstatus_ = 0;
    if (has_strrecordstatus()) {
      if (strrecordstatus_ != &::google::protobuf::internal::kEmptyString) {
        strrecordstatus_->clear();
      }
    }
    if (has_picturestrart()) {
      if (picturestrart_ != &::google::protobuf::internal::kEmptyString) {
        picturestrart_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_pictureend()) {
      if (pictureend_ != &::google::protobuf::internal::kEmptyString) {
        pictureend_->clear();
      }
    }
  }
  recordsdetailinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nProId;
        break;
      }
      
      // optional string nProId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nProId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nproid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nproid().data(), this->nproid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inputRegionId;
        break;
      }
      
      // optional int32 inputRegionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputRegionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputregionid_)));
          set_has_inputregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_inputRegionCode;
        break;
      }
      
      // optional string inputRegionCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputRegionCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputregioncode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inputregioncode().data(), this->inputregioncode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_inputRegionName;
        break;
      }
      
      // optional string inputRegionName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputRegionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputregionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inputregionname().data(), this->inputregionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_custName;
        break;
      }
      
      // optional string custName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custname().data(), this->custname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strCreditPhone;
        break;
      }
      
      // optional string strCreditPhone = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCreditPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcreditphone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcreditphone().data(), this->strcreditphone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_creditId;
        break;
      }
      
      // optional int32 creditId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creditId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creditid_)));
          set_has_creditid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_creditName;
        break;
      }
      
      // optional string creditName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creditName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creditname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creditname().data(), this->creditname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_creditCode;
        break;
      }
      
      // optional string creditCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creditCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creditcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creditcode().data(), this->creditcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_productTypeId;
        break;
      }
      
      // optional int32 productTypeId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productTypeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &producttypeid_)));
          set_has_producttypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_productTypeName;
        break;
      }
      
      // optional string productTypeName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productTypeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producttypename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->producttypename().data(), this->producttypename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_productId;
        break;
      }
      
      // optional int32 productId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_productCode;
        break;
      }
      
      // optional string productCode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productcode().data(), this->productcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_productName;
        break;
      }
      
      // optional string productName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productname().data(), this->productname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_strBuyMoney;
        break;
      }
      
      // optional string strBuyMoney = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strBuyMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strbuymoney()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strbuymoney().data(), this->strbuymoney().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_strGrade;
        break;
      }
      
      // optional string strGrade = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strGrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strgrade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strgrade().data(), this->strgrade().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_videoNum;
        break;
      }
      
      // optional int32 videoNum = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videonum_)));
          set_has_videonum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_businessTime;
        break;
      }
      
      // optional string businessTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_businessTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businesstime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->businesstime().data(), this->businesstime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_lockClient;
        break;
      }
      
      // optional int32 lockClient = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockClient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lockclient_)));
          set_has_lockclient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_strlockClient;
        break;
      }
      
      // optional string strlockClient = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strlockClient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strlockclient()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strlockclient().data(), this->strlockclient().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_recordStatus;
        break;
      }
      
      // optional int32 recordStatus = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordstatus_)));
          set_has_recordstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_strRecordStatus;
        break;
      }
      
      // optional string strRecordStatus = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRecordStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strrecordstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strrecordstatus().data(), this->strrecordstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_pictureStrart;
        break;
      }
      
      // optional string pictureStrart = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pictureStrart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picturestrart()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picturestrart().data(), this->picturestrart().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_pictureEnd;
        break;
      }
      
      // optional string pictureEnd = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pictureEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pictureend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pictureend().data(), this->pictureend().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_recordsDetailInfo;
        break;
      }
      
      // repeated .cms_8120.RecordsDetailInfo recordsDetailInfo = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordsDetailInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordsdetailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_recordsDetailInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string nProId = 2;
  if (has_nproid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nproid().data(), this->nproid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nproid(), output);
  }
  
  // optional int32 inputRegionId = 3;
  if (has_inputregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inputregionid(), output);
  }
  
  // optional string inputRegionCode = 4;
  if (has_inputregioncode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputregioncode().data(), this->inputregioncode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->inputregioncode(), output);
  }
  
  // optional string inputRegionName = 5;
  if (has_inputregionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputregionname().data(), this->inputregionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->inputregionname(), output);
  }
  
  // optional string custName = 6;
  if (has_custname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custname().data(), this->custname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->custname(), output);
  }
  
  // optional string strCreditPhone = 7;
  if (has_strcreditphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcreditphone().data(), this->strcreditphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strcreditphone(), output);
  }
  
  // optional int32 creditId = 8;
  if (has_creditid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->creditid(), output);
  }
  
  // optional string creditName = 9;
  if (has_creditname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creditname().data(), this->creditname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->creditname(), output);
  }
  
  // optional string creditCode = 10;
  if (has_creditcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creditcode().data(), this->creditcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->creditcode(), output);
  }
  
  // optional int32 productTypeId = 11;
  if (has_producttypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->producttypeid(), output);
  }
  
  // optional string productTypeName = 12;
  if (has_producttypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttypename().data(), this->producttypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->producttypename(), output);
  }
  
  // optional int32 productId = 13;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->productid(), output);
  }
  
  // optional string productCode = 14;
  if (has_productcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productcode().data(), this->productcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->productcode(), output);
  }
  
  // optional string productName = 15;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->productname(), output);
  }
  
  // optional string strBuyMoney = 16;
  if (has_strbuymoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbuymoney().data(), this->strbuymoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->strbuymoney(), output);
  }
  
  // optional string strGrade = 17;
  if (has_strgrade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strgrade().data(), this->strgrade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->strgrade(), output);
  }
  
  // optional int32 videoNum = 18;
  if (has_videonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->videonum(), output);
  }
  
  // optional string businessTime = 19;
  if (has_businesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businesstime().data(), this->businesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->businesstime(), output);
  }
  
  // optional int32 lockClient = 20;
  if (has_lockclient()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->lockclient(), output);
  }
  
  // optional string strlockClient = 21;
  if (has_strlockclient()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strlockclient().data(), this->strlockclient().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->strlockclient(), output);
  }
  
  // optional int32 recordStatus = 22;
  if (has_recordstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->recordstatus(), output);
  }
  
  // optional string strRecordStatus = 23;
  if (has_strrecordstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordstatus().data(), this->strrecordstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->strrecordstatus(), output);
  }
  
  // optional string pictureStrart = 24;
  if (has_picturestrart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picturestrart().data(), this->picturestrart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->picturestrart(), output);
  }
  
  // optional string pictureEnd = 25;
  if (has_pictureend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pictureend().data(), this->pictureend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->pictureend(), output);
  }
  
  // repeated .cms_8120.RecordsDetailInfo recordsDetailInfo = 26;
  for (int i = 0; i < this->recordsdetailinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->recordsdetailinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string nProId = 2;
  if (has_nproid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nproid().data(), this->nproid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nproid(), target);
  }
  
  // optional int32 inputRegionId = 3;
  if (has_inputregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inputregionid(), target);
  }
  
  // optional string inputRegionCode = 4;
  if (has_inputregioncode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputregioncode().data(), this->inputregioncode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->inputregioncode(), target);
  }
  
  // optional string inputRegionName = 5;
  if (has_inputregionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputregionname().data(), this->inputregionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->inputregionname(), target);
  }
  
  // optional string custName = 6;
  if (has_custname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custname().data(), this->custname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->custname(), target);
  }
  
  // optional string strCreditPhone = 7;
  if (has_strcreditphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcreditphone().data(), this->strcreditphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strcreditphone(), target);
  }
  
  // optional int32 creditId = 8;
  if (has_creditid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->creditid(), target);
  }
  
  // optional string creditName = 9;
  if (has_creditname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creditname().data(), this->creditname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->creditname(), target);
  }
  
  // optional string creditCode = 10;
  if (has_creditcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creditcode().data(), this->creditcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->creditcode(), target);
  }
  
  // optional int32 productTypeId = 11;
  if (has_producttypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->producttypeid(), target);
  }
  
  // optional string productTypeName = 12;
  if (has_producttypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttypename().data(), this->producttypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->producttypename(), target);
  }
  
  // optional int32 productId = 13;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->productid(), target);
  }
  
  // optional string productCode = 14;
  if (has_productcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productcode().data(), this->productcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->productcode(), target);
  }
  
  // optional string productName = 15;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->productname(), target);
  }
  
  // optional string strBuyMoney = 16;
  if (has_strbuymoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbuymoney().data(), this->strbuymoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->strbuymoney(), target);
  }
  
  // optional string strGrade = 17;
  if (has_strgrade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strgrade().data(), this->strgrade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->strgrade(), target);
  }
  
  // optional int32 videoNum = 18;
  if (has_videonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->videonum(), target);
  }
  
  // optional string businessTime = 19;
  if (has_businesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businesstime().data(), this->businesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->businesstime(), target);
  }
  
  // optional int32 lockClient = 20;
  if (has_lockclient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->lockclient(), target);
  }
  
  // optional string strlockClient = 21;
  if (has_strlockclient()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strlockclient().data(), this->strlockclient().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->strlockclient(), target);
  }
  
  // optional int32 recordStatus = 22;
  if (has_recordstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->recordstatus(), target);
  }
  
  // optional string strRecordStatus = 23;
  if (has_strrecordstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordstatus().data(), this->strrecordstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->strrecordstatus(), target);
  }
  
  // optional string pictureStrart = 24;
  if (has_picturestrart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picturestrart().data(), this->picturestrart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->picturestrart(), target);
  }
  
  // optional string pictureEnd = 25;
  if (has_pictureend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pictureend().data(), this->pictureend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->pictureend(), target);
  }
  
  // repeated .cms_8120.RecordsDetailInfo recordsDetailInfo = 26;
  for (int i = 0; i < this->recordsdetailinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->recordsdetailinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordsInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string nProId = 2;
    if (has_nproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nproid());
    }
    
    // optional int32 inputRegionId = 3;
    if (has_inputregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputregionid());
    }
    
    // optional string inputRegionCode = 4;
    if (has_inputregioncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputregioncode());
    }
    
    // optional string inputRegionName = 5;
    if (has_inputregionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputregionname());
    }
    
    // optional string custName = 6;
    if (has_custname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custname());
    }
    
    // optional string strCreditPhone = 7;
    if (has_strcreditphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcreditphone());
    }
    
    // optional int32 creditId = 8;
    if (has_creditid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creditid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string creditName = 9;
    if (has_creditname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creditname());
    }
    
    // optional string creditCode = 10;
    if (has_creditcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creditcode());
    }
    
    // optional int32 productTypeId = 11;
    if (has_producttypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->producttypeid());
    }
    
    // optional string productTypeName = 12;
    if (has_producttypename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->producttypename());
    }
    
    // optional int32 productId = 13;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }
    
    // optional string productCode = 14;
    if (has_productcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productcode());
    }
    
    // optional string productName = 15;
    if (has_productname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productname());
    }
    
    // optional string strBuyMoney = 16;
    if (has_strbuymoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strbuymoney());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string strGrade = 17;
    if (has_strgrade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strgrade());
    }
    
    // optional int32 videoNum = 18;
    if (has_videonum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videonum());
    }
    
    // optional string businessTime = 19;
    if (has_businesstime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->businesstime());
    }
    
    // optional int32 lockClient = 20;
    if (has_lockclient()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lockclient());
    }
    
    // optional string strlockClient = 21;
    if (has_strlockclient()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strlockclient());
    }
    
    // optional int32 recordStatus = 22;
    if (has_recordstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordstatus());
    }
    
    // optional string strRecordStatus = 23;
    if (has_strrecordstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strrecordstatus());
    }
    
    // optional string pictureStrart = 24;
    if (has_picturestrart()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picturestrart());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string pictureEnd = 25;
    if (has_pictureend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pictureend());
    }
    
  }
  // repeated .cms_8120.RecordsDetailInfo recordsDetailInfo = 26;
  total_size += 2 * this->recordsdetailinfo_size();
  for (int i = 0; i < this->recordsdetailinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordsdetailinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordsInfo::MergeFrom(const RecordsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordsdetailinfo_.MergeFrom(from.recordsdetailinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nproid()) {
      set_nproid(from.nproid());
    }
    if (from.has_inputregionid()) {
      set_inputregionid(from.inputregionid());
    }
    if (from.has_inputregioncode()) {
      set_inputregioncode(from.inputregioncode());
    }
    if (from.has_inputregionname()) {
      set_inputregionname(from.inputregionname());
    }
    if (from.has_custname()) {
      set_custname(from.custname());
    }
    if (from.has_strcreditphone()) {
      set_strcreditphone(from.strcreditphone());
    }
    if (from.has_creditid()) {
      set_creditid(from.creditid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_creditname()) {
      set_creditname(from.creditname());
    }
    if (from.has_creditcode()) {
      set_creditcode(from.creditcode());
    }
    if (from.has_producttypeid()) {
      set_producttypeid(from.producttypeid());
    }
    if (from.has_producttypename()) {
      set_producttypename(from.producttypename());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_productcode()) {
      set_productcode(from.productcode());
    }
    if (from.has_productname()) {
      set_productname(from.productname());
    }
    if (from.has_strbuymoney()) {
      set_strbuymoney(from.strbuymoney());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_strgrade()) {
      set_strgrade(from.strgrade());
    }
    if (from.has_videonum()) {
      set_videonum(from.videonum());
    }
    if (from.has_businesstime()) {
      set_businesstime(from.businesstime());
    }
    if (from.has_lockclient()) {
      set_lockclient(from.lockclient());
    }
    if (from.has_strlockclient()) {
      set_strlockclient(from.strlockclient());
    }
    if (from.has_recordstatus()) {
      set_recordstatus(from.recordstatus());
    }
    if (from.has_strrecordstatus()) {
      set_strrecordstatus(from.strrecordstatus());
    }
    if (from.has_picturestrart()) {
      set_picturestrart(from.picturestrart());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_pictureend()) {
      set_pictureend(from.pictureend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordsInfo::CopyFrom(const RecordsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordsInfo::IsInitialized() const {
  
  return true;
}

void RecordsInfo::Swap(RecordsInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nproid_, other->nproid_);
    std::swap(inputregionid_, other->inputregionid_);
    std::swap(inputregioncode_, other->inputregioncode_);
    std::swap(inputregionname_, other->inputregionname_);
    std::swap(custname_, other->custname_);
    std::swap(strcreditphone_, other->strcreditphone_);
    std::swap(creditid_, other->creditid_);
    std::swap(creditname_, other->creditname_);
    std::swap(creditcode_, other->creditcode_);
    std::swap(producttypeid_, other->producttypeid_);
    std::swap(producttypename_, other->producttypename_);
    std::swap(productid_, other->productid_);
    std::swap(productcode_, other->productcode_);
    std::swap(productname_, other->productname_);
    std::swap(strbuymoney_, other->strbuymoney_);
    std::swap(strgrade_, other->strgrade_);
    std::swap(videonum_, other->videonum_);
    std::swap(businesstime_, other->businesstime_);
    std::swap(lockclient_, other->lockclient_);
    std::swap(strlockclient_, other->strlockclient_);
    std::swap(recordstatus_, other->recordstatus_);
    std::swap(strrecordstatus_, other->strrecordstatus_);
    std::swap(picturestrart_, other->picturestrart_);
    std::swap(pictureend_, other->pictureend_);
    recordsdetailinfo_.Swap(&other->recordsdetailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordsInfo_descriptor_;
  metadata.reflection = RecordsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRecordsInfo::kCmdFieldNumber;
const int ReqRecordsInfo::kRecordTabFieldNumber;
const int ReqRecordsInfo::kStartDateFieldNumber;
const int ReqRecordsInfo::kEndDateFieldNumber;
const int ReqRecordsInfo::kPageNoFieldNumber;
const int ReqRecordsInfo::kPageSizeFieldNumber;
const int ReqRecordsInfo::kInputUserFieldNumber;
const int ReqRecordsInfo::kProductNameFieldNumber;
const int ReqRecordsInfo::kCustNameFieldNumber;
#endif  // !_MSC_VER

ReqRecordsInfo::ReqRecordsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRecordsInfo::InitAsDefaultInstance() {
}

ReqRecordsInfo::ReqRecordsInfo(const ReqRecordsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRecordsInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  recordtab_ = 0;
  startdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pageno_ = 0;
  pagesize_ = 0;
  inputuser_ = 0;
  productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRecordsInfo::~ReqRecordsInfo() {
  SharedDtor();
}

void ReqRecordsInfo::SharedDtor() {
  if (startdate_ != &::google::protobuf::internal::kEmptyString) {
    delete startdate_;
  }
  if (enddate_ != &::google::protobuf::internal::kEmptyString) {
    delete enddate_;
  }
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    delete productname_;
  }
  if (custname_ != &::google::protobuf::internal::kEmptyString) {
    delete custname_;
  }
  if (this != default_instance_) {
  }
}

void ReqRecordsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRecordsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRecordsInfo_descriptor_;
}

const ReqRecordsInfo& ReqRecordsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

ReqRecordsInfo* ReqRecordsInfo::default_instance_ = NULL;

ReqRecordsInfo* ReqRecordsInfo::New() const {
  return new ReqRecordsInfo;
}

void ReqRecordsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    recordtab_ = 0;
    if (has_startdate()) {
      if (startdate_ != &::google::protobuf::internal::kEmptyString) {
        startdate_->clear();
      }
    }
    if (has_enddate()) {
      if (enddate_ != &::google::protobuf::internal::kEmptyString) {
        enddate_->clear();
      }
    }
    pageno_ = 0;
    pagesize_ = 0;
    inputuser_ = 0;
    if (has_productname()) {
      if (productname_ != &::google::protobuf::internal::kEmptyString) {
        productname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_custname()) {
      if (custname_ != &::google::protobuf::internal::kEmptyString) {
        custname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRecordsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recordTab;
        break;
      }
      
      // optional int32 recordTab = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordTab:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordtab_)));
          set_has_recordtab();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_startDate;
        break;
      }
      
      // optional string startDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->startdate().data(), this->startdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_endDate;
        break;
      }
      
      // optional string endDate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enddate().data(), this->enddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pageNo;
        break;
      }
      
      // optional int32 pageNo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pageno_)));
          set_has_pageno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pageSize;
        break;
      }
      
      // optional int32 pageSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inputUser;
        break;
      }
      
      // optional int32 inputUser = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputuser_)));
          set_has_inputuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_productName;
        break;
      }
      
      // optional string productName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productname().data(), this->productname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_custName;
        break;
      }
      
      // optional string custName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custname().data(), this->custname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRecordsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 recordTab = 2;
  if (has_recordtab()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recordtab(), output);
  }
  
  // optional string startDate = 3;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->startdate(), output);
  }
  
  // optional string endDate = 4;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->enddate(), output);
  }
  
  // optional int32 pageNo = 5;
  if (has_pageno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pageno(), output);
  }
  
  // optional int32 pageSize = 6;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pagesize(), output);
  }
  
  // optional int32 inputUser = 7;
  if (has_inputuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->inputuser(), output);
  }
  
  // optional string productName = 8;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->productname(), output);
  }
  
  // optional string custName = 9;
  if (has_custname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custname().data(), this->custname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->custname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRecordsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 recordTab = 2;
  if (has_recordtab()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recordtab(), target);
  }
  
  // optional string startDate = 3;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->startdate(), target);
  }
  
  // optional string endDate = 4;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->enddate(), target);
  }
  
  // optional int32 pageNo = 5;
  if (has_pageno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pageno(), target);
  }
  
  // optional int32 pageSize = 6;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pagesize(), target);
  }
  
  // optional int32 inputUser = 7;
  if (has_inputuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->inputuser(), target);
  }
  
  // optional string productName = 8;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->productname(), target);
  }
  
  // optional string custName = 9;
  if (has_custname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custname().data(), this->custname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->custname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRecordsInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 recordTab = 2;
    if (has_recordtab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordtab());
    }
    
    // optional string startDate = 3;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startdate());
    }
    
    // optional string endDate = 4;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enddate());
    }
    
    // optional int32 pageNo = 5;
    if (has_pageno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pageno());
    }
    
    // optional int32 pageSize = 6;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagesize());
    }
    
    // optional int32 inputUser = 7;
    if (has_inputuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputuser());
    }
    
    // optional string productName = 8;
    if (has_productname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string custName = 9;
    if (has_custname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRecordsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRecordsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRecordsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRecordsInfo::MergeFrom(const ReqRecordsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_recordtab()) {
      set_recordtab(from.recordtab());
    }
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
    if (from.has_enddate()) {
      set_enddate(from.enddate());
    }
    if (from.has_pageno()) {
      set_pageno(from.pageno());
    }
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
    if (from.has_inputuser()) {
      set_inputuser(from.inputuser());
    }
    if (from.has_productname()) {
      set_productname(from.productname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_custname()) {
      set_custname(from.custname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRecordsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRecordsInfo::CopyFrom(const ReqRecordsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRecordsInfo::IsInitialized() const {
  
  return true;
}

void ReqRecordsInfo::Swap(ReqRecordsInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(recordtab_, other->recordtab_);
    std::swap(startdate_, other->startdate_);
    std::swap(enddate_, other->enddate_);
    std::swap(pageno_, other->pageno_);
    std::swap(pagesize_, other->pagesize_);
    std::swap(inputuser_, other->inputuser_);
    std::swap(productname_, other->productname_);
    std::swap(custname_, other->custname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRecordsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRecordsInfo_descriptor_;
  metadata.reflection = ReqRecordsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspCsClientRecordsInfo::kCmdFieldNumber;
const int RspCsClientRecordsInfo::kResultFieldNumber;
const int RspCsClientRecordsInfo::kResultInfoFieldNumber;
const int RspCsClientRecordsInfo::kRecordsInfoFieldNumber;
#endif  // !_MSC_VER

RspCsClientRecordsInfo::RspCsClientRecordsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspCsClientRecordsInfo::InitAsDefaultInstance() {
}

RspCsClientRecordsInfo::RspCsClientRecordsInfo(const RspCsClientRecordsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspCsClientRecordsInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  result_ = 0;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCsClientRecordsInfo::~RspCsClientRecordsInfo() {
  SharedDtor();
}

void RspCsClientRecordsInfo::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (this != default_instance_) {
  }
}

void RspCsClientRecordsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCsClientRecordsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCsClientRecordsInfo_descriptor_;
}

const RspCsClientRecordsInfo& RspCsClientRecordsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

RspCsClientRecordsInfo* RspCsClientRecordsInfo::default_instance_ = NULL;

RspCsClientRecordsInfo* RspCsClientRecordsInfo::New() const {
  return new RspCsClientRecordsInfo;
}

void RspCsClientRecordsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    result_ = 0;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
  }
  recordsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCsClientRecordsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }
      
      // optional string result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recordsInfo;
        break;
      }
      
      // repeated .cms_8120.RecordsInfo recordsInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recordsInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspCsClientRecordsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result_info(), output);
  }
  
  // repeated .cms_8120.RecordsInfo recordsInfo = 4;
  for (int i = 0; i < this->recordsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recordsinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspCsClientRecordsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_info(), target);
  }
  
  // repeated .cms_8120.RecordsInfo recordsInfo = 4;
  for (int i = 0; i < this->recordsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recordsinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspCsClientRecordsInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }
    
  }
  // repeated .cms_8120.RecordsInfo recordsInfo = 4;
  total_size += 1 * this->recordsinfo_size();
  for (int i = 0; i < this->recordsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordsinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCsClientRecordsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCsClientRecordsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCsClientRecordsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCsClientRecordsInfo::MergeFrom(const RspCsClientRecordsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordsinfo_.MergeFrom(from.recordsinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCsClientRecordsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCsClientRecordsInfo::CopyFrom(const RspCsClientRecordsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCsClientRecordsInfo::IsInitialized() const {
  
  return true;
}

void RspCsClientRecordsInfo::Swap(RspCsClientRecordsInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(result_, other->result_);
    std::swap(result_info_, other->result_info_);
    recordsinfo_.Swap(&other->recordsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCsClientRecordsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCsClientRecordsInfo_descriptor_;
  metadata.reflection = RspCsClientRecordsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ErrRecordsInfo::kIdFieldNumber;
const int ErrRecordsInfo::kFileNameFieldNumber;
const int ErrRecordsInfo::kNProIdFieldNumber;
const int ErrRecordsInfo::kCustNameFieldNumber;
const int ErrRecordsInfo::kBusinessTimeFieldNumber;
const int ErrRecordsInfo::kRecordStatusFieldNumber;
const int ErrRecordsInfo::kStrRecordStatusFieldNumber;
const int ErrRecordsInfo::kProductTypeIdFieldNumber;
const int ErrRecordsInfo::kProductTypeNameFieldNumber;
const int ErrRecordsInfo::kProductIdFieldNumber;
const int ErrRecordsInfo::kProductCodeFieldNumber;
const int ErrRecordsInfo::kProductNameFieldNumber;
const int ErrRecordsInfo::kStrBuyMoneyFieldNumber;
const int ErrRecordsInfo::kRecordCheckFieldNumber;
const int ErrRecordsInfo::kStrRecordCheckFieldNumber;
const int ErrRecordsInfo::kStrUrlFieldNumber;
#endif  // !_MSC_VER

ErrRecordsInfo::ErrRecordsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErrRecordsInfo::InitAsDefaultInstance() {
}

ErrRecordsInfo::ErrRecordsInfo(const ErrRecordsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErrRecordsInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nproid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  businesstime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recordstatus_ = 0;
  strrecordstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  producttypeid_ = 0;
  producttypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = 0;
  productcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strbuymoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recordcheck_ = 0;
  strrecordcheck_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrRecordsInfo::~ErrRecordsInfo() {
  SharedDtor();
}

void ErrRecordsInfo::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (nproid_ != &::google::protobuf::internal::kEmptyString) {
    delete nproid_;
  }
  if (custname_ != &::google::protobuf::internal::kEmptyString) {
    delete custname_;
  }
  if (businesstime_ != &::google::protobuf::internal::kEmptyString) {
    delete businesstime_;
  }
  if (strrecordstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete strrecordstatus_;
  }
  if (producttypename_ != &::google::protobuf::internal::kEmptyString) {
    delete producttypename_;
  }
  if (productcode_ != &::google::protobuf::internal::kEmptyString) {
    delete productcode_;
  }
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    delete productname_;
  }
  if (strbuymoney_ != &::google::protobuf::internal::kEmptyString) {
    delete strbuymoney_;
  }
  if (strrecordcheck_ != &::google::protobuf::internal::kEmptyString) {
    delete strrecordcheck_;
  }
  if (strurl_ != &::google::protobuf::internal::kEmptyString) {
    delete strurl_;
  }
  if (this != default_instance_) {
  }
}

void ErrRecordsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrRecordsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrRecordsInfo_descriptor_;
}

const ErrRecordsInfo& ErrRecordsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

ErrRecordsInfo* ErrRecordsInfo::default_instance_ = NULL;

ErrRecordsInfo* ErrRecordsInfo::New() const {
  return new ErrRecordsInfo;
}

void ErrRecordsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_nproid()) {
      if (nproid_ != &::google::protobuf::internal::kEmptyString) {
        nproid_->clear();
      }
    }
    if (has_custname()) {
      if (custname_ != &::google::protobuf::internal::kEmptyString) {
        custname_->clear();
      }
    }
    if (has_businesstime()) {
      if (businesstime_ != &::google::protobuf::internal::kEmptyString) {
        businesstime_->clear();
      }
    }
    recordstatus_ = 0;
    if (has_strrecordstatus()) {
      if (strrecordstatus_ != &::google::protobuf::internal::kEmptyString) {
        strrecordstatus_->clear();
      }
    }
    producttypeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_producttypename()) {
      if (producttypename_ != &::google::protobuf::internal::kEmptyString) {
        producttypename_->clear();
      }
    }
    productid_ = 0;
    if (has_productcode()) {
      if (productcode_ != &::google::protobuf::internal::kEmptyString) {
        productcode_->clear();
      }
    }
    if (has_productname()) {
      if (productname_ != &::google::protobuf::internal::kEmptyString) {
        productname_->clear();
      }
    }
    if (has_strbuymoney()) {
      if (strbuymoney_ != &::google::protobuf::internal::kEmptyString) {
        strbuymoney_->clear();
      }
    }
    recordcheck_ = 0;
    if (has_strrecordcheck()) {
      if (strrecordcheck_ != &::google::protobuf::internal::kEmptyString) {
        strrecordcheck_->clear();
      }
    }
    if (has_strurl()) {
      if (strurl_ != &::google::protobuf::internal::kEmptyString) {
        strurl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrRecordsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fileName;
        break;
      }
      
      // optional string fileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nProId;
        break;
      }
      
      // optional string nProId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nProId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nproid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nproid().data(), this->nproid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_custName;
        break;
      }
      
      // optional string custName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custname().data(), this->custname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_businessTime;
        break;
      }
      
      // optional string businessTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_businessTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businesstime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->businesstime().data(), this->businesstime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_recordStatus;
        break;
      }
      
      // optional int32 recordStatus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordstatus_)));
          set_has_recordstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strRecordStatus;
        break;
      }
      
      // optional string strRecordStatus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRecordStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strrecordstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strrecordstatus().data(), this->strrecordstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_productTypeId;
        break;
      }
      
      // optional int32 productTypeId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productTypeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &producttypeid_)));
          set_has_producttypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_productTypeName;
        break;
      }
      
      // optional string productTypeName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productTypeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producttypename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->producttypename().data(), this->producttypename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_productId;
        break;
      }
      
      // optional int32 productId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_productCode;
        break;
      }
      
      // optional string productCode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productcode().data(), this->productcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_productName;
        break;
      }
      
      // optional string productName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productname().data(), this->productname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_strBuyMoney;
        break;
      }
      
      // optional string strBuyMoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strBuyMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strbuymoney()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strbuymoney().data(), this->strbuymoney().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_recordCheck;
        break;
      }
      
      // optional int32 recordCheck = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordCheck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordcheck_)));
          set_has_recordcheck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_strRecordCheck;
        break;
      }
      
      // optional string strRecordCheck = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRecordCheck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strrecordcheck()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strrecordcheck().data(), this->strrecordcheck().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_strUrl;
        break;
      }
      
      // optional string strUrl = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strurl().data(), this->strurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErrRecordsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string fileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }
  
  // optional string nProId = 3;
  if (has_nproid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nproid().data(), this->nproid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nproid(), output);
  }
  
  // optional string custName = 4;
  if (has_custname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custname().data(), this->custname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->custname(), output);
  }
  
  // optional string businessTime = 5;
  if (has_businesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businesstime().data(), this->businesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->businesstime(), output);
  }
  
  // optional int32 recordStatus = 6;
  if (has_recordstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->recordstatus(), output);
  }
  
  // optional string strRecordStatus = 7;
  if (has_strrecordstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordstatus().data(), this->strrecordstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strrecordstatus(), output);
  }
  
  // optional int32 productTypeId = 8;
  if (has_producttypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->producttypeid(), output);
  }
  
  // optional string productTypeName = 9;
  if (has_producttypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttypename().data(), this->producttypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->producttypename(), output);
  }
  
  // optional int32 productId = 10;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->productid(), output);
  }
  
  // optional string productCode = 11;
  if (has_productcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productcode().data(), this->productcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->productcode(), output);
  }
  
  // optional string productName = 12;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->productname(), output);
  }
  
  // optional string strBuyMoney = 13;
  if (has_strbuymoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbuymoney().data(), this->strbuymoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->strbuymoney(), output);
  }
  
  // optional int32 recordCheck = 14;
  if (has_recordcheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->recordcheck(), output);
  }
  
  // optional string strRecordCheck = 15;
  if (has_strrecordcheck()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordcheck().data(), this->strrecordcheck().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->strrecordcheck(), output);
  }
  
  // optional string strUrl = 16;
  if (has_strurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->strurl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErrRecordsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string fileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }
  
  // optional string nProId = 3;
  if (has_nproid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nproid().data(), this->nproid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nproid(), target);
  }
  
  // optional string custName = 4;
  if (has_custname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custname().data(), this->custname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->custname(), target);
  }
  
  // optional string businessTime = 5;
  if (has_businesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businesstime().data(), this->businesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->businesstime(), target);
  }
  
  // optional int32 recordStatus = 6;
  if (has_recordstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->recordstatus(), target);
  }
  
  // optional string strRecordStatus = 7;
  if (has_strrecordstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordstatus().data(), this->strrecordstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strrecordstatus(), target);
  }
  
  // optional int32 productTypeId = 8;
  if (has_producttypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->producttypeid(), target);
  }
  
  // optional string productTypeName = 9;
  if (has_producttypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttypename().data(), this->producttypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->producttypename(), target);
  }
  
  // optional int32 productId = 10;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->productid(), target);
  }
  
  // optional string productCode = 11;
  if (has_productcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productcode().data(), this->productcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->productcode(), target);
  }
  
  // optional string productName = 12;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->productname(), target);
  }
  
  // optional string strBuyMoney = 13;
  if (has_strbuymoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbuymoney().data(), this->strbuymoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->strbuymoney(), target);
  }
  
  // optional int32 recordCheck = 14;
  if (has_recordcheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->recordcheck(), target);
  }
  
  // optional string strRecordCheck = 15;
  if (has_strrecordcheck()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordcheck().data(), this->strrecordcheck().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->strrecordcheck(), target);
  }
  
  // optional string strUrl = 16;
  if (has_strurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->strurl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErrRecordsInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string fileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // optional string nProId = 3;
    if (has_nproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nproid());
    }
    
    // optional string custName = 4;
    if (has_custname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custname());
    }
    
    // optional string businessTime = 5;
    if (has_businesstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->businesstime());
    }
    
    // optional int32 recordStatus = 6;
    if (has_recordstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordstatus());
    }
    
    // optional string strRecordStatus = 7;
    if (has_strrecordstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strrecordstatus());
    }
    
    // optional int32 productTypeId = 8;
    if (has_producttypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->producttypeid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string productTypeName = 9;
    if (has_producttypename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->producttypename());
    }
    
    // optional int32 productId = 10;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }
    
    // optional string productCode = 11;
    if (has_productcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productcode());
    }
    
    // optional string productName = 12;
    if (has_productname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productname());
    }
    
    // optional string strBuyMoney = 13;
    if (has_strbuymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strbuymoney());
    }
    
    // optional int32 recordCheck = 14;
    if (has_recordcheck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordcheck());
    }
    
    // optional string strRecordCheck = 15;
    if (has_strrecordcheck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strrecordcheck());
    }
    
    // optional string strUrl = 16;
    if (has_strurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strurl());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrRecordsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrRecordsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrRecordsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrRecordsInfo::MergeFrom(const ErrRecordsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_nproid()) {
      set_nproid(from.nproid());
    }
    if (from.has_custname()) {
      set_custname(from.custname());
    }
    if (from.has_businesstime()) {
      set_businesstime(from.businesstime());
    }
    if (from.has_recordstatus()) {
      set_recordstatus(from.recordstatus());
    }
    if (from.has_strrecordstatus()) {
      set_strrecordstatus(from.strrecordstatus());
    }
    if (from.has_producttypeid()) {
      set_producttypeid(from.producttypeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_producttypename()) {
      set_producttypename(from.producttypename());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_productcode()) {
      set_productcode(from.productcode());
    }
    if (from.has_productname()) {
      set_productname(from.productname());
    }
    if (from.has_strbuymoney()) {
      set_strbuymoney(from.strbuymoney());
    }
    if (from.has_recordcheck()) {
      set_recordcheck(from.recordcheck());
    }
    if (from.has_strrecordcheck()) {
      set_strrecordcheck(from.strrecordcheck());
    }
    if (from.has_strurl()) {
      set_strurl(from.strurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrRecordsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrRecordsInfo::CopyFrom(const ErrRecordsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrRecordsInfo::IsInitialized() const {
  
  return true;
}

void ErrRecordsInfo::Swap(ErrRecordsInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(filename_, other->filename_);
    std::swap(nproid_, other->nproid_);
    std::swap(custname_, other->custname_);
    std::swap(businesstime_, other->businesstime_);
    std::swap(recordstatus_, other->recordstatus_);
    std::swap(strrecordstatus_, other->strrecordstatus_);
    std::swap(producttypeid_, other->producttypeid_);
    std::swap(producttypename_, other->producttypename_);
    std::swap(productid_, other->productid_);
    std::swap(productcode_, other->productcode_);
    std::swap(productname_, other->productname_);
    std::swap(strbuymoney_, other->strbuymoney_);
    std::swap(recordcheck_, other->recordcheck_);
    std::swap(strrecordcheck_, other->strrecordcheck_);
    std::swap(strurl_, other->strurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrRecordsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrRecordsInfo_descriptor_;
  metadata.reflection = ErrRecordsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspErrRecordsInfo::kCmdFieldNumber;
const int RspErrRecordsInfo::kResultFieldNumber;
const int RspErrRecordsInfo::kResultInfoFieldNumber;
const int RspErrRecordsInfo::kErrRecordsInfoFieldNumber;
#endif  // !_MSC_VER

RspErrRecordsInfo::RspErrRecordsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspErrRecordsInfo::InitAsDefaultInstance() {
}

RspErrRecordsInfo::RspErrRecordsInfo(const RspErrRecordsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspErrRecordsInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  result_ = 0;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspErrRecordsInfo::~RspErrRecordsInfo() {
  SharedDtor();
}

void RspErrRecordsInfo::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (this != default_instance_) {
  }
}

void RspErrRecordsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspErrRecordsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspErrRecordsInfo_descriptor_;
}

const RspErrRecordsInfo& RspErrRecordsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

RspErrRecordsInfo* RspErrRecordsInfo::default_instance_ = NULL;

RspErrRecordsInfo* RspErrRecordsInfo::New() const {
  return new RspErrRecordsInfo;
}

void RspErrRecordsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    result_ = 0;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
  }
  errrecordsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspErrRecordsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }
      
      // optional string result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_errRecordsInfo;
        break;
      }
      
      // repeated .cms_8120.ErrRecordsInfo errRecordsInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errRecordsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_errrecordsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_errRecordsInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspErrRecordsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result_info(), output);
  }
  
  // repeated .cms_8120.ErrRecordsInfo errRecordsInfo = 4;
  for (int i = 0; i < this->errrecordsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->errrecordsinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspErrRecordsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_info(), target);
  }
  
  // repeated .cms_8120.ErrRecordsInfo errRecordsInfo = 4;
  for (int i = 0; i < this->errrecordsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->errrecordsinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspErrRecordsInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }
    
  }
  // repeated .cms_8120.ErrRecordsInfo errRecordsInfo = 4;
  total_size += 1 * this->errrecordsinfo_size();
  for (int i = 0; i < this->errrecordsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->errrecordsinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspErrRecordsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspErrRecordsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspErrRecordsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspErrRecordsInfo::MergeFrom(const RspErrRecordsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  errrecordsinfo_.MergeFrom(from.errrecordsinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspErrRecordsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspErrRecordsInfo::CopyFrom(const RspErrRecordsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspErrRecordsInfo::IsInitialized() const {
  
  return true;
}

void RspErrRecordsInfo::Swap(RspErrRecordsInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(result_, other->result_);
    std::swap(result_info_, other->result_info_);
    errrecordsinfo_.Swap(&other->errrecordsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspErrRecordsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspErrRecordsInfo_descriptor_;
  metadata.reflection = RspErrRecordsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqErrorRecord::kCmdFieldNumber;
const int ReqErrorRecord::kIdFieldNumber;
const int ReqErrorRecord::kInputUserFieldNumber;
#endif  // !_MSC_VER

ReqErrorRecord::ReqErrorRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqErrorRecord::InitAsDefaultInstance() {
}

ReqErrorRecord::ReqErrorRecord(const ReqErrorRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqErrorRecord::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  inputuser_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqErrorRecord::~ReqErrorRecord() {
  SharedDtor();
}

void ReqErrorRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqErrorRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqErrorRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqErrorRecord_descriptor_;
}

const ReqErrorRecord& ReqErrorRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

ReqErrorRecord* ReqErrorRecord::default_instance_ = NULL;

ReqErrorRecord* ReqErrorRecord::New() const {
  return new ReqErrorRecord;
}

void ReqErrorRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    inputuser_ = 0;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqErrorRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // repeated int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        if (input->ExpectTag(24)) goto parse_inputUser;
        break;
      }
      
      // optional int32 inputUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputuser_)));
          set_has_inputuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqErrorRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // repeated int32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->id(i), output);
  }
  
  // optional int32 inputUser = 3;
  if (has_inputuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inputuser(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqErrorRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // repeated int32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->id(i), target);
  }
  
  // optional int32 inputUser = 3;
  if (has_inputuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inputuser(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqErrorRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 inputUser = 3;
    if (has_inputuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputuser());
    }
    
  }
  // repeated int32 id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqErrorRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqErrorRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqErrorRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqErrorRecord::MergeFrom(const ReqErrorRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_inputuser()) {
      set_inputuser(from.inputuser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqErrorRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqErrorRecord::CopyFrom(const ReqErrorRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqErrorRecord::IsInitialized() const {
  
  return true;
}

void ReqErrorRecord::Swap(ReqErrorRecord* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    id_.Swap(&other->id_);
    std::swap(inputuser_, other->inputuser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqErrorRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqErrorRecord_descriptor_;
  metadata.reflection = ReqErrorRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPrintRecord::kCmdFieldNumber;
const int ReqPrintRecord::kIdFieldNumber;
const int ReqPrintRecord::kInputUserFieldNumber;
#endif  // !_MSC_VER

ReqPrintRecord::ReqPrintRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPrintRecord::InitAsDefaultInstance() {
}

ReqPrintRecord::ReqPrintRecord(const ReqPrintRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPrintRecord::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  id_ = 0;
  inputuser_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPrintRecord::~ReqPrintRecord() {
  SharedDtor();
}

void ReqPrintRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPrintRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPrintRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPrintRecord_descriptor_;
}

const ReqPrintRecord& ReqPrintRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

ReqPrintRecord* ReqPrintRecord::default_instance_ = NULL;

ReqPrintRecord* ReqPrintRecord::New() const {
  return new ReqPrintRecord;
}

void ReqPrintRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    id_ = 0;
    inputuser_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPrintRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inputUser;
        break;
      }
      
      // optional int32 inputUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputuser_)));
          set_has_inputuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPrintRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 inputUser = 3;
  if (has_inputuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inputuser(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPrintRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 inputUser = 3;
  if (has_inputuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inputuser(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPrintRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 inputUser = 3;
    if (has_inputuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inputuser());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPrintRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPrintRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPrintRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPrintRecord::MergeFrom(const ReqPrintRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_inputuser()) {
      set_inputuser(from.inputuser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPrintRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPrintRecord::CopyFrom(const ReqPrintRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPrintRecord::IsInitialized() const {
  
  return true;
}

void ReqPrintRecord::Swap(ReqPrintRecord* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(id_, other->id_);
    std::swap(inputuser_, other->inputuser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPrintRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPrintRecord_descriptor_;
  metadata.reflection = ReqPrintRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspPrintRecord::kCmdFieldNumber;
const int RspPrintRecord::kResultFieldNumber;
const int RspPrintRecord::kResultInfoFieldNumber;
const int RspPrintRecord::kIdFieldNumber;
const int RspPrintRecord::kNameFieldNumber;
const int RspPrintRecord::kCreditNameFieldNumber;
const int RspPrintRecord::kCreditCodeFieldNumber;
const int RspPrintRecord::kNproIdFieldNumber;
const int RspPrintRecord::kStrGradeFieldNumber;
const int RspPrintRecord::kProductTypeFieldNumber;
const int RspPrintRecord::kProductNameFieldNumber;
const int RspPrintRecord::kProNameFieldNumber;
const int RspPrintRecord::kProUserNoFieldNumber;
const int RspPrintRecord::kPictureStrartFieldNumber;
const int RspPrintRecord::kPictureEndFieldNumber;
const int RspPrintRecord::kBusinessTimeFieldNumber;
#endif  // !_MSC_VER

RspPrintRecord::RspPrintRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspPrintRecord::InitAsDefaultInstance() {
}

RspPrintRecord::RspPrintRecord(const RspPrintRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspPrintRecord::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  result_ = 0;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creditname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creditcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nproid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strgrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  producttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prouserno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picturestrart_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pictureend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  businesstime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspPrintRecord::~RspPrintRecord() {
  SharedDtor();
}

void RspPrintRecord::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (creditname_ != &::google::protobuf::internal::kEmptyString) {
    delete creditname_;
  }
  if (creditcode_ != &::google::protobuf::internal::kEmptyString) {
    delete creditcode_;
  }
  if (nproid_ != &::google::protobuf::internal::kEmptyString) {
    delete nproid_;
  }
  if (strgrade_ != &::google::protobuf::internal::kEmptyString) {
    delete strgrade_;
  }
  if (producttype_ != &::google::protobuf::internal::kEmptyString) {
    delete producttype_;
  }
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    delete productname_;
  }
  if (proname_ != &::google::protobuf::internal::kEmptyString) {
    delete proname_;
  }
  if (prouserno_ != &::google::protobuf::internal::kEmptyString) {
    delete prouserno_;
  }
  if (picturestrart_ != &::google::protobuf::internal::kEmptyString) {
    delete picturestrart_;
  }
  if (pictureend_ != &::google::protobuf::internal::kEmptyString) {
    delete pictureend_;
  }
  if (businesstime_ != &::google::protobuf::internal::kEmptyString) {
    delete businesstime_;
  }
  if (this != default_instance_) {
  }
}

void RspPrintRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspPrintRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspPrintRecord_descriptor_;
}

const RspPrintRecord& RspPrintRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csclient_2fCsClientRecord_2eproto();  return *default_instance_;
}

RspPrintRecord* RspPrintRecord::default_instance_ = NULL;

RspPrintRecord* RspPrintRecord::New() const {
  return new RspPrintRecord;
}

void RspPrintRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    result_ = 0;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_creditname()) {
      if (creditname_ != &::google::protobuf::internal::kEmptyString) {
        creditname_->clear();
      }
    }
    if (has_creditcode()) {
      if (creditcode_ != &::google::protobuf::internal::kEmptyString) {
        creditcode_->clear();
      }
    }
    if (has_nproid()) {
      if (nproid_ != &::google::protobuf::internal::kEmptyString) {
        nproid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_strgrade()) {
      if (strgrade_ != &::google::protobuf::internal::kEmptyString) {
        strgrade_->clear();
      }
    }
    if (has_producttype()) {
      if (producttype_ != &::google::protobuf::internal::kEmptyString) {
        producttype_->clear();
      }
    }
    if (has_productname()) {
      if (productname_ != &::google::protobuf::internal::kEmptyString) {
        productname_->clear();
      }
    }
    if (has_proname()) {
      if (proname_ != &::google::protobuf::internal::kEmptyString) {
        proname_->clear();
      }
    }
    if (has_prouserno()) {
      if (prouserno_ != &::google::protobuf::internal::kEmptyString) {
        prouserno_->clear();
      }
    }
    if (has_picturestrart()) {
      if (picturestrart_ != &::google::protobuf::internal::kEmptyString) {
        picturestrart_->clear();
      }
    }
    if (has_pictureend()) {
      if (pictureend_ != &::google::protobuf::internal::kEmptyString) {
        pictureend_->clear();
      }
    }
    if (has_businesstime()) {
      if (businesstime_ != &::google::protobuf::internal::kEmptyString) {
        businesstime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspPrintRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_info;
        break;
      }
      
      // optional string result_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }
      
      // optional int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_creditName;
        break;
      }
      
      // optional string creditName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creditName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creditname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creditname().data(), this->creditname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_creditCode;
        break;
      }
      
      // optional string creditCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creditCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creditcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creditcode().data(), this->creditcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nproId;
        break;
      }
      
      // optional string nproId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nproId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nproid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nproid().data(), this->nproid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_strGrade;
        break;
      }
      
      // optional string strGrade = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strGrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strgrade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strgrade().data(), this->strgrade().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_productType;
        break;
      }
      
      // optional string productType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->producttype().data(), this->producttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_productName;
        break;
      }
      
      // optional string productName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productname().data(), this->productname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_proName;
        break;
      }
      
      // optional string proName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proname().data(), this->proname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_proUserNo;
        break;
      }
      
      // optional string proUserNo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proUserNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prouserno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prouserno().data(), this->prouserno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_pictureStrart;
        break;
      }
      
      // optional string pictureStrart = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pictureStrart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picturestrart()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picturestrart().data(), this->picturestrart().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_pictureEnd;
        break;
      }
      
      // optional string pictureEnd = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pictureEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pictureend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pictureend().data(), this->pictureend().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_businessTime;
        break;
      }
      
      // optional string businessTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_businessTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businesstime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->businesstime().data(), this->businesstime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspPrintRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result_info(), output);
  }
  
  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // optional string creditName = 6;
  if (has_creditname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creditname().data(), this->creditname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->creditname(), output);
  }
  
  // optional string creditCode = 7;
  if (has_creditcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creditcode().data(), this->creditcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->creditcode(), output);
  }
  
  // optional string nproId = 8;
  if (has_nproid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nproid().data(), this->nproid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->nproid(), output);
  }
  
  // optional string strGrade = 9;
  if (has_strgrade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strgrade().data(), this->strgrade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->strgrade(), output);
  }
  
  // optional string productType = 10;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttype().data(), this->producttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->producttype(), output);
  }
  
  // optional string productName = 11;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->productname(), output);
  }
  
  // optional string proName = 12;
  if (has_proname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proname().data(), this->proname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->proname(), output);
  }
  
  // optional string proUserNo = 13;
  if (has_prouserno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prouserno().data(), this->prouserno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->prouserno(), output);
  }
  
  // optional string pictureStrart = 14;
  if (has_picturestrart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picturestrart().data(), this->picturestrart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->picturestrart(), output);
  }
  
  // optional string pictureEnd = 15;
  if (has_pictureend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pictureend().data(), this->pictureend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->pictureend(), output);
  }
  
  // optional string businessTime = 16;
  if (has_businesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businesstime().data(), this->businesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->businesstime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspPrintRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional string result_info = 3;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_info(), target);
  }
  
  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // optional string creditName = 6;
  if (has_creditname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creditname().data(), this->creditname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->creditname(), target);
  }
  
  // optional string creditCode = 7;
  if (has_creditcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creditcode().data(), this->creditcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->creditcode(), target);
  }
  
  // optional string nproId = 8;
  if (has_nproid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nproid().data(), this->nproid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->nproid(), target);
  }
  
  // optional string strGrade = 9;
  if (has_strgrade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strgrade().data(), this->strgrade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->strgrade(), target);
  }
  
  // optional string productType = 10;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producttype().data(), this->producttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->producttype(), target);
  }
  
  // optional string productName = 11;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->productname(), target);
  }
  
  // optional string proName = 12;
  if (has_proname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proname().data(), this->proname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->proname(), target);
  }
  
  // optional string proUserNo = 13;
  if (has_prouserno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prouserno().data(), this->prouserno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->prouserno(), target);
  }
  
  // optional string pictureStrart = 14;
  if (has_picturestrart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picturestrart().data(), this->picturestrart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->picturestrart(), target);
  }
  
  // optional string pictureEnd = 15;
  if (has_pictureend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pictureend().data(), this->pictureend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->pictureend(), target);
  }
  
  // optional string businessTime = 16;
  if (has_businesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businesstime().data(), this->businesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->businesstime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspPrintRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string result_info = 3;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }
    
    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string creditName = 6;
    if (has_creditname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creditname());
    }
    
    // optional string creditCode = 7;
    if (has_creditcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creditcode());
    }
    
    // optional string nproId = 8;
    if (has_nproid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nproid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string strGrade = 9;
    if (has_strgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strgrade());
    }
    
    // optional string productType = 10;
    if (has_producttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->producttype());
    }
    
    // optional string productName = 11;
    if (has_productname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productname());
    }
    
    // optional string proName = 12;
    if (has_proname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proname());
    }
    
    // optional string proUserNo = 13;
    if (has_prouserno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prouserno());
    }
    
    // optional string pictureStrart = 14;
    if (has_picturestrart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picturestrart());
    }
    
    // optional string pictureEnd = 15;
    if (has_pictureend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pictureend());
    }
    
    // optional string businessTime = 16;
    if (has_businesstime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->businesstime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspPrintRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspPrintRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspPrintRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspPrintRecord::MergeFrom(const RspPrintRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_creditname()) {
      set_creditname(from.creditname());
    }
    if (from.has_creditcode()) {
      set_creditcode(from.creditcode());
    }
    if (from.has_nproid()) {
      set_nproid(from.nproid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strgrade()) {
      set_strgrade(from.strgrade());
    }
    if (from.has_producttype()) {
      set_producttype(from.producttype());
    }
    if (from.has_productname()) {
      set_productname(from.productname());
    }
    if (from.has_proname()) {
      set_proname(from.proname());
    }
    if (from.has_prouserno()) {
      set_prouserno(from.prouserno());
    }
    if (from.has_picturestrart()) {
      set_picturestrart(from.picturestrart());
    }
    if (from.has_pictureend()) {
      set_pictureend(from.pictureend());
    }
    if (from.has_businesstime()) {
      set_businesstime(from.businesstime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspPrintRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspPrintRecord::CopyFrom(const RspPrintRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspPrintRecord::IsInitialized() const {
  
  return true;
}

void RspPrintRecord::Swap(RspPrintRecord* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(result_, other->result_);
    std::swap(result_info_, other->result_info_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(creditname_, other->creditname_);
    std::swap(creditcode_, other->creditcode_);
    std::swap(nproid_, other->nproid_);
    std::swap(strgrade_, other->strgrade_);
    std::swap(producttype_, other->producttype_);
    std::swap(productname_, other->productname_);
    std::swap(proname_, other->proname_);
    std::swap(prouserno_, other->prouserno_);
    std::swap(picturestrart_, other->picturestrart_);
    std::swap(pictureend_, other->pictureend_);
    std::swap(businesstime_, other->businesstime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspPrintRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspPrintRecord_descriptor_;
  metadata.reflection = RspPrintRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
