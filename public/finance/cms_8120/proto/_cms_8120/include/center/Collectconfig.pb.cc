// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center/Collectconfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* Collectconfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Collectconfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCollectconfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCollectconfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCollectconfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCollectconfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_2fCollectconfig_2eproto() {
  protobuf_AddDesc_center_2fCollectconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center/Collectconfig.proto");
  GOOGLE_CHECK(file != NULL);
  Collectconfig_descriptor_ = file->message_type(0);
  static const int Collectconfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collectconfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collectconfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collectconfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collectconfig, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collectconfig, nsort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collectconfig, worktimebegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collectconfig, worktimeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collectconfig, kmsip_),
  };
  Collectconfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Collectconfig_descriptor_,
      Collectconfig::default_instance_,
      Collectconfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collectconfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collectconfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Collectconfig));
  ReqCollectconfig_descriptor_ = file->message_type(1);
  static const int ReqCollectconfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCollectconfig, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCollectconfig, id_),
  };
  ReqCollectconfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCollectconfig_descriptor_,
      ReqCollectconfig::default_instance_,
      ReqCollectconfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCollectconfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCollectconfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCollectconfig));
  RspCollectconfig_descriptor_ = file->message_type(2);
  static const int RspCollectconfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCollectconfig, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCollectconfig, collectconfig_),
  };
  RspCollectconfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCollectconfig_descriptor_,
      RspCollectconfig::default_instance_,
      RspCollectconfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCollectconfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCollectconfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCollectconfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_2fCollectconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Collectconfig_descriptor_, &Collectconfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCollectconfig_descriptor_, &ReqCollectconfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCollectconfig_descriptor_, &RspCollectconfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_2fCollectconfig_2eproto() {
  delete Collectconfig::default_instance_;
  delete Collectconfig_reflection_;
  delete ReqCollectconfig::default_instance_;
  delete ReqCollectconfig_reflection_;
  delete RspCollectconfig::default_instance_;
  delete RspCollectconfig_reflection_;
}

void protobuf_AddDesc_center_2fCollectconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_type_2fcmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032center/Collectconfig.proto\022\010cms_8120\032\016"
    "type/cmd.proto\"\216\001\n\rCollectconfig\022\n\n\002id\030\001"
    " \001(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\r\n\005ntype\030"
    "\004 \001(\005\022\r\n\005nsort\030\005 \001(\005\022\025\n\rworkTimeBegin\030\006 "
    "\001(\t\022\023\n\013workTimeEnd\030\007 \001(\t\022\r\n\005kmsIp\030\010 \001(\t\""
    "+\n\020ReqCollectconfig\022\013\n\003cmd\030\001 \001(\005\022\n\n\002id\030\002"
    " \001(\005\"O\n\020RspCollectconfig\022\013\n\003cmd\030\001 \001(\005\022.\n"
    "\rcollectconfig\030\002 \001(\0132\027.cms_8120.Collectc"
    "onfig2n\n\032ModifyCollectconfigService\022P\n\026Q"
    "ueryCollectconfigInfo\022\032.cms_8120.ReqColl"
    "ectconfig\032\032.cms_8120.RspCollectconfigBA\n"
    "(com.hikvision.finance.fms.cms.hpp.cente"
    "rB\022CollectconfigProto\210\001\001", 504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center/Collectconfig.proto", &protobuf_RegisterTypes);
  Collectconfig::default_instance_ = new Collectconfig();
  ReqCollectconfig::default_instance_ = new ReqCollectconfig();
  RspCollectconfig::default_instance_ = new RspCollectconfig();
  Collectconfig::default_instance_->InitAsDefaultInstance();
  ReqCollectconfig::default_instance_->InitAsDefaultInstance();
  RspCollectconfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_2fCollectconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_2fCollectconfig_2eproto {
  StaticDescriptorInitializer_center_2fCollectconfig_2eproto() {
    protobuf_AddDesc_center_2fCollectconfig_2eproto();
  }
} static_descriptor_initializer_center_2fCollectconfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Collectconfig::kIdFieldNumber;
const int Collectconfig::kIpFieldNumber;
const int Collectconfig::kPortFieldNumber;
const int Collectconfig::kNtypeFieldNumber;
const int Collectconfig::kNsortFieldNumber;
const int Collectconfig::kWorkTimeBeginFieldNumber;
const int Collectconfig::kWorkTimeEndFieldNumber;
const int Collectconfig::kKmsIpFieldNumber;
#endif  // !_MSC_VER

Collectconfig::Collectconfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Collectconfig::InitAsDefaultInstance() {
}

Collectconfig::Collectconfig(const Collectconfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Collectconfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ntype_ = 0;
  nsort_ = 0;
  worktimebegin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  worktimeend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kmsip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Collectconfig::~Collectconfig() {
  SharedDtor();
}

void Collectconfig::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (worktimebegin_ != &::google::protobuf::internal::kEmptyString) {
    delete worktimebegin_;
  }
  if (worktimeend_ != &::google::protobuf::internal::kEmptyString) {
    delete worktimeend_;
  }
  if (kmsip_ != &::google::protobuf::internal::kEmptyString) {
    delete kmsip_;
  }
  if (this != default_instance_) {
  }
}

void Collectconfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Collectconfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Collectconfig_descriptor_;
}

const Collectconfig& Collectconfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fCollectconfig_2eproto();  return *default_instance_;
}

Collectconfig* Collectconfig::default_instance_ = NULL;

Collectconfig* Collectconfig::New() const {
  return new Collectconfig;
}

void Collectconfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    ntype_ = 0;
    nsort_ = 0;
    if (has_worktimebegin()) {
      if (worktimebegin_ != &::google::protobuf::internal::kEmptyString) {
        worktimebegin_->clear();
      }
    }
    if (has_worktimeend()) {
      if (worktimeend_ != &::google::protobuf::internal::kEmptyString) {
        worktimeend_->clear();
      }
    }
    if (has_kmsip()) {
      if (kmsip_ != &::google::protobuf::internal::kEmptyString) {
        kmsip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Collectconfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ntype;
        break;
      }
      
      // optional int32 ntype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ntype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nsort;
        break;
      }
      
      // optional int32 nsort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nsort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsort_)));
          set_has_nsort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_workTimeBegin;
        break;
      }
      
      // optional string workTimeBegin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_workTimeBegin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worktimebegin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->worktimebegin().data(), this->worktimebegin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_workTimeEnd;
        break;
      }
      
      // optional string workTimeEnd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_workTimeEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worktimeend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->worktimeend().data(), this->worktimeend().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_kmsIp;
        break;
      }
      
      // optional string kmsIp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kmsIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kmsip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kmsip().data(), this->kmsip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Collectconfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }
  
  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }
  
  // optional int32 ntype = 4;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ntype(), output);
  }
  
  // optional int32 nsort = 5;
  if (has_nsort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nsort(), output);
  }
  
  // optional string workTimeBegin = 6;
  if (has_worktimebegin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->worktimebegin().data(), this->worktimebegin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->worktimebegin(), output);
  }
  
  // optional string workTimeEnd = 7;
  if (has_worktimeend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->worktimeend().data(), this->worktimeend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->worktimeend(), output);
  }
  
  // optional string kmsIp = 8;
  if (has_kmsip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kmsip().data(), this->kmsip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->kmsip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Collectconfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }
  
  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }
  
  // optional int32 ntype = 4;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ntype(), target);
  }
  
  // optional int32 nsort = 5;
  if (has_nsort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nsort(), target);
  }
  
  // optional string workTimeBegin = 6;
  if (has_worktimebegin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->worktimebegin().data(), this->worktimebegin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->worktimebegin(), target);
  }
  
  // optional string workTimeEnd = 7;
  if (has_worktimeend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->worktimeend().data(), this->worktimeend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->worktimeend(), target);
  }
  
  // optional string kmsIp = 8;
  if (has_kmsip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kmsip().data(), this->kmsip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->kmsip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Collectconfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // optional int32 ntype = 4;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
    // optional int32 nsort = 5;
    if (has_nsort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsort());
    }
    
    // optional string workTimeBegin = 6;
    if (has_worktimebegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->worktimebegin());
    }
    
    // optional string workTimeEnd = 7;
    if (has_worktimeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->worktimeend());
    }
    
    // optional string kmsIp = 8;
    if (has_kmsip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kmsip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Collectconfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Collectconfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Collectconfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Collectconfig::MergeFrom(const Collectconfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
    if (from.has_nsort()) {
      set_nsort(from.nsort());
    }
    if (from.has_worktimebegin()) {
      set_worktimebegin(from.worktimebegin());
    }
    if (from.has_worktimeend()) {
      set_worktimeend(from.worktimeend());
    }
    if (from.has_kmsip()) {
      set_kmsip(from.kmsip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Collectconfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collectconfig::CopyFrom(const Collectconfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collectconfig::IsInitialized() const {
  
  return true;
}

void Collectconfig::Swap(Collectconfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(ntype_, other->ntype_);
    std::swap(nsort_, other->nsort_);
    std::swap(worktimebegin_, other->worktimebegin_);
    std::swap(worktimeend_, other->worktimeend_);
    std::swap(kmsip_, other->kmsip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Collectconfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Collectconfig_descriptor_;
  metadata.reflection = Collectconfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCollectconfig::kCmdFieldNumber;
const int ReqCollectconfig::kIdFieldNumber;
#endif  // !_MSC_VER

ReqCollectconfig::ReqCollectconfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCollectconfig::InitAsDefaultInstance() {
}

ReqCollectconfig::ReqCollectconfig(const ReqCollectconfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCollectconfig::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCollectconfig::~ReqCollectconfig() {
  SharedDtor();
}

void ReqCollectconfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCollectconfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCollectconfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCollectconfig_descriptor_;
}

const ReqCollectconfig& ReqCollectconfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fCollectconfig_2eproto();  return *default_instance_;
}

ReqCollectconfig* ReqCollectconfig::default_instance_ = NULL;

ReqCollectconfig* ReqCollectconfig::New() const {
  return new ReqCollectconfig;
}

void ReqCollectconfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCollectconfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCollectconfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCollectconfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCollectconfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCollectconfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCollectconfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCollectconfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCollectconfig::MergeFrom(const ReqCollectconfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCollectconfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCollectconfig::CopyFrom(const ReqCollectconfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCollectconfig::IsInitialized() const {
  
  return true;
}

void ReqCollectconfig::Swap(ReqCollectconfig* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCollectconfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCollectconfig_descriptor_;
  metadata.reflection = ReqCollectconfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspCollectconfig::kCmdFieldNumber;
const int RspCollectconfig::kCollectconfigFieldNumber;
#endif  // !_MSC_VER

RspCollectconfig::RspCollectconfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspCollectconfig::InitAsDefaultInstance() {
  collectconfig_ = const_cast< ::cms_8120::Collectconfig*>(&::cms_8120::Collectconfig::default_instance());
}

RspCollectconfig::RspCollectconfig(const RspCollectconfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspCollectconfig::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  collectconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCollectconfig::~RspCollectconfig() {
  SharedDtor();
}

void RspCollectconfig::SharedDtor() {
  if (this != default_instance_) {
    delete collectconfig_;
  }
}

void RspCollectconfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCollectconfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCollectconfig_descriptor_;
}

const RspCollectconfig& RspCollectconfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fCollectconfig_2eproto();  return *default_instance_;
}

RspCollectconfig* RspCollectconfig::default_instance_ = NULL;

RspCollectconfig* RspCollectconfig::New() const {
  return new RspCollectconfig;
}

void RspCollectconfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_collectconfig()) {
      if (collectconfig_ != NULL) collectconfig_->::cms_8120::Collectconfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCollectconfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_collectconfig;
        break;
      }
      
      // optional .cms_8120.Collectconfig collectconfig = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collectconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collectconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspCollectconfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional .cms_8120.Collectconfig collectconfig = 2;
  if (has_collectconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->collectconfig(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspCollectconfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional .cms_8120.Collectconfig collectconfig = 2;
  if (has_collectconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->collectconfig(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspCollectconfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional .cms_8120.Collectconfig collectconfig = 2;
    if (has_collectconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collectconfig());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCollectconfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCollectconfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCollectconfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCollectconfig::MergeFrom(const RspCollectconfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_collectconfig()) {
      mutable_collectconfig()->::cms_8120::Collectconfig::MergeFrom(from.collectconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCollectconfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCollectconfig::CopyFrom(const RspCollectconfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCollectconfig::IsInitialized() const {
  
  return true;
}

void RspCollectconfig::Swap(RspCollectconfig* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(collectconfig_, other->collectconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCollectconfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCollectconfig_descriptor_;
  metadata.reflection = RspCollectconfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
