// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center/ProductType.Proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* ProductType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqProductType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqProductType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductTypeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductTypeList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_2fProductType_2eProto() {
  protobuf_AddDesc_center_2fProductType_2eProto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center/ProductType.Proto");
  GOOGLE_CHECK(file != NULL);
  ProductType_descriptor_ = file->message_type(0);
  static const int ProductType_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductType, nparentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductType, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductType, strinterareacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductType, strpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductType, nsortid_),
  };
  ProductType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductType_descriptor_,
      ProductType::default_instance_,
      ProductType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductType));
  ReqProductType_descriptor_ = file->message_type(1);
  static const int ReqProductType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProductType, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProductType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProductType, nparentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProductType, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProductType, strinterareacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProductType, strpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProductType, nsortid_),
  };
  ReqProductType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqProductType_descriptor_,
      ReqProductType::default_instance_,
      ReqProductType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProductType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProductType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqProductType));
  ProductTypeList_descriptor_ = file->message_type(2);
  static const int ProductTypeList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductTypeList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductTypeList, producttype_),
  };
  ProductTypeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductTypeList_descriptor_,
      ProductTypeList::default_instance_,
      ProductTypeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductTypeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductTypeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductTypeList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_2fProductType_2eProto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductType_descriptor_, &ProductType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqProductType_descriptor_, &ReqProductType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductTypeList_descriptor_, &ProductTypeList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_2fProductType_2eProto() {
  delete ProductType::default_instance_;
  delete ProductType_reflection_;
  delete ReqProductType::default_instance_;
  delete ReqProductType_reflection_;
  delete ProductTypeList::default_instance_;
  delete ProductTypeList_reflection_;
}

void protobuf_AddDesc_center_2fProductType_2eProto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_type_2fcmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030center/ProductType.Proto\022\010cms_8120\032\016ty"
    "pe/cmd.proto\"y\n\013ProductType\022\n\n\002id\030\001 \001(\005\022"
    "\021\n\tnParentId\030\002 \001(\005\022\017\n\007strName\030\003 \001(\t\022\030\n\020s"
    "trINterAreaCode\030\004 \001(\t\022\017\n\007strPath\030\005 \001(\t\022\017"
    "\n\007nSortId\030\006 \001(\005\"\211\001\n\016ReqProductType\022\013\n\003cm"
    "d\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\021\n\tnParentId\030\003 \001(\005\022\017"
    "\n\007strName\030\004 \001(\t\022\030\n\020strINterAreaCode\030\005 \001("
    "\t\022\017\n\007strPath\030\006 \001(\t\022\017\n\007nSortId\030\007 \001(\005\"J\n\017P"
    "roductTypeList\022\013\n\003cmd\030\001 \001(\005\022*\n\013productTy"
    "pe\030\002 \003(\0132\025.cms_8120.ProductType2j\n\030Modif"
    "yProductTypeService\022N\n\027QueryAllProductTy"
    "peInfo\022\030.cms_8120.ReqProductType\032\031.cms_8"
    "120.ProductTypeListB\?\n(com.hikvision.fin"
    "ance.fms.cms.hpp.centerB\020ProductTypeProt"
    "o\210\001\001", 564);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center/ProductType.Proto", &protobuf_RegisterTypes);
  ProductType::default_instance_ = new ProductType();
  ReqProductType::default_instance_ = new ReqProductType();
  ProductTypeList::default_instance_ = new ProductTypeList();
  ProductType::default_instance_->InitAsDefaultInstance();
  ReqProductType::default_instance_->InitAsDefaultInstance();
  ProductTypeList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_2fProductType_2eProto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_2fProductType_2eProto {
  StaticDescriptorInitializer_center_2fProductType_2eProto() {
    protobuf_AddDesc_center_2fProductType_2eProto();
  }
} static_descriptor_initializer_center_2fProductType_2eProto_;


// ===================================================================

#ifndef _MSC_VER
const int ProductType::kIdFieldNumber;
const int ProductType::kNParentIdFieldNumber;
const int ProductType::kStrNameFieldNumber;
const int ProductType::kStrINterAreaCodeFieldNumber;
const int ProductType::kStrPathFieldNumber;
const int ProductType::kNSortIdFieldNumber;
#endif  // !_MSC_VER

ProductType::ProductType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductType::InitAsDefaultInstance() {
}

ProductType::ProductType(const ProductType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  nparentid_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strinterareacode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nsortid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductType::~ProductType() {
  SharedDtor();
}

void ProductType::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (strinterareacode_ != &::google::protobuf::internal::kEmptyString) {
    delete strinterareacode_;
  }
  if (strpath_ != &::google::protobuf::internal::kEmptyString) {
    delete strpath_;
  }
  if (this != default_instance_) {
  }
}

void ProductType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductType_descriptor_;
}

const ProductType& ProductType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fProductType_2eProto();  return *default_instance_;
}

ProductType* ProductType::default_instance_ = NULL;

ProductType* ProductType::New() const {
  return new ProductType;
}

void ProductType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    nparentid_ = 0;
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    if (has_strinterareacode()) {
      if (strinterareacode_ != &::google::protobuf::internal::kEmptyString) {
        strinterareacode_->clear();
      }
    }
    if (has_strpath()) {
      if (strpath_ != &::google::protobuf::internal::kEmptyString) {
        strpath_->clear();
      }
    }
    nsortid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nParentId;
        break;
      }
      
      // optional int32 nParentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nParentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nparentid_)));
          set_has_nparentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strName;
        break;
      }
      
      // optional string strName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strINterAreaCode;
        break;
      }
      
      // optional string strINterAreaCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strINterAreaCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strinterareacode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strinterareacode().data(), this->strinterareacode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strPath;
        break;
      }
      
      // optional string strPath = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpath().data(), this->strpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nSortId;
        break;
      }
      
      // optional int32 nSortId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsortid_)));
          set_has_nsortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 nParentId = 2;
  if (has_nparentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nparentid(), output);
  }
  
  // optional string strName = 3;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strname(), output);
  }
  
  // optional string strINterAreaCode = 4;
  if (has_strinterareacode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strinterareacode().data(), this->strinterareacode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strinterareacode(), output);
  }
  
  // optional string strPath = 5;
  if (has_strpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpath().data(), this->strpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strpath(), output);
  }
  
  // optional int32 nSortId = 6;
  if (has_nsortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nsortid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 nParentId = 2;
  if (has_nparentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nparentid(), target);
  }
  
  // optional string strName = 3;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strname(), target);
  }
  
  // optional string strINterAreaCode = 4;
  if (has_strinterareacode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strinterareacode().data(), this->strinterareacode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strinterareacode(), target);
  }
  
  // optional string strPath = 5;
  if (has_strpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpath().data(), this->strpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strpath(), target);
  }
  
  // optional int32 nSortId = 6;
  if (has_nsortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nsortid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 nParentId = 2;
    if (has_nparentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nparentid());
    }
    
    // optional string strName = 3;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }
    
    // optional string strINterAreaCode = 4;
    if (has_strinterareacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strinterareacode());
    }
    
    // optional string strPath = 5;
    if (has_strpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpath());
    }
    
    // optional int32 nSortId = 6;
    if (has_nsortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsortid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductType::MergeFrom(const ProductType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nparentid()) {
      set_nparentid(from.nparentid());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_strinterareacode()) {
      set_strinterareacode(from.strinterareacode());
    }
    if (from.has_strpath()) {
      set_strpath(from.strpath());
    }
    if (from.has_nsortid()) {
      set_nsortid(from.nsortid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductType::CopyFrom(const ProductType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductType::IsInitialized() const {
  
  return true;
}

void ProductType::Swap(ProductType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nparentid_, other->nparentid_);
    std::swap(strname_, other->strname_);
    std::swap(strinterareacode_, other->strinterareacode_);
    std::swap(strpath_, other->strpath_);
    std::swap(nsortid_, other->nsortid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductType_descriptor_;
  metadata.reflection = ProductType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqProductType::kCmdFieldNumber;
const int ReqProductType::kIdFieldNumber;
const int ReqProductType::kNParentIdFieldNumber;
const int ReqProductType::kStrNameFieldNumber;
const int ReqProductType::kStrINterAreaCodeFieldNumber;
const int ReqProductType::kStrPathFieldNumber;
const int ReqProductType::kNSortIdFieldNumber;
#endif  // !_MSC_VER

ReqProductType::ReqProductType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqProductType::InitAsDefaultInstance() {
}

ReqProductType::ReqProductType(const ReqProductType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqProductType::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  id_ = 0;
  nparentid_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strinterareacode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nsortid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqProductType::~ReqProductType() {
  SharedDtor();
}

void ReqProductType::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (strinterareacode_ != &::google::protobuf::internal::kEmptyString) {
    delete strinterareacode_;
  }
  if (strpath_ != &::google::protobuf::internal::kEmptyString) {
    delete strpath_;
  }
  if (this != default_instance_) {
  }
}

void ReqProductType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqProductType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqProductType_descriptor_;
}

const ReqProductType& ReqProductType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fProductType_2eProto();  return *default_instance_;
}

ReqProductType* ReqProductType::default_instance_ = NULL;

ReqProductType* ReqProductType::New() const {
  return new ReqProductType;
}

void ReqProductType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    id_ = 0;
    nparentid_ = 0;
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    if (has_strinterareacode()) {
      if (strinterareacode_ != &::google::protobuf::internal::kEmptyString) {
        strinterareacode_->clear();
      }
    }
    if (has_strpath()) {
      if (strpath_ != &::google::protobuf::internal::kEmptyString) {
        strpath_->clear();
      }
    }
    nsortid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqProductType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nParentId;
        break;
      }
      
      // optional int32 nParentId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nParentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nparentid_)));
          set_has_nparentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strName;
        break;
      }
      
      // optional string strName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strINterAreaCode;
        break;
      }
      
      // optional string strINterAreaCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strINterAreaCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strinterareacode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strinterareacode().data(), this->strinterareacode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strPath;
        break;
      }
      
      // optional string strPath = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpath().data(), this->strpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nSortId;
        break;
      }
      
      // optional int32 nSortId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsortid_)));
          set_has_nsortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqProductType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 nParentId = 3;
  if (has_nparentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nparentid(), output);
  }
  
  // optional string strName = 4;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strname(), output);
  }
  
  // optional string strINterAreaCode = 5;
  if (has_strinterareacode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strinterareacode().data(), this->strinterareacode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strinterareacode(), output);
  }
  
  // optional string strPath = 6;
  if (has_strpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpath().data(), this->strpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->strpath(), output);
  }
  
  // optional int32 nSortId = 7;
  if (has_nsortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nsortid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqProductType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 nParentId = 3;
  if (has_nparentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nparentid(), target);
  }
  
  // optional string strName = 4;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strname(), target);
  }
  
  // optional string strINterAreaCode = 5;
  if (has_strinterareacode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strinterareacode().data(), this->strinterareacode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strinterareacode(), target);
  }
  
  // optional string strPath = 6;
  if (has_strpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpath().data(), this->strpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strpath(), target);
  }
  
  // optional int32 nSortId = 7;
  if (has_nsortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nsortid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqProductType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 nParentId = 3;
    if (has_nparentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nparentid());
    }
    
    // optional string strName = 4;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }
    
    // optional string strINterAreaCode = 5;
    if (has_strinterareacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strinterareacode());
    }
    
    // optional string strPath = 6;
    if (has_strpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpath());
    }
    
    // optional int32 nSortId = 7;
    if (has_nsortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsortid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqProductType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqProductType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqProductType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqProductType::MergeFrom(const ReqProductType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nparentid()) {
      set_nparentid(from.nparentid());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_strinterareacode()) {
      set_strinterareacode(from.strinterareacode());
    }
    if (from.has_strpath()) {
      set_strpath(from.strpath());
    }
    if (from.has_nsortid()) {
      set_nsortid(from.nsortid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqProductType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqProductType::CopyFrom(const ReqProductType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqProductType::IsInitialized() const {
  
  return true;
}

void ReqProductType::Swap(ReqProductType* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(id_, other->id_);
    std::swap(nparentid_, other->nparentid_);
    std::swap(strname_, other->strname_);
    std::swap(strinterareacode_, other->strinterareacode_);
    std::swap(strpath_, other->strpath_);
    std::swap(nsortid_, other->nsortid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqProductType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqProductType_descriptor_;
  metadata.reflection = ReqProductType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductTypeList::kCmdFieldNumber;
const int ProductTypeList::kProductTypeFieldNumber;
#endif  // !_MSC_VER

ProductTypeList::ProductTypeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductTypeList::InitAsDefaultInstance() {
}

ProductTypeList::ProductTypeList(const ProductTypeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductTypeList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductTypeList::~ProductTypeList() {
  SharedDtor();
}

void ProductTypeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProductTypeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductTypeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductTypeList_descriptor_;
}

const ProductTypeList& ProductTypeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fProductType_2eProto();  return *default_instance_;
}

ProductTypeList* ProductTypeList::default_instance_ = NULL;

ProductTypeList* ProductTypeList::New() const {
  return new ProductTypeList;
}

void ProductTypeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  producttype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductTypeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_productType;
        break;
      }
      
      // repeated .cms_8120.ProductType productType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_producttype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_productType;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductTypeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // repeated .cms_8120.ProductType productType = 2;
  for (int i = 0; i < this->producttype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->producttype(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductTypeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // repeated .cms_8120.ProductType productType = 2;
  for (int i = 0; i < this->producttype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->producttype(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductTypeList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
  }
  // repeated .cms_8120.ProductType productType = 2;
  total_size += 1 * this->producttype_size();
  for (int i = 0; i < this->producttype_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->producttype(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductTypeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductTypeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductTypeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductTypeList::MergeFrom(const ProductTypeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  producttype_.MergeFrom(from.producttype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductTypeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductTypeList::CopyFrom(const ProductTypeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductTypeList::IsInitialized() const {
  
  return true;
}

void ProductTypeList::Swap(ProductTypeList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    producttype_.Swap(&other->producttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductTypeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductTypeList_descriptor_;
  metadata.reflection = ProductTypeList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
