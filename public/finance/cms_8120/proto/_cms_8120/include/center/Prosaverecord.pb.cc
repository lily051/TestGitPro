// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center/Prosaverecord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* Prosaverecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Prosaverecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqProsaverecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqProsaverecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProsaverecordList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProsaverecordList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_2fProsaverecord_2eproto() {
  protobuf_AddDesc_center_2fProsaverecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center/Prosaverecord.proto");
  GOOGLE_CHECK(file != NULL);
  Prosaverecord_descriptor_ = file->message_type(0);
  static const int Prosaverecord_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, regionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, cvr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, streamno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, mediatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, calltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, callno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, recorduserno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, statetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, devip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, devchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, upload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, strbucket_),
  };
  Prosaverecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Prosaverecord_descriptor_,
      Prosaverecord::default_instance_,
      Prosaverecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prosaverecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Prosaverecord));
  ReqProsaverecord_descriptor_ = file->message_type(1);
  static const int ReqProsaverecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProsaverecord, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProsaverecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProsaverecord, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProsaverecord, strids_),
  };
  ReqProsaverecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqProsaverecord_descriptor_,
      ReqProsaverecord::default_instance_,
      ReqProsaverecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProsaverecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqProsaverecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqProsaverecord));
  ProsaverecordList_descriptor_ = file->message_type(2);
  static const int ProsaverecordList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProsaverecordList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProsaverecordList, prosaverecord_),
  };
  ProsaverecordList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProsaverecordList_descriptor_,
      ProsaverecordList::default_instance_,
      ProsaverecordList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProsaverecordList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProsaverecordList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProsaverecordList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_2fProsaverecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Prosaverecord_descriptor_, &Prosaverecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqProsaverecord_descriptor_, &ReqProsaverecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProsaverecordList_descriptor_, &ProsaverecordList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_2fProsaverecord_2eproto() {
  delete Prosaverecord::default_instance_;
  delete Prosaverecord_reflection_;
  delete ReqProsaverecord::default_instance_;
  delete ReqProsaverecord_reflection_;
  delete ProsaverecordList::default_instance_;
  delete ProsaverecordList_reflection_;
}

void protobuf_AddDesc_center_2fProsaverecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_server_2fRspServerData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032center/Prosaverecord.proto\022\010cms_8120\032\032"
    "server/RspServerData.proto\"\242\003\n\rProsavere"
    "cord\022\n\n\002id\030\001 \001(\005\022\020\n\010clientId\030\002 \001(\005\022\020\n\010re"
    "cordId\030\003 \001(\t\022\020\n\010regionId\030\004 \001(\005\022\013\n\003cvr\030\005 "
    "\001(\005\022\020\n\010streamNo\030\006 \001(\t\022\r\n\005nType\030\007 \001(\005\022\021\n\t"
    "mediaType\030\010 \001(\005\022\020\n\010calltype\030\t \001(\005\022\016\n\006cal"
    "lNo\030\n \001(\t\022\024\n\014recordUserNo\030\013 \001(\t\022\021\n\tstate"
    "Type\030\014 \001(\005\022&\n\tstartTime\030\r \001(\t:\0231970-01-0"
    "1 00:00:00\022$\n\007endTime\030\016 \001(\t:\0231970-01-01 "
    "00:00:00\022\020\n\010fileName\030\017 \001(\t\022\r\n\005devIp\030\020 \001("
    "\t\022\r\n\005devId\030\021 \001(\005\022\022\n\ndevChannel\030\022 \001(\005\022\016\n\006"
    "locked\030\023 \001(\005\022\016\n\006upload\030\024 \001(\005\022\021\n\tstrBucke"
    "t\030\025 \001(\t\"M\n\020ReqProsaverecord\022\013\n\003cmd\030\001 \001(\005"
    "\022\n\n\002id\030\002 \001(\005\022\020\n\010clientId\030\003 \001(\005\022\016\n\006strIds"
    "\030\004 \001(\t\"P\n\021ProsaverecordList\022\013\n\003cmd\030\001 \001(\005"
    "\022.\n\rprosaverecord\030\002 \003(\0132\027.cms_8120.Prosa"
    "verecord2\212\002\n\032ModifyProsaverecordService\022"
    "I\n\025SaveProsaverecordInfo\022\027.cms_8120.Pros"
    "averecord\032\027.cms_8120.RspServerData\022Q\n\026Qu"
    "eryProsaverecordInfo\022\032.cms_8120.ReqProsa"
    "verecord\032\033.cms_8120.ProsaverecordList\022N\n"
    "\027DeleteProsaverecordByid\022\032.cms_8120.ReqP"
    "rosaverecord\032\027.cms_8120.RspServerDataBA\n"
    "(com.hikvision.finance.fms.cms.hpp.cente"
    "rB\022ProsaverecordProto\210\001\001", 984);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center/Prosaverecord.proto", &protobuf_RegisterTypes);
  Prosaverecord::default_instance_ = new Prosaverecord();
  ReqProsaverecord::default_instance_ = new ReqProsaverecord();
  ProsaverecordList::default_instance_ = new ProsaverecordList();
  Prosaverecord::default_instance_->InitAsDefaultInstance();
  ReqProsaverecord::default_instance_->InitAsDefaultInstance();
  ProsaverecordList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_2fProsaverecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_2fProsaverecord_2eproto {
  StaticDescriptorInitializer_center_2fProsaverecord_2eproto() {
    protobuf_AddDesc_center_2fProsaverecord_2eproto();
  }
} static_descriptor_initializer_center_2fProsaverecord_2eproto_;


// ===================================================================

const ::std::string Prosaverecord::_default_starttime_("1970-01-01 00:00:00");
const ::std::string Prosaverecord::_default_endtime_("1970-01-01 00:00:00");
#ifndef _MSC_VER
const int Prosaverecord::kIdFieldNumber;
const int Prosaverecord::kClientIdFieldNumber;
const int Prosaverecord::kRecordIdFieldNumber;
const int Prosaverecord::kRegionIdFieldNumber;
const int Prosaverecord::kCvrFieldNumber;
const int Prosaverecord::kStreamNoFieldNumber;
const int Prosaverecord::kNTypeFieldNumber;
const int Prosaverecord::kMediaTypeFieldNumber;
const int Prosaverecord::kCalltypeFieldNumber;
const int Prosaverecord::kCallNoFieldNumber;
const int Prosaverecord::kRecordUserNoFieldNumber;
const int Prosaverecord::kStateTypeFieldNumber;
const int Prosaverecord::kStartTimeFieldNumber;
const int Prosaverecord::kEndTimeFieldNumber;
const int Prosaverecord::kFileNameFieldNumber;
const int Prosaverecord::kDevIpFieldNumber;
const int Prosaverecord::kDevIdFieldNumber;
const int Prosaverecord::kDevChannelFieldNumber;
const int Prosaverecord::kLockedFieldNumber;
const int Prosaverecord::kUploadFieldNumber;
const int Prosaverecord::kStrBucketFieldNumber;
#endif  // !_MSC_VER

Prosaverecord::Prosaverecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Prosaverecord::InitAsDefaultInstance() {
}

Prosaverecord::Prosaverecord(const Prosaverecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Prosaverecord::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  clientid_ = 0;
  recordid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  regionid_ = 0;
  cvr_ = 0;
  streamno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ntype_ = 0;
  mediatype_ = 0;
  calltype_ = 0;
  callno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recorduserno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  statetype_ = 0;
  starttime_ = const_cast< ::std::string*>(&_default_starttime_);
  endtime_ = const_cast< ::std::string*>(&_default_endtime_);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devid_ = 0;
  devchannel_ = 0;
  locked_ = 0;
  upload_ = 0;
  strbucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Prosaverecord::~Prosaverecord() {
  SharedDtor();
}

void Prosaverecord::SharedDtor() {
  if (recordid_ != &::google::protobuf::internal::kEmptyString) {
    delete recordid_;
  }
  if (streamno_ != &::google::protobuf::internal::kEmptyString) {
    delete streamno_;
  }
  if (callno_ != &::google::protobuf::internal::kEmptyString) {
    delete callno_;
  }
  if (recorduserno_ != &::google::protobuf::internal::kEmptyString) {
    delete recorduserno_;
  }
  if (starttime_ != &_default_starttime_) {
    delete starttime_;
  }
  if (endtime_ != &_default_endtime_) {
    delete endtime_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (devip_ != &::google::protobuf::internal::kEmptyString) {
    delete devip_;
  }
  if (strbucket_ != &::google::protobuf::internal::kEmptyString) {
    delete strbucket_;
  }
  if (this != default_instance_) {
  }
}

void Prosaverecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Prosaverecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Prosaverecord_descriptor_;
}

const Prosaverecord& Prosaverecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fProsaverecord_2eproto();  return *default_instance_;
}

Prosaverecord* Prosaverecord::default_instance_ = NULL;

Prosaverecord* Prosaverecord::New() const {
  return new Prosaverecord;
}

void Prosaverecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    clientid_ = 0;
    if (has_recordid()) {
      if (recordid_ != &::google::protobuf::internal::kEmptyString) {
        recordid_->clear();
      }
    }
    regionid_ = 0;
    cvr_ = 0;
    if (has_streamno()) {
      if (streamno_ != &::google::protobuf::internal::kEmptyString) {
        streamno_->clear();
      }
    }
    ntype_ = 0;
    mediatype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    calltype_ = 0;
    if (has_callno()) {
      if (callno_ != &::google::protobuf::internal::kEmptyString) {
        callno_->clear();
      }
    }
    if (has_recorduserno()) {
      if (recorduserno_ != &::google::protobuf::internal::kEmptyString) {
        recorduserno_->clear();
      }
    }
    statetype_ = 0;
    if (has_starttime()) {
      if (starttime_ != &_default_starttime_) {
        starttime_->assign(_default_starttime_);
      }
    }
    if (has_endtime()) {
      if (endtime_ != &_default_endtime_) {
        endtime_->assign(_default_endtime_);
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_devip()) {
      if (devip_ != &::google::protobuf::internal::kEmptyString) {
        devip_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    devid_ = 0;
    devchannel_ = 0;
    locked_ = 0;
    upload_ = 0;
    if (has_strbucket()) {
      if (strbucket_ != &::google::protobuf::internal::kEmptyString) {
        strbucket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Prosaverecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientId;
        break;
      }
      
      // optional int32 clientId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_recordId;
        break;
      }
      
      // optional string recordId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recordid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recordid().data(), this->recordid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_regionId;
        break;
      }
      
      // optional int32 regionId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regionid_)));
          set_has_regionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cvr;
        break;
      }
      
      // optional int32 cvr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cvr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cvr_)));
          set_has_cvr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_streamNo;
        break;
      }
      
      // optional string streamNo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_streamNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->streamno().data(), this->streamno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nType;
        break;
      }
      
      // optional int32 nType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mediaType;
        break;
      }
      
      // optional int32 mediaType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mediaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mediatype_)));
          set_has_mediatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_calltype;
        break;
      }
      
      // optional int32 calltype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calltype_)));
          set_has_calltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_callNo;
        break;
      }
      
      // optional string callNo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callno().data(), this->callno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_recordUserNo;
        break;
      }
      
      // optional string recordUserNo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordUserNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recorduserno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recorduserno().data(), this->recorduserno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_stateType;
        break;
      }
      
      // optional int32 stateType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statetype_)));
          set_has_statetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_startTime;
        break;
      }
      
      // optional string startTime = 13 [default = "1970-01-01 00:00:00"];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_endTime;
        break;
      }
      
      // optional string endTime = 14 [default = "1970-01-01 00:00:00"];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_fileName;
        break;
      }
      
      // optional string fileName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_devIp;
        break;
      }
      
      // optional string devIp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devip().data(), this->devip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_devId;
        break;
      }
      
      // optional int32 devId = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devid_)));
          set_has_devid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_devChannel;
        break;
      }
      
      // optional int32 devChannel = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devchannel_)));
          set_has_devchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_locked;
        break;
      }
      
      // optional int32 locked = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_upload;
        break;
      }
      
      // optional int32 upload = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_)));
          set_has_upload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_strBucket;
        break;
      }
      
      // optional string strBucket = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strBucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strbucket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strbucket().data(), this->strbucket().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Prosaverecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 clientId = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clientid(), output);
  }
  
  // optional string recordId = 3;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordid().data(), this->recordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->recordid(), output);
  }
  
  // optional int32 regionId = 4;
  if (has_regionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->regionid(), output);
  }
  
  // optional int32 cvr = 5;
  if (has_cvr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cvr(), output);
  }
  
  // optional string streamNo = 6;
  if (has_streamno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streamno().data(), this->streamno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->streamno(), output);
  }
  
  // optional int32 nType = 7;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ntype(), output);
  }
  
  // optional int32 mediaType = 8;
  if (has_mediatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mediatype(), output);
  }
  
  // optional int32 calltype = 9;
  if (has_calltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->calltype(), output);
  }
  
  // optional string callNo = 10;
  if (has_callno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callno().data(), this->callno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->callno(), output);
  }
  
  // optional string recordUserNo = 11;
  if (has_recorduserno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recorduserno().data(), this->recorduserno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->recorduserno(), output);
  }
  
  // optional int32 stateType = 12;
  if (has_statetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->statetype(), output);
  }
  
  // optional string startTime = 13 [default = "1970-01-01 00:00:00"];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->starttime(), output);
  }
  
  // optional string endTime = 14 [default = "1970-01-01 00:00:00"];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->endtime(), output);
  }
  
  // optional string fileName = 15;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->filename(), output);
  }
  
  // optional string devIp = 16;
  if (has_devip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devip().data(), this->devip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->devip(), output);
  }
  
  // optional int32 devId = 17;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->devid(), output);
  }
  
  // optional int32 devChannel = 18;
  if (has_devchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->devchannel(), output);
  }
  
  // optional int32 locked = 19;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->locked(), output);
  }
  
  // optional int32 upload = 20;
  if (has_upload()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->upload(), output);
  }
  
  // optional string strBucket = 21;
  if (has_strbucket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbucket().data(), this->strbucket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->strbucket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Prosaverecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 clientId = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clientid(), target);
  }
  
  // optional string recordId = 3;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordid().data(), this->recordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->recordid(), target);
  }
  
  // optional int32 regionId = 4;
  if (has_regionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->regionid(), target);
  }
  
  // optional int32 cvr = 5;
  if (has_cvr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cvr(), target);
  }
  
  // optional string streamNo = 6;
  if (has_streamno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streamno().data(), this->streamno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->streamno(), target);
  }
  
  // optional int32 nType = 7;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ntype(), target);
  }
  
  // optional int32 mediaType = 8;
  if (has_mediatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mediatype(), target);
  }
  
  // optional int32 calltype = 9;
  if (has_calltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->calltype(), target);
  }
  
  // optional string callNo = 10;
  if (has_callno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callno().data(), this->callno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->callno(), target);
  }
  
  // optional string recordUserNo = 11;
  if (has_recorduserno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recorduserno().data(), this->recorduserno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->recorduserno(), target);
  }
  
  // optional int32 stateType = 12;
  if (has_statetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->statetype(), target);
  }
  
  // optional string startTime = 13 [default = "1970-01-01 00:00:00"];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->starttime(), target);
  }
  
  // optional string endTime = 14 [default = "1970-01-01 00:00:00"];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->endtime(), target);
  }
  
  // optional string fileName = 15;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->filename(), target);
  }
  
  // optional string devIp = 16;
  if (has_devip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devip().data(), this->devip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->devip(), target);
  }
  
  // optional int32 devId = 17;
  if (has_devid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->devid(), target);
  }
  
  // optional int32 devChannel = 18;
  if (has_devchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->devchannel(), target);
  }
  
  // optional int32 locked = 19;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->locked(), target);
  }
  
  // optional int32 upload = 20;
  if (has_upload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->upload(), target);
  }
  
  // optional string strBucket = 21;
  if (has_strbucket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbucket().data(), this->strbucket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->strbucket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Prosaverecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 clientId = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientid());
    }
    
    // optional string recordId = 3;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recordid());
    }
    
    // optional int32 regionId = 4;
    if (has_regionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regionid());
    }
    
    // optional int32 cvr = 5;
    if (has_cvr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cvr());
    }
    
    // optional string streamNo = 6;
    if (has_streamno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamno());
    }
    
    // optional int32 nType = 7;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
    // optional int32 mediaType = 8;
    if (has_mediatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mediatype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 calltype = 9;
    if (has_calltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calltype());
    }
    
    // optional string callNo = 10;
    if (has_callno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callno());
    }
    
    // optional string recordUserNo = 11;
    if (has_recorduserno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recorduserno());
    }
    
    // optional int32 stateType = 12;
    if (has_statetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statetype());
    }
    
    // optional string startTime = 13 [default = "1970-01-01 00:00:00"];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }
    
    // optional string endTime = 14 [default = "1970-01-01 00:00:00"];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }
    
    // optional string fileName = 15;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // optional string devIp = 16;
    if (has_devip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devip());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 devId = 17;
    if (has_devid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devid());
    }
    
    // optional int32 devChannel = 18;
    if (has_devchannel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devchannel());
    }
    
    // optional int32 locked = 19;
    if (has_locked()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locked());
    }
    
    // optional int32 upload = 20;
    if (has_upload()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload());
    }
    
    // optional string strBucket = 21;
    if (has_strbucket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strbucket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Prosaverecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Prosaverecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Prosaverecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Prosaverecord::MergeFrom(const Prosaverecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_regionid()) {
      set_regionid(from.regionid());
    }
    if (from.has_cvr()) {
      set_cvr(from.cvr());
    }
    if (from.has_streamno()) {
      set_streamno(from.streamno());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
    if (from.has_mediatype()) {
      set_mediatype(from.mediatype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_calltype()) {
      set_calltype(from.calltype());
    }
    if (from.has_callno()) {
      set_callno(from.callno());
    }
    if (from.has_recorduserno()) {
      set_recorduserno(from.recorduserno());
    }
    if (from.has_statetype()) {
      set_statetype(from.statetype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_devip()) {
      set_devip(from.devip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_devchannel()) {
      set_devchannel(from.devchannel());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_upload()) {
      set_upload(from.upload());
    }
    if (from.has_strbucket()) {
      set_strbucket(from.strbucket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Prosaverecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prosaverecord::CopyFrom(const Prosaverecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prosaverecord::IsInitialized() const {
  
  return true;
}

void Prosaverecord::Swap(Prosaverecord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(clientid_, other->clientid_);
    std::swap(recordid_, other->recordid_);
    std::swap(regionid_, other->regionid_);
    std::swap(cvr_, other->cvr_);
    std::swap(streamno_, other->streamno_);
    std::swap(ntype_, other->ntype_);
    std::swap(mediatype_, other->mediatype_);
    std::swap(calltype_, other->calltype_);
    std::swap(callno_, other->callno_);
    std::swap(recorduserno_, other->recorduserno_);
    std::swap(statetype_, other->statetype_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(filename_, other->filename_);
    std::swap(devip_, other->devip_);
    std::swap(devid_, other->devid_);
    std::swap(devchannel_, other->devchannel_);
    std::swap(locked_, other->locked_);
    std::swap(upload_, other->upload_);
    std::swap(strbucket_, other->strbucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Prosaverecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Prosaverecord_descriptor_;
  metadata.reflection = Prosaverecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqProsaverecord::kCmdFieldNumber;
const int ReqProsaverecord::kIdFieldNumber;
const int ReqProsaverecord::kClientIdFieldNumber;
const int ReqProsaverecord::kStrIdsFieldNumber;
#endif  // !_MSC_VER

ReqProsaverecord::ReqProsaverecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqProsaverecord::InitAsDefaultInstance() {
}

ReqProsaverecord::ReqProsaverecord(const ReqProsaverecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqProsaverecord::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  id_ = 0;
  clientid_ = 0;
  strids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqProsaverecord::~ReqProsaverecord() {
  SharedDtor();
}

void ReqProsaverecord::SharedDtor() {
  if (strids_ != &::google::protobuf::internal::kEmptyString) {
    delete strids_;
  }
  if (this != default_instance_) {
  }
}

void ReqProsaverecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqProsaverecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqProsaverecord_descriptor_;
}

const ReqProsaverecord& ReqProsaverecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fProsaverecord_2eproto();  return *default_instance_;
}

ReqProsaverecord* ReqProsaverecord::default_instance_ = NULL;

ReqProsaverecord* ReqProsaverecord::New() const {
  return new ReqProsaverecord;
}

void ReqProsaverecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    id_ = 0;
    clientid_ = 0;
    if (has_strids()) {
      if (strids_ != &::google::protobuf::internal::kEmptyString) {
        strids_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqProsaverecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientId;
        break;
      }
      
      // optional int32 clientId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strIds;
        break;
      }
      
      // optional string strIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strids().data(), this->strids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqProsaverecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 clientId = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clientid(), output);
  }
  
  // optional string strIds = 4;
  if (has_strids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strids().data(), this->strids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strids(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqProsaverecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 clientId = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clientid(), target);
  }
  
  // optional string strIds = 4;
  if (has_strids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strids().data(), this->strids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strids(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqProsaverecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 clientId = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientid());
    }
    
    // optional string strIds = 4;
    if (has_strids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strids());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqProsaverecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqProsaverecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqProsaverecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqProsaverecord::MergeFrom(const ReqProsaverecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_strids()) {
      set_strids(from.strids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqProsaverecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqProsaverecord::CopyFrom(const ReqProsaverecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqProsaverecord::IsInitialized() const {
  
  return true;
}

void ReqProsaverecord::Swap(ReqProsaverecord* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(id_, other->id_);
    std::swap(clientid_, other->clientid_);
    std::swap(strids_, other->strids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqProsaverecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqProsaverecord_descriptor_;
  metadata.reflection = ReqProsaverecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProsaverecordList::kCmdFieldNumber;
const int ProsaverecordList::kProsaverecordFieldNumber;
#endif  // !_MSC_VER

ProsaverecordList::ProsaverecordList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProsaverecordList::InitAsDefaultInstance() {
}

ProsaverecordList::ProsaverecordList(const ProsaverecordList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProsaverecordList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProsaverecordList::~ProsaverecordList() {
  SharedDtor();
}

void ProsaverecordList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProsaverecordList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProsaverecordList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProsaverecordList_descriptor_;
}

const ProsaverecordList& ProsaverecordList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fProsaverecord_2eproto();  return *default_instance_;
}

ProsaverecordList* ProsaverecordList::default_instance_ = NULL;

ProsaverecordList* ProsaverecordList::New() const {
  return new ProsaverecordList;
}

void ProsaverecordList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  prosaverecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProsaverecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prosaverecord;
        break;
      }
      
      // repeated .cms_8120.Prosaverecord prosaverecord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prosaverecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prosaverecord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prosaverecord;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProsaverecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // repeated .cms_8120.Prosaverecord prosaverecord = 2;
  for (int i = 0; i < this->prosaverecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prosaverecord(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProsaverecordList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // repeated .cms_8120.Prosaverecord prosaverecord = 2;
  for (int i = 0; i < this->prosaverecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prosaverecord(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProsaverecordList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
  }
  // repeated .cms_8120.Prosaverecord prosaverecord = 2;
  total_size += 1 * this->prosaverecord_size();
  for (int i = 0; i < this->prosaverecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prosaverecord(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProsaverecordList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProsaverecordList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProsaverecordList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProsaverecordList::MergeFrom(const ProsaverecordList& from) {
  GOOGLE_CHECK_NE(&from, this);
  prosaverecord_.MergeFrom(from.prosaverecord_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProsaverecordList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProsaverecordList::CopyFrom(const ProsaverecordList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProsaverecordList::IsInitialized() const {
  
  return true;
}

void ProsaverecordList::Swap(ProsaverecordList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    prosaverecord_.Swap(&other->prosaverecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProsaverecordList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProsaverecordList_descriptor_;
  metadata.reflection = ProsaverecordList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
