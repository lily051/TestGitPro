// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center/Alarmlog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* Alarmlog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alarmlog_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmlogInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmlogInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_2fAlarmlog_2eproto() {
  protobuf_AddDesc_center_2fAlarmlog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center/Alarmlog.proto");
  GOOGLE_CHECK(file != NULL);
  Alarmlog_descriptor_ = file->message_type(0);
  static const int Alarmlog_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, checktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, checkobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, checkchan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, contactobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, alarmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, alarmtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, alarmbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, alarmregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, strhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, checker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, userno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, dealtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, dealcomment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, alarmlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, strguid_),
  };
  Alarmlog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Alarmlog_descriptor_,
      Alarmlog::default_instance_,
      Alarmlog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alarmlog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Alarmlog));
  AlarmlogInfo_descriptor_ = file->message_type(1);
  static const int AlarmlogInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmlogInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmlogInfo, alarmlog_),
  };
  AlarmlogInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmlogInfo_descriptor_,
      AlarmlogInfo::default_instance_,
      AlarmlogInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmlogInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmlogInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmlogInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_2fAlarmlog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Alarmlog_descriptor_, &Alarmlog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmlogInfo_descriptor_, &AlarmlogInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_2fAlarmlog_2eproto() {
  delete Alarmlog::default_instance_;
  delete Alarmlog_reflection_;
  delete AlarmlogInfo::default_instance_;
  delete AlarmlogInfo_reflection_;
}

void protobuf_AddDesc_center_2fAlarmlog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_server_2fRspServerData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025center/Alarmlog.proto\022\010cms_8120\032\032serve"
    "r/RspServerData.proto\"\333\002\n\010Alarmlog\022\n\n\002id"
    "\030\001 \001(\005\022\021\n\tcheckType\030\002 \001(\005\022\022\n\ncheckObjId\030"
    "\003 \001(\005\022\021\n\tcheckChan\030\004 \001(\005\022\024\n\014contactObjId"
    "\030\005 \001(\005\022\021\n\talarmType\030\006 \001(\005\022\021\n\talarmTime\030\007"
    " \001(\t\022\026\n\016alarmbeginTime\030\010 \001(\t\022\025\n\ralarmReg"
    "ionId\030\t \001(\005\022\020\n\010comments\030\n \001(\t\022\017\n\007strHost"
    "\030\013 \001(\t\022\016\n\006status\030\014 \001(\005\022\017\n\007checker\030\r \001(\t\022"
    "\016\n\006userNo\030\016 \001(\t\022\020\n\010dealTime\030\017 \001(\t\022\023\n\013dea"
    "lcomment\030\020 \001(\t\022\022\n\nalarmlevel\030\021 \001(\005\022\017\n\007st"
    "rGuid\030\022 \001(\t\"A\n\014AlarmlogInfo\022\013\n\003cmd\030\001 \001(\005"
    "\022$\n\010alarmlog\030\002 \001(\0132\022.cms_8120.Alarmlog2\350"
    "\001\n\025ModifyAlarmlogService\022A\n\017QyeryAlarmlo"
    "gID\022\026.cms_8120.AlarmlogInfo\032\026.cms_8120.A"
    "larmlogInfo\022E\n\022InsertAlarmlogInfo\022\026.cms_"
    "8120.AlarmlogInfo\032\027.cms_8120.RspServerDa"
    "ta\022E\n\022UpdateAlarmlogInfo\022\026.cms_8120.Alar"
    "mlogInfo\032\027.cms_8120.RspServerDataB<\n(com"
    ".hikvision.finance.fms.cms.hpp.centerB\rA"
    "larmlogProto\210\001\001", 775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center/Alarmlog.proto", &protobuf_RegisterTypes);
  Alarmlog::default_instance_ = new Alarmlog();
  AlarmlogInfo::default_instance_ = new AlarmlogInfo();
  Alarmlog::default_instance_->InitAsDefaultInstance();
  AlarmlogInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_2fAlarmlog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_2fAlarmlog_2eproto {
  StaticDescriptorInitializer_center_2fAlarmlog_2eproto() {
    protobuf_AddDesc_center_2fAlarmlog_2eproto();
  }
} static_descriptor_initializer_center_2fAlarmlog_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Alarmlog::kIdFieldNumber;
const int Alarmlog::kCheckTypeFieldNumber;
const int Alarmlog::kCheckObjIdFieldNumber;
const int Alarmlog::kCheckChanFieldNumber;
const int Alarmlog::kContactObjIdFieldNumber;
const int Alarmlog::kAlarmTypeFieldNumber;
const int Alarmlog::kAlarmTimeFieldNumber;
const int Alarmlog::kAlarmbeginTimeFieldNumber;
const int Alarmlog::kAlarmRegionIdFieldNumber;
const int Alarmlog::kCommentsFieldNumber;
const int Alarmlog::kStrHostFieldNumber;
const int Alarmlog::kStatusFieldNumber;
const int Alarmlog::kCheckerFieldNumber;
const int Alarmlog::kUserNoFieldNumber;
const int Alarmlog::kDealTimeFieldNumber;
const int Alarmlog::kDealcommentFieldNumber;
const int Alarmlog::kAlarmlevelFieldNumber;
const int Alarmlog::kStrGuidFieldNumber;
#endif  // !_MSC_VER

Alarmlog::Alarmlog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Alarmlog::InitAsDefaultInstance() {
}

Alarmlog::Alarmlog(const Alarmlog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Alarmlog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  checktype_ = 0;
  checkobjid_ = 0;
  checkchan_ = 0;
  contactobjid_ = 0;
  alarmtype_ = 0;
  alarmtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarmbegintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarmregionid_ = 0;
  comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  checker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dealtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dealcomment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarmlevel_ = 0;
  strguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Alarmlog::~Alarmlog() {
  SharedDtor();
}

void Alarmlog::SharedDtor() {
  if (alarmtime_ != &::google::protobuf::internal::kEmptyString) {
    delete alarmtime_;
  }
  if (alarmbegintime_ != &::google::protobuf::internal::kEmptyString) {
    delete alarmbegintime_;
  }
  if (comments_ != &::google::protobuf::internal::kEmptyString) {
    delete comments_;
  }
  if (strhost_ != &::google::protobuf::internal::kEmptyString) {
    delete strhost_;
  }
  if (checker_ != &::google::protobuf::internal::kEmptyString) {
    delete checker_;
  }
  if (userno_ != &::google::protobuf::internal::kEmptyString) {
    delete userno_;
  }
  if (dealtime_ != &::google::protobuf::internal::kEmptyString) {
    delete dealtime_;
  }
  if (dealcomment_ != &::google::protobuf::internal::kEmptyString) {
    delete dealcomment_;
  }
  if (strguid_ != &::google::protobuf::internal::kEmptyString) {
    delete strguid_;
  }
  if (this != default_instance_) {
  }
}

void Alarmlog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alarmlog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alarmlog_descriptor_;
}

const Alarmlog& Alarmlog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fAlarmlog_2eproto();  return *default_instance_;
}

Alarmlog* Alarmlog::default_instance_ = NULL;

Alarmlog* Alarmlog::New() const {
  return new Alarmlog;
}

void Alarmlog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    checktype_ = 0;
    checkobjid_ = 0;
    checkchan_ = 0;
    contactobjid_ = 0;
    alarmtype_ = 0;
    if (has_alarmtime()) {
      if (alarmtime_ != &::google::protobuf::internal::kEmptyString) {
        alarmtime_->clear();
      }
    }
    if (has_alarmbegintime()) {
      if (alarmbegintime_ != &::google::protobuf::internal::kEmptyString) {
        alarmbegintime_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    alarmregionid_ = 0;
    if (has_comments()) {
      if (comments_ != &::google::protobuf::internal::kEmptyString) {
        comments_->clear();
      }
    }
    if (has_strhost()) {
      if (strhost_ != &::google::protobuf::internal::kEmptyString) {
        strhost_->clear();
      }
    }
    status_ = 0;
    if (has_checker()) {
      if (checker_ != &::google::protobuf::internal::kEmptyString) {
        checker_->clear();
      }
    }
    if (has_userno()) {
      if (userno_ != &::google::protobuf::internal::kEmptyString) {
        userno_->clear();
      }
    }
    if (has_dealtime()) {
      if (dealtime_ != &::google::protobuf::internal::kEmptyString) {
        dealtime_->clear();
      }
    }
    if (has_dealcomment()) {
      if (dealcomment_ != &::google::protobuf::internal::kEmptyString) {
        dealcomment_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    alarmlevel_ = 0;
    if (has_strguid()) {
      if (strguid_ != &::google::protobuf::internal::kEmptyString) {
        strguid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Alarmlog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_checkType;
        break;
      }
      
      // optional int32 checkType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checktype_)));
          set_has_checktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_checkObjId;
        break;
      }
      
      // optional int32 checkObjId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkobjid_)));
          set_has_checkobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_checkChan;
        break;
      }
      
      // optional int32 checkChan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkChan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkchan_)));
          set_has_checkchan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_contactObjId;
        break;
      }
      
      // optional int32 contactObjId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contactObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contactobjid_)));
          set_has_contactobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_alarmType;
        break;
      }
      
      // optional int32 alarmType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmtype_)));
          set_has_alarmtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_alarmTime;
        break;
      }
      
      // optional string alarmTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarmTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alarmtime().data(), this->alarmtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_alarmbeginTime;
        break;
      }
      
      // optional string alarmbeginTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarmbeginTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmbegintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alarmbegintime().data(), this->alarmbegintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_alarmRegionId;
        break;
      }
      
      // optional int32 alarmRegionId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmRegionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmregionid_)));
          set_has_alarmregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_comments;
        break;
      }
      
      // optional string comments = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comments()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comments().data(), this->comments().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_strHost;
        break;
      }
      
      // optional string strHost = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strHost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strhost().data(), this->strhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_status;
        break;
      }
      
      // optional int32 status = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_checker;
        break;
      }
      
      // optional string checker = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checker().data(), this->checker().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_userNo;
        break;
      }
      
      // optional string userNo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userno().data(), this->userno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_dealTime;
        break;
      }
      
      // optional string dealTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dealTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dealtime().data(), this->dealtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_dealcomment;
        break;
      }
      
      // optional string dealcomment = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dealcomment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealcomment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dealcomment().data(), this->dealcomment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_alarmlevel;
        break;
      }
      
      // optional int32 alarmlevel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmlevel_)));
          set_has_alarmlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_strGuid;
        break;
      }
      
      // optional string strGuid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strguid().data(), this->strguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Alarmlog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 checkType = 2;
  if (has_checktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->checktype(), output);
  }
  
  // optional int32 checkObjId = 3;
  if (has_checkobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->checkobjid(), output);
  }
  
  // optional int32 checkChan = 4;
  if (has_checkchan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->checkchan(), output);
  }
  
  // optional int32 contactObjId = 5;
  if (has_contactobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->contactobjid(), output);
  }
  
  // optional int32 alarmType = 6;
  if (has_alarmtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->alarmtype(), output);
  }
  
  // optional string alarmTime = 7;
  if (has_alarmtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmtime().data(), this->alarmtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->alarmtime(), output);
  }
  
  // optional string alarmbeginTime = 8;
  if (has_alarmbegintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmbegintime().data(), this->alarmbegintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->alarmbegintime(), output);
  }
  
  // optional int32 alarmRegionId = 9;
  if (has_alarmregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->alarmregionid(), output);
  }
  
  // optional string comments = 10;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->comments(), output);
  }
  
  // optional string strHost = 11;
  if (has_strhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strhost().data(), this->strhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->strhost(), output);
  }
  
  // optional int32 status = 12;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->status(), output);
  }
  
  // optional string checker = 13;
  if (has_checker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checker().data(), this->checker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->checker(), output);
  }
  
  // optional string userNo = 14;
  if (has_userno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userno().data(), this->userno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->userno(), output);
  }
  
  // optional string dealTime = 15;
  if (has_dealtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealtime().data(), this->dealtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->dealtime(), output);
  }
  
  // optional string dealcomment = 16;
  if (has_dealcomment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealcomment().data(), this->dealcomment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->dealcomment(), output);
  }
  
  // optional int32 alarmlevel = 17;
  if (has_alarmlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->alarmlevel(), output);
  }
  
  // optional string strGuid = 18;
  if (has_strguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strguid().data(), this->strguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->strguid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Alarmlog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 checkType = 2;
  if (has_checktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->checktype(), target);
  }
  
  // optional int32 checkObjId = 3;
  if (has_checkobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->checkobjid(), target);
  }
  
  // optional int32 checkChan = 4;
  if (has_checkchan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->checkchan(), target);
  }
  
  // optional int32 contactObjId = 5;
  if (has_contactobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->contactobjid(), target);
  }
  
  // optional int32 alarmType = 6;
  if (has_alarmtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->alarmtype(), target);
  }
  
  // optional string alarmTime = 7;
  if (has_alarmtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmtime().data(), this->alarmtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->alarmtime(), target);
  }
  
  // optional string alarmbeginTime = 8;
  if (has_alarmbegintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmbegintime().data(), this->alarmbegintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->alarmbegintime(), target);
  }
  
  // optional int32 alarmRegionId = 9;
  if (has_alarmregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->alarmregionid(), target);
  }
  
  // optional string comments = 10;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->comments(), target);
  }
  
  // optional string strHost = 11;
  if (has_strhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strhost().data(), this->strhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->strhost(), target);
  }
  
  // optional int32 status = 12;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->status(), target);
  }
  
  // optional string checker = 13;
  if (has_checker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checker().data(), this->checker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->checker(), target);
  }
  
  // optional string userNo = 14;
  if (has_userno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userno().data(), this->userno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->userno(), target);
  }
  
  // optional string dealTime = 15;
  if (has_dealtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealtime().data(), this->dealtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->dealtime(), target);
  }
  
  // optional string dealcomment = 16;
  if (has_dealcomment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dealcomment().data(), this->dealcomment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->dealcomment(), target);
  }
  
  // optional int32 alarmlevel = 17;
  if (has_alarmlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->alarmlevel(), target);
  }
  
  // optional string strGuid = 18;
  if (has_strguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strguid().data(), this->strguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->strguid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Alarmlog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 checkType = 2;
    if (has_checktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checktype());
    }
    
    // optional int32 checkObjId = 3;
    if (has_checkobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkobjid());
    }
    
    // optional int32 checkChan = 4;
    if (has_checkchan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkchan());
    }
    
    // optional int32 contactObjId = 5;
    if (has_contactobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contactobjid());
    }
    
    // optional int32 alarmType = 6;
    if (has_alarmtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarmtype());
    }
    
    // optional string alarmTime = 7;
    if (has_alarmtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarmtime());
    }
    
    // optional string alarmbeginTime = 8;
    if (has_alarmbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarmbegintime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 alarmRegionId = 9;
    if (has_alarmregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarmregionid());
    }
    
    // optional string comments = 10;
    if (has_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comments());
    }
    
    // optional string strHost = 11;
    if (has_strhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strhost());
    }
    
    // optional int32 status = 12;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional string checker = 13;
    if (has_checker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checker());
    }
    
    // optional string userNo = 14;
    if (has_userno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userno());
    }
    
    // optional string dealTime = 15;
    if (has_dealtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dealtime());
    }
    
    // optional string dealcomment = 16;
    if (has_dealcomment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dealcomment());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 alarmlevel = 17;
    if (has_alarmlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarmlevel());
    }
    
    // optional string strGuid = 18;
    if (has_strguid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strguid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alarmlog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Alarmlog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Alarmlog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Alarmlog::MergeFrom(const Alarmlog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_checktype()) {
      set_checktype(from.checktype());
    }
    if (from.has_checkobjid()) {
      set_checkobjid(from.checkobjid());
    }
    if (from.has_checkchan()) {
      set_checkchan(from.checkchan());
    }
    if (from.has_contactobjid()) {
      set_contactobjid(from.contactobjid());
    }
    if (from.has_alarmtype()) {
      set_alarmtype(from.alarmtype());
    }
    if (from.has_alarmtime()) {
      set_alarmtime(from.alarmtime());
    }
    if (from.has_alarmbegintime()) {
      set_alarmbegintime(from.alarmbegintime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alarmregionid()) {
      set_alarmregionid(from.alarmregionid());
    }
    if (from.has_comments()) {
      set_comments(from.comments());
    }
    if (from.has_strhost()) {
      set_strhost(from.strhost());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_checker()) {
      set_checker(from.checker());
    }
    if (from.has_userno()) {
      set_userno(from.userno());
    }
    if (from.has_dealtime()) {
      set_dealtime(from.dealtime());
    }
    if (from.has_dealcomment()) {
      set_dealcomment(from.dealcomment());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_alarmlevel()) {
      set_alarmlevel(from.alarmlevel());
    }
    if (from.has_strguid()) {
      set_strguid(from.strguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Alarmlog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alarmlog::CopyFrom(const Alarmlog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alarmlog::IsInitialized() const {
  
  return true;
}

void Alarmlog::Swap(Alarmlog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(checktype_, other->checktype_);
    std::swap(checkobjid_, other->checkobjid_);
    std::swap(checkchan_, other->checkchan_);
    std::swap(contactobjid_, other->contactobjid_);
    std::swap(alarmtype_, other->alarmtype_);
    std::swap(alarmtime_, other->alarmtime_);
    std::swap(alarmbegintime_, other->alarmbegintime_);
    std::swap(alarmregionid_, other->alarmregionid_);
    std::swap(comments_, other->comments_);
    std::swap(strhost_, other->strhost_);
    std::swap(status_, other->status_);
    std::swap(checker_, other->checker_);
    std::swap(userno_, other->userno_);
    std::swap(dealtime_, other->dealtime_);
    std::swap(dealcomment_, other->dealcomment_);
    std::swap(alarmlevel_, other->alarmlevel_);
    std::swap(strguid_, other->strguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Alarmlog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alarmlog_descriptor_;
  metadata.reflection = Alarmlog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmlogInfo::kCmdFieldNumber;
const int AlarmlogInfo::kAlarmlogFieldNumber;
#endif  // !_MSC_VER

AlarmlogInfo::AlarmlogInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlarmlogInfo::InitAsDefaultInstance() {
  alarmlog_ = const_cast< ::cms_8120::Alarmlog*>(&::cms_8120::Alarmlog::default_instance());
}

AlarmlogInfo::AlarmlogInfo(const AlarmlogInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlarmlogInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  alarmlog_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmlogInfo::~AlarmlogInfo() {
  SharedDtor();
}

void AlarmlogInfo::SharedDtor() {
  if (this != default_instance_) {
    delete alarmlog_;
  }
}

void AlarmlogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmlogInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmlogInfo_descriptor_;
}

const AlarmlogInfo& AlarmlogInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fAlarmlog_2eproto();  return *default_instance_;
}

AlarmlogInfo* AlarmlogInfo::default_instance_ = NULL;

AlarmlogInfo* AlarmlogInfo::New() const {
  return new AlarmlogInfo;
}

void AlarmlogInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_alarmlog()) {
      if (alarmlog_ != NULL) alarmlog_->::cms_8120::Alarmlog::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmlogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_alarmlog;
        break;
      }
      
      // optional .cms_8120.Alarmlog alarmlog = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarmlog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarmlog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlarmlogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional .cms_8120.Alarmlog alarmlog = 2;
  if (has_alarmlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alarmlog(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlarmlogInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional .cms_8120.Alarmlog alarmlog = 2;
  if (has_alarmlog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alarmlog(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlarmlogInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional .cms_8120.Alarmlog alarmlog = 2;
    if (has_alarmlog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarmlog());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmlogInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmlogInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmlogInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmlogInfo::MergeFrom(const AlarmlogInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_alarmlog()) {
      mutable_alarmlog()->::cms_8120::Alarmlog::MergeFrom(from.alarmlog());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmlogInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmlogInfo::CopyFrom(const AlarmlogInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmlogInfo::IsInitialized() const {
  
  return true;
}

void AlarmlogInfo::Swap(AlarmlogInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(alarmlog_, other->alarmlog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmlogInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmlogInfo_descriptor_;
  metadata.reflection = AlarmlogInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
