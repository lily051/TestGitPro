// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center/Server.proto

#ifndef PROTOBUF_center_2fServer_2eproto__INCLUDED
#define PROTOBUF_center_2fServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "type/cmd.pb.h"
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_center_2fServer_2eproto();
void protobuf_AssignDesc_center_2fServer_2eproto();
void protobuf_ShutdownFile_center_2fServer_2eproto();

class Server;
class ReqServer;
class ServerList;

// ===================================================================

class Server : public ::google::protobuf::Message {
 public:
  Server();
  virtual ~Server();
  
  Server(const Server& from);
  
  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Server& default_instance();
  
  void Swap(Server* other);
  
  // implements Message ----------------------------------------------
  
  Server* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 nType = 2;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNTypeFieldNumber = 2;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);
  
  // optional string strIP = 3;
  inline bool has_strip() const;
  inline void clear_strip();
  static const int kStrIPFieldNumber = 3;
  inline const ::std::string& strip() const;
  inline void set_strip(const ::std::string& value);
  inline void set_strip(const char* value);
  inline void set_strip(const char* value, size_t size);
  inline ::std::string* mutable_strip();
  inline ::std::string* release_strip();
  
  // optional int32 nCtrlPort = 4;
  inline bool has_nctrlport() const;
  inline void clear_nctrlport();
  static const int kNCtrlPortFieldNumber = 4;
  inline ::google::protobuf::int32 nctrlport() const;
  inline void set_nctrlport(::google::protobuf::int32 value);
  
  // optional int32 nDataPort = 5;
  inline bool has_ndataport() const;
  inline void clear_ndataport();
  static const int kNDataPortFieldNumber = 5;
  inline ::google::protobuf::int32 ndataport() const;
  inline void set_ndataport(::google::protobuf::int32 value);
  
  // optional string strUser = 6;
  inline bool has_struser() const;
  inline void clear_struser();
  static const int kStrUserFieldNumber = 6;
  inline const ::std::string& struser() const;
  inline void set_struser(const ::std::string& value);
  inline void set_struser(const char* value);
  inline void set_struser(const char* value, size_t size);
  inline ::std::string* mutable_struser();
  inline ::std::string* release_struser();
  
  // optional string strComment = 7;
  inline bool has_strcomment() const;
  inline void clear_strcomment();
  static const int kStrCommentFieldNumber = 7;
  inline const ::std::string& strcomment() const;
  inline void set_strcomment(const ::std::string& value);
  inline void set_strcomment(const char* value);
  inline void set_strcomment(const char* value, size_t size);
  inline ::std::string* mutable_strcomment();
  inline ::std::string* release_strcomment();
  
  // optional int32 nMultId = 8;
  inline bool has_nmultid() const;
  inline void clear_nmultid();
  static const int kNMultIdFieldNumber = 8;
  inline ::google::protobuf::int32 nmultid() const;
  inline void set_nmultid(::google::protobuf::int32 value);
  
  // optional int32 nMultVer = 9;
  inline bool has_nmultver() const;
  inline void clear_nmultver();
  static const int kNMultVerFieldNumber = 9;
  inline ::google::protobuf::int32 nmultver() const;
  inline void set_nmultver(::google::protobuf::int32 value);
  
  // optional int32 nMultSysId = 10;
  inline bool has_nmultsysid() const;
  inline void clear_nmultsysid();
  static const int kNMultSysIdFieldNumber = 10;
  inline ::google::protobuf::int32 nmultsysid() const;
  inline void set_nmultsysid(::google::protobuf::int32 value);
  
  // optional string strConfig = 11;
  inline bool has_strconfig() const;
  inline void clear_strconfig();
  static const int kStrConfigFieldNumber = 11;
  inline const ::std::string& strconfig() const;
  inline void set_strconfig(const ::std::string& value);
  inline void set_strconfig(const char* value);
  inline void set_strconfig(const char* value, size_t size);
  inline ::std::string* mutable_strconfig();
  inline ::std::string* release_strconfig();
  
  // optional int32 nonline = 12;
  inline bool has_nonline() const;
  inline void clear_nonline();
  static const int kNonlineFieldNumber = 12;
  inline ::google::protobuf::int32 nonline() const;
  inline void set_nonline(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cms_8120.Server)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ntype();
  inline void clear_has_ntype();
  inline void set_has_strip();
  inline void clear_has_strip();
  inline void set_has_nctrlport();
  inline void clear_has_nctrlport();
  inline void set_has_ndataport();
  inline void clear_has_ndataport();
  inline void set_has_struser();
  inline void clear_has_struser();
  inline void set_has_strcomment();
  inline void clear_has_strcomment();
  inline void set_has_nmultid();
  inline void clear_has_nmultid();
  inline void set_has_nmultver();
  inline void clear_has_nmultver();
  inline void set_has_nmultsysid();
  inline void clear_has_nmultsysid();
  inline void set_has_strconfig();
  inline void clear_has_strconfig();
  inline void set_has_nonline();
  inline void clear_has_nonline();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 ntype_;
  ::std::string* strip_;
  ::google::protobuf::int32 nctrlport_;
  ::google::protobuf::int32 ndataport_;
  ::std::string* struser_;
  ::std::string* strcomment_;
  ::google::protobuf::int32 nmultid_;
  ::google::protobuf::int32 nmultver_;
  ::std::string* strconfig_;
  ::google::protobuf::int32 nmultsysid_;
  ::google::protobuf::int32 nonline_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fServer_2eproto();
  friend void protobuf_AssignDesc_center_2fServer_2eproto();
  friend void protobuf_ShutdownFile_center_2fServer_2eproto();
  
  void InitAsDefaultInstance();
  static Server* default_instance_;
};
// -------------------------------------------------------------------

class ReqServer : public ::google::protobuf::Message {
 public:
  ReqServer();
  virtual ~ReqServer();
  
  ReqServer(const ReqServer& from);
  
  inline ReqServer& operator=(const ReqServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqServer& default_instance();
  
  void Swap(ReqServer* other);
  
  // implements Message ----------------------------------------------
  
  ReqServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqServer& from);
  void MergeFrom(const ReqServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 nType = 3;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNTypeFieldNumber = 3;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);
  
  // optional string strIP = 4;
  inline bool has_strip() const;
  inline void clear_strip();
  static const int kStrIPFieldNumber = 4;
  inline const ::std::string& strip() const;
  inline void set_strip(const ::std::string& value);
  inline void set_strip(const char* value);
  inline void set_strip(const char* value, size_t size);
  inline ::std::string* mutable_strip();
  inline ::std::string* release_strip();
  
  // @@protoc_insertion_point(class_scope:cms_8120.ReqServer)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ntype();
  inline void clear_has_ntype();
  inline void set_has_strip();
  inline void clear_has_strip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 id_;
  ::std::string* strip_;
  ::google::protobuf::int32 ntype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fServer_2eproto();
  friend void protobuf_AssignDesc_center_2fServer_2eproto();
  friend void protobuf_ShutdownFile_center_2fServer_2eproto();
  
  void InitAsDefaultInstance();
  static ReqServer* default_instance_;
};
// -------------------------------------------------------------------

class ServerList : public ::google::protobuf::Message {
 public:
  ServerList();
  virtual ~ServerList();
  
  ServerList(const ServerList& from);
  
  inline ServerList& operator=(const ServerList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerList& default_instance();
  
  void Swap(ServerList* other);
  
  // implements Message ----------------------------------------------
  
  ServerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerList& from);
  void MergeFrom(const ServerList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // repeated .cms_8120.Server server = 2;
  inline int server_size() const;
  inline void clear_server();
  static const int kServerFieldNumber = 2;
  inline const ::cms_8120::Server& server(int index) const;
  inline ::cms_8120::Server* mutable_server(int index);
  inline ::cms_8120::Server* add_server();
  inline const ::google::protobuf::RepeatedPtrField< ::cms_8120::Server >&
      server() const;
  inline ::google::protobuf::RepeatedPtrField< ::cms_8120::Server >*
      mutable_server();
  
  // @@protoc_insertion_point(class_scope:cms_8120.ServerList)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::cms_8120::Server > server_;
  ::google::protobuf::int32 cmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fServer_2eproto();
  friend void protobuf_AssignDesc_center_2fServer_2eproto();
  friend void protobuf_ShutdownFile_center_2fServer_2eproto();
  
  void InitAsDefaultInstance();
  static ServerList* default_instance_;
};
// ===================================================================


// ===================================================================

// Server

// optional int32 id = 1;
inline bool Server::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Server::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Server::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Server::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Server::id() const {
  return id_;
}
inline void Server::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 nType = 2;
inline bool Server::has_ntype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Server::set_has_ntype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Server::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Server::clear_ntype() {
  ntype_ = 0;
  clear_has_ntype();
}
inline ::google::protobuf::int32 Server::ntype() const {
  return ntype_;
}
inline void Server::set_ntype(::google::protobuf::int32 value) {
  set_has_ntype();
  ntype_ = value;
}

// optional string strIP = 3;
inline bool Server::has_strip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Server::set_has_strip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Server::clear_has_strip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Server::clear_strip() {
  if (strip_ != &::google::protobuf::internal::kEmptyString) {
    strip_->clear();
  }
  clear_has_strip();
}
inline const ::std::string& Server::strip() const {
  return *strip_;
}
inline void Server::set_strip(const ::std::string& value) {
  set_has_strip();
  if (strip_ == &::google::protobuf::internal::kEmptyString) {
    strip_ = new ::std::string;
  }
  strip_->assign(value);
}
inline void Server::set_strip(const char* value) {
  set_has_strip();
  if (strip_ == &::google::protobuf::internal::kEmptyString) {
    strip_ = new ::std::string;
  }
  strip_->assign(value);
}
inline void Server::set_strip(const char* value, size_t size) {
  set_has_strip();
  if (strip_ == &::google::protobuf::internal::kEmptyString) {
    strip_ = new ::std::string;
  }
  strip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server::mutable_strip() {
  set_has_strip();
  if (strip_ == &::google::protobuf::internal::kEmptyString) {
    strip_ = new ::std::string;
  }
  return strip_;
}
inline ::std::string* Server::release_strip() {
  clear_has_strip();
  if (strip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strip_;
    strip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nCtrlPort = 4;
inline bool Server::has_nctrlport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Server::set_has_nctrlport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Server::clear_has_nctrlport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Server::clear_nctrlport() {
  nctrlport_ = 0;
  clear_has_nctrlport();
}
inline ::google::protobuf::int32 Server::nctrlport() const {
  return nctrlport_;
}
inline void Server::set_nctrlport(::google::protobuf::int32 value) {
  set_has_nctrlport();
  nctrlport_ = value;
}

// optional int32 nDataPort = 5;
inline bool Server::has_ndataport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Server::set_has_ndataport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Server::clear_has_ndataport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Server::clear_ndataport() {
  ndataport_ = 0;
  clear_has_ndataport();
}
inline ::google::protobuf::int32 Server::ndataport() const {
  return ndataport_;
}
inline void Server::set_ndataport(::google::protobuf::int32 value) {
  set_has_ndataport();
  ndataport_ = value;
}

// optional string strUser = 6;
inline bool Server::has_struser() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Server::set_has_struser() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Server::clear_has_struser() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Server::clear_struser() {
  if (struser_ != &::google::protobuf::internal::kEmptyString) {
    struser_->clear();
  }
  clear_has_struser();
}
inline const ::std::string& Server::struser() const {
  return *struser_;
}
inline void Server::set_struser(const ::std::string& value) {
  set_has_struser();
  if (struser_ == &::google::protobuf::internal::kEmptyString) {
    struser_ = new ::std::string;
  }
  struser_->assign(value);
}
inline void Server::set_struser(const char* value) {
  set_has_struser();
  if (struser_ == &::google::protobuf::internal::kEmptyString) {
    struser_ = new ::std::string;
  }
  struser_->assign(value);
}
inline void Server::set_struser(const char* value, size_t size) {
  set_has_struser();
  if (struser_ == &::google::protobuf::internal::kEmptyString) {
    struser_ = new ::std::string;
  }
  struser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server::mutable_struser() {
  set_has_struser();
  if (struser_ == &::google::protobuf::internal::kEmptyString) {
    struser_ = new ::std::string;
  }
  return struser_;
}
inline ::std::string* Server::release_struser() {
  clear_has_struser();
  if (struser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = struser_;
    struser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strComment = 7;
inline bool Server::has_strcomment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Server::set_has_strcomment() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Server::clear_has_strcomment() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Server::clear_strcomment() {
  if (strcomment_ != &::google::protobuf::internal::kEmptyString) {
    strcomment_->clear();
  }
  clear_has_strcomment();
}
inline const ::std::string& Server::strcomment() const {
  return *strcomment_;
}
inline void Server::set_strcomment(const ::std::string& value) {
  set_has_strcomment();
  if (strcomment_ == &::google::protobuf::internal::kEmptyString) {
    strcomment_ = new ::std::string;
  }
  strcomment_->assign(value);
}
inline void Server::set_strcomment(const char* value) {
  set_has_strcomment();
  if (strcomment_ == &::google::protobuf::internal::kEmptyString) {
    strcomment_ = new ::std::string;
  }
  strcomment_->assign(value);
}
inline void Server::set_strcomment(const char* value, size_t size) {
  set_has_strcomment();
  if (strcomment_ == &::google::protobuf::internal::kEmptyString) {
    strcomment_ = new ::std::string;
  }
  strcomment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server::mutable_strcomment() {
  set_has_strcomment();
  if (strcomment_ == &::google::protobuf::internal::kEmptyString) {
    strcomment_ = new ::std::string;
  }
  return strcomment_;
}
inline ::std::string* Server::release_strcomment() {
  clear_has_strcomment();
  if (strcomment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strcomment_;
    strcomment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nMultId = 8;
inline bool Server::has_nmultid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Server::set_has_nmultid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Server::clear_has_nmultid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Server::clear_nmultid() {
  nmultid_ = 0;
  clear_has_nmultid();
}
inline ::google::protobuf::int32 Server::nmultid() const {
  return nmultid_;
}
inline void Server::set_nmultid(::google::protobuf::int32 value) {
  set_has_nmultid();
  nmultid_ = value;
}

// optional int32 nMultVer = 9;
inline bool Server::has_nmultver() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Server::set_has_nmultver() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Server::clear_has_nmultver() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Server::clear_nmultver() {
  nmultver_ = 0;
  clear_has_nmultver();
}
inline ::google::protobuf::int32 Server::nmultver() const {
  return nmultver_;
}
inline void Server::set_nmultver(::google::protobuf::int32 value) {
  set_has_nmultver();
  nmultver_ = value;
}

// optional int32 nMultSysId = 10;
inline bool Server::has_nmultsysid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Server::set_has_nmultsysid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Server::clear_has_nmultsysid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Server::clear_nmultsysid() {
  nmultsysid_ = 0;
  clear_has_nmultsysid();
}
inline ::google::protobuf::int32 Server::nmultsysid() const {
  return nmultsysid_;
}
inline void Server::set_nmultsysid(::google::protobuf::int32 value) {
  set_has_nmultsysid();
  nmultsysid_ = value;
}

// optional string strConfig = 11;
inline bool Server::has_strconfig() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Server::set_has_strconfig() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Server::clear_has_strconfig() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Server::clear_strconfig() {
  if (strconfig_ != &::google::protobuf::internal::kEmptyString) {
    strconfig_->clear();
  }
  clear_has_strconfig();
}
inline const ::std::string& Server::strconfig() const {
  return *strconfig_;
}
inline void Server::set_strconfig(const ::std::string& value) {
  set_has_strconfig();
  if (strconfig_ == &::google::protobuf::internal::kEmptyString) {
    strconfig_ = new ::std::string;
  }
  strconfig_->assign(value);
}
inline void Server::set_strconfig(const char* value) {
  set_has_strconfig();
  if (strconfig_ == &::google::protobuf::internal::kEmptyString) {
    strconfig_ = new ::std::string;
  }
  strconfig_->assign(value);
}
inline void Server::set_strconfig(const char* value, size_t size) {
  set_has_strconfig();
  if (strconfig_ == &::google::protobuf::internal::kEmptyString) {
    strconfig_ = new ::std::string;
  }
  strconfig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server::mutable_strconfig() {
  set_has_strconfig();
  if (strconfig_ == &::google::protobuf::internal::kEmptyString) {
    strconfig_ = new ::std::string;
  }
  return strconfig_;
}
inline ::std::string* Server::release_strconfig() {
  clear_has_strconfig();
  if (strconfig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strconfig_;
    strconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nonline = 12;
inline bool Server::has_nonline() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Server::set_has_nonline() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Server::clear_has_nonline() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Server::clear_nonline() {
  nonline_ = 0;
  clear_has_nonline();
}
inline ::google::protobuf::int32 Server::nonline() const {
  return nonline_;
}
inline void Server::set_nonline(::google::protobuf::int32 value) {
  set_has_nonline();
  nonline_ = value;
}

// -------------------------------------------------------------------

// ReqServer

// optional int32 cmd = 1;
inline bool ReqServer::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqServer::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqServer::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqServer::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 ReqServer::cmd() const {
  return cmd_;
}
inline void ReqServer::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 id = 2;
inline bool ReqServer::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqServer::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqServer::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqServer::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReqServer::id() const {
  return id_;
}
inline void ReqServer::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 nType = 3;
inline bool ReqServer::has_ntype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqServer::set_has_ntype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqServer::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqServer::clear_ntype() {
  ntype_ = 0;
  clear_has_ntype();
}
inline ::google::protobuf::int32 ReqServer::ntype() const {
  return ntype_;
}
inline void ReqServer::set_ntype(::google::protobuf::int32 value) {
  set_has_ntype();
  ntype_ = value;
}

// optional string strIP = 4;
inline bool ReqServer::has_strip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqServer::set_has_strip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqServer::clear_has_strip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqServer::clear_strip() {
  if (strip_ != &::google::protobuf::internal::kEmptyString) {
    strip_->clear();
  }
  clear_has_strip();
}
inline const ::std::string& ReqServer::strip() const {
  return *strip_;
}
inline void ReqServer::set_strip(const ::std::string& value) {
  set_has_strip();
  if (strip_ == &::google::protobuf::internal::kEmptyString) {
    strip_ = new ::std::string;
  }
  strip_->assign(value);
}
inline void ReqServer::set_strip(const char* value) {
  set_has_strip();
  if (strip_ == &::google::protobuf::internal::kEmptyString) {
    strip_ = new ::std::string;
  }
  strip_->assign(value);
}
inline void ReqServer::set_strip(const char* value, size_t size) {
  set_has_strip();
  if (strip_ == &::google::protobuf::internal::kEmptyString) {
    strip_ = new ::std::string;
  }
  strip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqServer::mutable_strip() {
  set_has_strip();
  if (strip_ == &::google::protobuf::internal::kEmptyString) {
    strip_ = new ::std::string;
  }
  return strip_;
}
inline ::std::string* ReqServer::release_strip() {
  clear_has_strip();
  if (strip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strip_;
    strip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ServerList

// optional int32 cmd = 1;
inline bool ServerList::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerList::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerList::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerList::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 ServerList::cmd() const {
  return cmd_;
}
inline void ServerList::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// repeated .cms_8120.Server server = 2;
inline int ServerList::server_size() const {
  return server_.size();
}
inline void ServerList::clear_server() {
  server_.Clear();
}
inline const ::cms_8120::Server& ServerList::server(int index) const {
  return server_.Get(index);
}
inline ::cms_8120::Server* ServerList::mutable_server(int index) {
  return server_.Mutable(index);
}
inline ::cms_8120::Server* ServerList::add_server() {
  return server_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cms_8120::Server >&
ServerList::server() const {
  return server_;
}
inline ::google::protobuf::RepeatedPtrField< ::cms_8120::Server >*
ServerList::mutable_server() {
  return &server_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_2fServer_2eproto__INCLUDED
