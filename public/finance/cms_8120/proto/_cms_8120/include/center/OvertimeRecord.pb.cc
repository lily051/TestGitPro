// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center/OvertimeRecord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* ReqOvertimeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOvertimeRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* OvertimeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OvertimeRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspOvertimeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspOvertimeRecord_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_2fOvertimeRecord_2eproto() {
  protobuf_AddDesc_center_2fOvertimeRecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center/OvertimeRecord.proto");
  GOOGLE_CHECK(file != NULL);
  ReqOvertimeRecord_descriptor_ = file->message_type(0);
  static const int ReqOvertimeRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOvertimeRecord, cmd_),
  };
  ReqOvertimeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOvertimeRecord_descriptor_,
      ReqOvertimeRecord::default_instance_,
      ReqOvertimeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOvertimeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOvertimeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOvertimeRecord));
  OvertimeRecord_descriptor_ = file->message_type(1);
  static const int OvertimeRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OvertimeRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OvertimeRecord, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OvertimeRecord, businesstime_),
  };
  OvertimeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OvertimeRecord_descriptor_,
      OvertimeRecord::default_instance_,
      OvertimeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OvertimeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OvertimeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OvertimeRecord));
  RspOvertimeRecord_descriptor_ = file->message_type(2);
  static const int RspOvertimeRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOvertimeRecord, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOvertimeRecord, overtimerecord_),
  };
  RspOvertimeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspOvertimeRecord_descriptor_,
      RspOvertimeRecord::default_instance_,
      RspOvertimeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOvertimeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOvertimeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspOvertimeRecord));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_2fOvertimeRecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOvertimeRecord_descriptor_, &ReqOvertimeRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OvertimeRecord_descriptor_, &OvertimeRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspOvertimeRecord_descriptor_, &RspOvertimeRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_2fOvertimeRecord_2eproto() {
  delete ReqOvertimeRecord::default_instance_;
  delete ReqOvertimeRecord_reflection_;
  delete OvertimeRecord::default_instance_;
  delete OvertimeRecord_reflection_;
  delete RspOvertimeRecord::default_instance_;
  delete RspOvertimeRecord_reflection_;
}

void protobuf_AddDesc_center_2fOvertimeRecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_type_2fcmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033center/OvertimeRecord.proto\022\010cms_8120\032"
    "\016type/cmd.proto\" \n\021ReqOvertimeRecord\022\013\n\003"
    "cmd\030\001 \001(\005\"V\n\016OvertimeRecord\022\n\n\002id\030\001 \001(\005\022"
    "\r\n\005proId\030\002 \001(\t\022)\n\014businessTime\030\003 \001(\t:\02319"
    "70-01-01 00:00:00\"R\n\021RspOvertimeRecord\022\013"
    "\n\003cmd\030\001 \001(\005\0220\n\016overtimeRecord\030\002 \003(\0132\030.cm"
    "s_8120.OvertimeRecord2j\n\033ModifyOvertimeR"
    "ecordService\022K\n\017QyeryAlarmlogID\022\033.cms_81"
    "20.ReqOvertimeRecord\032\033.cms_8120.RspOvert"
    "imeRecordBB\n(com.hikvision.finance.fms.c"
    "ms.hpp.centerB\023OvertimeRecordProto\210\001\001", 437);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center/OvertimeRecord.proto", &protobuf_RegisterTypes);
  ReqOvertimeRecord::default_instance_ = new ReqOvertimeRecord();
  OvertimeRecord::default_instance_ = new OvertimeRecord();
  RspOvertimeRecord::default_instance_ = new RspOvertimeRecord();
  ReqOvertimeRecord::default_instance_->InitAsDefaultInstance();
  OvertimeRecord::default_instance_->InitAsDefaultInstance();
  RspOvertimeRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_2fOvertimeRecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_2fOvertimeRecord_2eproto {
  StaticDescriptorInitializer_center_2fOvertimeRecord_2eproto() {
    protobuf_AddDesc_center_2fOvertimeRecord_2eproto();
  }
} static_descriptor_initializer_center_2fOvertimeRecord_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReqOvertimeRecord::kCmdFieldNumber;
#endif  // !_MSC_VER

ReqOvertimeRecord::ReqOvertimeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOvertimeRecord::InitAsDefaultInstance() {
}

ReqOvertimeRecord::ReqOvertimeRecord(const ReqOvertimeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOvertimeRecord::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOvertimeRecord::~ReqOvertimeRecord() {
  SharedDtor();
}

void ReqOvertimeRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOvertimeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOvertimeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOvertimeRecord_descriptor_;
}

const ReqOvertimeRecord& ReqOvertimeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fOvertimeRecord_2eproto();  return *default_instance_;
}

ReqOvertimeRecord* ReqOvertimeRecord::default_instance_ = NULL;

ReqOvertimeRecord* ReqOvertimeRecord::New() const {
  return new ReqOvertimeRecord;
}

void ReqOvertimeRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOvertimeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOvertimeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOvertimeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOvertimeRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOvertimeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOvertimeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOvertimeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOvertimeRecord::MergeFrom(const ReqOvertimeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOvertimeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOvertimeRecord::CopyFrom(const ReqOvertimeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOvertimeRecord::IsInitialized() const {
  
  return true;
}

void ReqOvertimeRecord::Swap(ReqOvertimeRecord* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOvertimeRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOvertimeRecord_descriptor_;
  metadata.reflection = ReqOvertimeRecord_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string OvertimeRecord::_default_businesstime_("1970-01-01 00:00:00");
#ifndef _MSC_VER
const int OvertimeRecord::kIdFieldNumber;
const int OvertimeRecord::kProIdFieldNumber;
const int OvertimeRecord::kBusinessTimeFieldNumber;
#endif  // !_MSC_VER

OvertimeRecord::OvertimeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OvertimeRecord::InitAsDefaultInstance() {
}

OvertimeRecord::OvertimeRecord(const OvertimeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OvertimeRecord::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  proid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  businesstime_ = const_cast< ::std::string*>(&_default_businesstime_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OvertimeRecord::~OvertimeRecord() {
  SharedDtor();
}

void OvertimeRecord::SharedDtor() {
  if (proid_ != &::google::protobuf::internal::kEmptyString) {
    delete proid_;
  }
  if (businesstime_ != &_default_businesstime_) {
    delete businesstime_;
  }
  if (this != default_instance_) {
  }
}

void OvertimeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OvertimeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OvertimeRecord_descriptor_;
}

const OvertimeRecord& OvertimeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fOvertimeRecord_2eproto();  return *default_instance_;
}

OvertimeRecord* OvertimeRecord::default_instance_ = NULL;

OvertimeRecord* OvertimeRecord::New() const {
  return new OvertimeRecord;
}

void OvertimeRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_proid()) {
      if (proid_ != &::google::protobuf::internal::kEmptyString) {
        proid_->clear();
      }
    }
    if (has_businesstime()) {
      if (businesstime_ != &_default_businesstime_) {
        businesstime_->assign(_default_businesstime_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OvertimeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_proId;
        break;
      }
      
      // optional string proId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proid().data(), this->proid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_businessTime;
        break;
      }
      
      // optional string businessTime = 3 [default = "1970-01-01 00:00:00"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_businessTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businesstime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->businesstime().data(), this->businesstime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OvertimeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string proId = 2;
  if (has_proid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proid().data(), this->proid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->proid(), output);
  }
  
  // optional string businessTime = 3 [default = "1970-01-01 00:00:00"];
  if (has_businesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businesstime().data(), this->businesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->businesstime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OvertimeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string proId = 2;
  if (has_proid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proid().data(), this->proid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proid(), target);
  }
  
  // optional string businessTime = 3 [default = "1970-01-01 00:00:00"];
  if (has_businesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->businesstime().data(), this->businesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->businesstime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OvertimeRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string proId = 2;
    if (has_proid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proid());
    }
    
    // optional string businessTime = 3 [default = "1970-01-01 00:00:00"];
    if (has_businesstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->businesstime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OvertimeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OvertimeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OvertimeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OvertimeRecord::MergeFrom(const OvertimeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_businesstime()) {
      set_businesstime(from.businesstime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OvertimeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OvertimeRecord::CopyFrom(const OvertimeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OvertimeRecord::IsInitialized() const {
  
  return true;
}

void OvertimeRecord::Swap(OvertimeRecord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(proid_, other->proid_);
    std::swap(businesstime_, other->businesstime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OvertimeRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OvertimeRecord_descriptor_;
  metadata.reflection = OvertimeRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspOvertimeRecord::kCmdFieldNumber;
const int RspOvertimeRecord::kOvertimeRecordFieldNumber;
#endif  // !_MSC_VER

RspOvertimeRecord::RspOvertimeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspOvertimeRecord::InitAsDefaultInstance() {
}

RspOvertimeRecord::RspOvertimeRecord(const RspOvertimeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspOvertimeRecord::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspOvertimeRecord::~RspOvertimeRecord() {
  SharedDtor();
}

void RspOvertimeRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspOvertimeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspOvertimeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspOvertimeRecord_descriptor_;
}

const RspOvertimeRecord& RspOvertimeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fOvertimeRecord_2eproto();  return *default_instance_;
}

RspOvertimeRecord* RspOvertimeRecord::default_instance_ = NULL;

RspOvertimeRecord* RspOvertimeRecord::New() const {
  return new RspOvertimeRecord;
}

void RspOvertimeRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  overtimerecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspOvertimeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_overtimeRecord;
        break;
      }
      
      // repeated .cms_8120.OvertimeRecord overtimeRecord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_overtimeRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_overtimerecord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_overtimeRecord;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspOvertimeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // repeated .cms_8120.OvertimeRecord overtimeRecord = 2;
  for (int i = 0; i < this->overtimerecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->overtimerecord(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspOvertimeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // repeated .cms_8120.OvertimeRecord overtimeRecord = 2;
  for (int i = 0; i < this->overtimerecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->overtimerecord(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspOvertimeRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
  }
  // repeated .cms_8120.OvertimeRecord overtimeRecord = 2;
  total_size += 1 * this->overtimerecord_size();
  for (int i = 0; i < this->overtimerecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->overtimerecord(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspOvertimeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspOvertimeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspOvertimeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspOvertimeRecord::MergeFrom(const RspOvertimeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  overtimerecord_.MergeFrom(from.overtimerecord_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspOvertimeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspOvertimeRecord::CopyFrom(const RspOvertimeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspOvertimeRecord::IsInitialized() const {
  
  return true;
}

void RspOvertimeRecord::Swap(RspOvertimeRecord* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    overtimerecord_.Swap(&other->overtimerecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspOvertimeRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspOvertimeRecord_descriptor_;
  metadata.reflection = RspOvertimeRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
