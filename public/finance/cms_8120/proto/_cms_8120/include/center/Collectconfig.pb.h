// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center/Collectconfig.proto

#ifndef PROTOBUF_center_2fCollectconfig_2eproto__INCLUDED
#define PROTOBUF_center_2fCollectconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "type/cmd.pb.h"
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_center_2fCollectconfig_2eproto();
void protobuf_AssignDesc_center_2fCollectconfig_2eproto();
void protobuf_ShutdownFile_center_2fCollectconfig_2eproto();

class Collectconfig;
class ReqCollectconfig;
class RspCollectconfig;

// ===================================================================

class Collectconfig : public ::google::protobuf::Message {
 public:
  Collectconfig();
  virtual ~Collectconfig();
  
  Collectconfig(const Collectconfig& from);
  
  inline Collectconfig& operator=(const Collectconfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Collectconfig& default_instance();
  
  void Swap(Collectconfig* other);
  
  // implements Message ----------------------------------------------
  
  Collectconfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Collectconfig& from);
  void MergeFrom(const Collectconfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // optional int32 ntype = 4;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNtypeFieldNumber = 4;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);
  
  // optional int32 nsort = 5;
  inline bool has_nsort() const;
  inline void clear_nsort();
  static const int kNsortFieldNumber = 5;
  inline ::google::protobuf::int32 nsort() const;
  inline void set_nsort(::google::protobuf::int32 value);
  
  // optional string workTimeBegin = 6;
  inline bool has_worktimebegin() const;
  inline void clear_worktimebegin();
  static const int kWorkTimeBeginFieldNumber = 6;
  inline const ::std::string& worktimebegin() const;
  inline void set_worktimebegin(const ::std::string& value);
  inline void set_worktimebegin(const char* value);
  inline void set_worktimebegin(const char* value, size_t size);
  inline ::std::string* mutable_worktimebegin();
  inline ::std::string* release_worktimebegin();
  
  // optional string workTimeEnd = 7;
  inline bool has_worktimeend() const;
  inline void clear_worktimeend();
  static const int kWorkTimeEndFieldNumber = 7;
  inline const ::std::string& worktimeend() const;
  inline void set_worktimeend(const ::std::string& value);
  inline void set_worktimeend(const char* value);
  inline void set_worktimeend(const char* value, size_t size);
  inline ::std::string* mutable_worktimeend();
  inline ::std::string* release_worktimeend();
  
  // optional string kmsIp = 8;
  inline bool has_kmsip() const;
  inline void clear_kmsip();
  static const int kKmsIpFieldNumber = 8;
  inline const ::std::string& kmsip() const;
  inline void set_kmsip(const ::std::string& value);
  inline void set_kmsip(const char* value);
  inline void set_kmsip(const char* value, size_t size);
  inline ::std::string* mutable_kmsip();
  inline ::std::string* release_kmsip();
  
  // @@protoc_insertion_point(class_scope:cms_8120.Collectconfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_ntype();
  inline void clear_has_ntype();
  inline void set_has_nsort();
  inline void clear_has_nsort();
  inline void set_has_worktimebegin();
  inline void clear_has_worktimebegin();
  inline void set_has_worktimeend();
  inline void clear_has_worktimeend();
  inline void set_has_kmsip();
  inline void clear_has_kmsip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 ntype_;
  ::google::protobuf::int32 nsort_;
  ::std::string* worktimebegin_;
  ::std::string* worktimeend_;
  ::std::string* kmsip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fCollectconfig_2eproto();
  friend void protobuf_AssignDesc_center_2fCollectconfig_2eproto();
  friend void protobuf_ShutdownFile_center_2fCollectconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Collectconfig* default_instance_;
};
// -------------------------------------------------------------------

class ReqCollectconfig : public ::google::protobuf::Message {
 public:
  ReqCollectconfig();
  virtual ~ReqCollectconfig();
  
  ReqCollectconfig(const ReqCollectconfig& from);
  
  inline ReqCollectconfig& operator=(const ReqCollectconfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCollectconfig& default_instance();
  
  void Swap(ReqCollectconfig* other);
  
  // implements Message ----------------------------------------------
  
  ReqCollectconfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCollectconfig& from);
  void MergeFrom(const ReqCollectconfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cms_8120.ReqCollectconfig)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fCollectconfig_2eproto();
  friend void protobuf_AssignDesc_center_2fCollectconfig_2eproto();
  friend void protobuf_ShutdownFile_center_2fCollectconfig_2eproto();
  
  void InitAsDefaultInstance();
  static ReqCollectconfig* default_instance_;
};
// -------------------------------------------------------------------

class RspCollectconfig : public ::google::protobuf::Message {
 public:
  RspCollectconfig();
  virtual ~RspCollectconfig();
  
  RspCollectconfig(const RspCollectconfig& from);
  
  inline RspCollectconfig& operator=(const RspCollectconfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspCollectconfig& default_instance();
  
  void Swap(RspCollectconfig* other);
  
  // implements Message ----------------------------------------------
  
  RspCollectconfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspCollectconfig& from);
  void MergeFrom(const RspCollectconfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional .cms_8120.Collectconfig collectconfig = 2;
  inline bool has_collectconfig() const;
  inline void clear_collectconfig();
  static const int kCollectconfigFieldNumber = 2;
  inline const ::cms_8120::Collectconfig& collectconfig() const;
  inline ::cms_8120::Collectconfig* mutable_collectconfig();
  inline ::cms_8120::Collectconfig* release_collectconfig();
  
  // @@protoc_insertion_point(class_scope:cms_8120.RspCollectconfig)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_collectconfig();
  inline void clear_has_collectconfig();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::cms_8120::Collectconfig* collectconfig_;
  ::google::protobuf::int32 cmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fCollectconfig_2eproto();
  friend void protobuf_AssignDesc_center_2fCollectconfig_2eproto();
  friend void protobuf_ShutdownFile_center_2fCollectconfig_2eproto();
  
  void InitAsDefaultInstance();
  static RspCollectconfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Collectconfig

// optional int32 id = 1;
inline bool Collectconfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Collectconfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Collectconfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Collectconfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Collectconfig::id() const {
  return id_;
}
inline void Collectconfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string ip = 2;
inline bool Collectconfig::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Collectconfig::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Collectconfig::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Collectconfig::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Collectconfig::ip() const {
  return *ip_;
}
inline void Collectconfig::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Collectconfig::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Collectconfig::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Collectconfig::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Collectconfig::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 port = 3;
inline bool Collectconfig::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Collectconfig::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Collectconfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Collectconfig::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Collectconfig::port() const {
  return port_;
}
inline void Collectconfig::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 ntype = 4;
inline bool Collectconfig::has_ntype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Collectconfig::set_has_ntype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Collectconfig::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Collectconfig::clear_ntype() {
  ntype_ = 0;
  clear_has_ntype();
}
inline ::google::protobuf::int32 Collectconfig::ntype() const {
  return ntype_;
}
inline void Collectconfig::set_ntype(::google::protobuf::int32 value) {
  set_has_ntype();
  ntype_ = value;
}

// optional int32 nsort = 5;
inline bool Collectconfig::has_nsort() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Collectconfig::set_has_nsort() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Collectconfig::clear_has_nsort() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Collectconfig::clear_nsort() {
  nsort_ = 0;
  clear_has_nsort();
}
inline ::google::protobuf::int32 Collectconfig::nsort() const {
  return nsort_;
}
inline void Collectconfig::set_nsort(::google::protobuf::int32 value) {
  set_has_nsort();
  nsort_ = value;
}

// optional string workTimeBegin = 6;
inline bool Collectconfig::has_worktimebegin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Collectconfig::set_has_worktimebegin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Collectconfig::clear_has_worktimebegin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Collectconfig::clear_worktimebegin() {
  if (worktimebegin_ != &::google::protobuf::internal::kEmptyString) {
    worktimebegin_->clear();
  }
  clear_has_worktimebegin();
}
inline const ::std::string& Collectconfig::worktimebegin() const {
  return *worktimebegin_;
}
inline void Collectconfig::set_worktimebegin(const ::std::string& value) {
  set_has_worktimebegin();
  if (worktimebegin_ == &::google::protobuf::internal::kEmptyString) {
    worktimebegin_ = new ::std::string;
  }
  worktimebegin_->assign(value);
}
inline void Collectconfig::set_worktimebegin(const char* value) {
  set_has_worktimebegin();
  if (worktimebegin_ == &::google::protobuf::internal::kEmptyString) {
    worktimebegin_ = new ::std::string;
  }
  worktimebegin_->assign(value);
}
inline void Collectconfig::set_worktimebegin(const char* value, size_t size) {
  set_has_worktimebegin();
  if (worktimebegin_ == &::google::protobuf::internal::kEmptyString) {
    worktimebegin_ = new ::std::string;
  }
  worktimebegin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Collectconfig::mutable_worktimebegin() {
  set_has_worktimebegin();
  if (worktimebegin_ == &::google::protobuf::internal::kEmptyString) {
    worktimebegin_ = new ::std::string;
  }
  return worktimebegin_;
}
inline ::std::string* Collectconfig::release_worktimebegin() {
  clear_has_worktimebegin();
  if (worktimebegin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = worktimebegin_;
    worktimebegin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string workTimeEnd = 7;
inline bool Collectconfig::has_worktimeend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Collectconfig::set_has_worktimeend() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Collectconfig::clear_has_worktimeend() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Collectconfig::clear_worktimeend() {
  if (worktimeend_ != &::google::protobuf::internal::kEmptyString) {
    worktimeend_->clear();
  }
  clear_has_worktimeend();
}
inline const ::std::string& Collectconfig::worktimeend() const {
  return *worktimeend_;
}
inline void Collectconfig::set_worktimeend(const ::std::string& value) {
  set_has_worktimeend();
  if (worktimeend_ == &::google::protobuf::internal::kEmptyString) {
    worktimeend_ = new ::std::string;
  }
  worktimeend_->assign(value);
}
inline void Collectconfig::set_worktimeend(const char* value) {
  set_has_worktimeend();
  if (worktimeend_ == &::google::protobuf::internal::kEmptyString) {
    worktimeend_ = new ::std::string;
  }
  worktimeend_->assign(value);
}
inline void Collectconfig::set_worktimeend(const char* value, size_t size) {
  set_has_worktimeend();
  if (worktimeend_ == &::google::protobuf::internal::kEmptyString) {
    worktimeend_ = new ::std::string;
  }
  worktimeend_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Collectconfig::mutable_worktimeend() {
  set_has_worktimeend();
  if (worktimeend_ == &::google::protobuf::internal::kEmptyString) {
    worktimeend_ = new ::std::string;
  }
  return worktimeend_;
}
inline ::std::string* Collectconfig::release_worktimeend() {
  clear_has_worktimeend();
  if (worktimeend_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = worktimeend_;
    worktimeend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string kmsIp = 8;
inline bool Collectconfig::has_kmsip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Collectconfig::set_has_kmsip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Collectconfig::clear_has_kmsip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Collectconfig::clear_kmsip() {
  if (kmsip_ != &::google::protobuf::internal::kEmptyString) {
    kmsip_->clear();
  }
  clear_has_kmsip();
}
inline const ::std::string& Collectconfig::kmsip() const {
  return *kmsip_;
}
inline void Collectconfig::set_kmsip(const ::std::string& value) {
  set_has_kmsip();
  if (kmsip_ == &::google::protobuf::internal::kEmptyString) {
    kmsip_ = new ::std::string;
  }
  kmsip_->assign(value);
}
inline void Collectconfig::set_kmsip(const char* value) {
  set_has_kmsip();
  if (kmsip_ == &::google::protobuf::internal::kEmptyString) {
    kmsip_ = new ::std::string;
  }
  kmsip_->assign(value);
}
inline void Collectconfig::set_kmsip(const char* value, size_t size) {
  set_has_kmsip();
  if (kmsip_ == &::google::protobuf::internal::kEmptyString) {
    kmsip_ = new ::std::string;
  }
  kmsip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Collectconfig::mutable_kmsip() {
  set_has_kmsip();
  if (kmsip_ == &::google::protobuf::internal::kEmptyString) {
    kmsip_ = new ::std::string;
  }
  return kmsip_;
}
inline ::std::string* Collectconfig::release_kmsip() {
  clear_has_kmsip();
  if (kmsip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = kmsip_;
    kmsip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReqCollectconfig

// optional int32 cmd = 1;
inline bool ReqCollectconfig::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCollectconfig::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCollectconfig::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCollectconfig::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 ReqCollectconfig::cmd() const {
  return cmd_;
}
inline void ReqCollectconfig::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 id = 2;
inline bool ReqCollectconfig::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqCollectconfig::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqCollectconfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqCollectconfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReqCollectconfig::id() const {
  return id_;
}
inline void ReqCollectconfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// RspCollectconfig

// optional int32 cmd = 1;
inline bool RspCollectconfig::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspCollectconfig::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspCollectconfig::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspCollectconfig::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 RspCollectconfig::cmd() const {
  return cmd_;
}
inline void RspCollectconfig::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional .cms_8120.Collectconfig collectconfig = 2;
inline bool RspCollectconfig::has_collectconfig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspCollectconfig::set_has_collectconfig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspCollectconfig::clear_has_collectconfig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspCollectconfig::clear_collectconfig() {
  if (collectconfig_ != NULL) collectconfig_->::cms_8120::Collectconfig::Clear();
  clear_has_collectconfig();
}
inline const ::cms_8120::Collectconfig& RspCollectconfig::collectconfig() const {
  return collectconfig_ != NULL ? *collectconfig_ : *default_instance_->collectconfig_;
}
inline ::cms_8120::Collectconfig* RspCollectconfig::mutable_collectconfig() {
  set_has_collectconfig();
  if (collectconfig_ == NULL) collectconfig_ = new ::cms_8120::Collectconfig;
  return collectconfig_;
}
inline ::cms_8120::Collectconfig* RspCollectconfig::release_collectconfig() {
  clear_has_collectconfig();
  ::cms_8120::Collectconfig* temp = collectconfig_;
  collectconfig_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_2fCollectconfig_2eproto__INCLUDED
