// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center/StorageConfig.proto

#ifndef PROTOBUF_center_2fStorageConfig_2eproto__INCLUDED
#define PROTOBUF_center_2fStorageConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "type/cmd.pb.h"
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_center_2fStorageConfig_2eproto();
void protobuf_AssignDesc_center_2fStorageConfig_2eproto();
void protobuf_ShutdownFile_center_2fStorageConfig_2eproto();

class ReqStorageConfig;
class RspStorageConfig;

// ===================================================================

class ReqStorageConfig : public ::google::protobuf::Message {
 public:
  ReqStorageConfig();
  virtual ~ReqStorageConfig();
  
  ReqStorageConfig(const ReqStorageConfig& from);
  
  inline ReqStorageConfig& operator=(const ReqStorageConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqStorageConfig& default_instance();
  
  void Swap(ReqStorageConfig* other);
  
  // implements Message ----------------------------------------------
  
  ReqStorageConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqStorageConfig& from);
  void MergeFrom(const ReqStorageConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cms_8120.ReqStorageConfig)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fStorageConfig_2eproto();
  friend void protobuf_AssignDesc_center_2fStorageConfig_2eproto();
  friend void protobuf_ShutdownFile_center_2fStorageConfig_2eproto();
  
  void InitAsDefaultInstance();
  static ReqStorageConfig* default_instance_;
};
// -------------------------------------------------------------------

class RspStorageConfig : public ::google::protobuf::Message {
 public:
  RspStorageConfig();
  virtual ~RspStorageConfig();
  
  RspStorageConfig(const RspStorageConfig& from);
  
  inline RspStorageConfig& operator=(const RspStorageConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspStorageConfig& default_instance();
  
  void Swap(RspStorageConfig* other);
  
  // implements Message ----------------------------------------------
  
  RspStorageConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspStorageConfig& from);
  void MergeFrom(const RspStorageConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string startTime = 4 [default = "1970-01-01 00:00:00"];
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  inline const ::std::string& starttime() const;
  inline void set_starttime(const ::std::string& value);
  inline void set_starttime(const char* value);
  inline void set_starttime(const char* value, size_t size);
  inline ::std::string* mutable_starttime();
  inline ::std::string* release_starttime();
  
  // optional string stopTime = 5 [default = "1970-01-01 00:00:00"];
  inline bool has_stoptime() const;
  inline void clear_stoptime();
  static const int kStopTimeFieldNumber = 5;
  inline const ::std::string& stoptime() const;
  inline void set_stoptime(const ::std::string& value);
  inline void set_stoptime(const char* value);
  inline void set_stoptime(const char* value, size_t size);
  inline ::std::string* mutable_stoptime();
  inline ::std::string* release_stoptime();
  
  // optional int32 devicetype = 6;
  inline bool has_devicetype() const;
  inline void clear_devicetype();
  static const int kDevicetypeFieldNumber = 6;
  inline ::google::protobuf::int32 devicetype() const;
  inline void set_devicetype(::google::protobuf::int32 value);
  
  // optional string storageIp = 7;
  inline bool has_storageip() const;
  inline void clear_storageip();
  static const int kStorageIpFieldNumber = 7;
  inline const ::std::string& storageip() const;
  inline void set_storageip(const ::std::string& value);
  inline void set_storageip(const char* value);
  inline void set_storageip(const char* value, size_t size);
  inline ::std::string* mutable_storageip();
  inline ::std::string* release_storageip();
  
  // optional int32 storagePort = 8;
  inline bool has_storageport() const;
  inline void clear_storageport();
  static const int kStoragePortFieldNumber = 8;
  inline ::google::protobuf::int32 storageport() const;
  inline void set_storageport(::google::protobuf::int32 value);
  
  // optional string storageUserName = 9;
  inline bool has_storageusername() const;
  inline void clear_storageusername();
  static const int kStorageUserNameFieldNumber = 9;
  inline const ::std::string& storageusername() const;
  inline void set_storageusername(const ::std::string& value);
  inline void set_storageusername(const char* value);
  inline void set_storageusername(const char* value, size_t size);
  inline ::std::string* mutable_storageusername();
  inline ::std::string* release_storageusername();
  
  // optional string storagePwd = 10;
  inline bool has_storagepwd() const;
  inline void clear_storagepwd();
  static const int kStoragePwdFieldNumber = 10;
  inline const ::std::string& storagepwd() const;
  inline void set_storagepwd(const ::std::string& value);
  inline void set_storagepwd(const char* value);
  inline void set_storagepwd(const char* value, size_t size);
  inline ::std::string* mutable_storagepwd();
  inline ::std::string* release_storagepwd();
  
  // optional int32 poolid = 11;
  inline bool has_poolid() const;
  inline void clear_poolid();
  static const int kPoolidFieldNumber = 11;
  inline ::google::protobuf::int32 poolid() const;
  inline void set_poolid(::google::protobuf::int32 value);
  
  // optional string device_code = 12;
  inline bool has_device_code() const;
  inline void clear_device_code();
  static const int kDeviceCodeFieldNumber = 12;
  inline const ::std::string& device_code() const;
  inline void set_device_code(const ::std::string& value);
  inline void set_device_code(const char* value);
  inline void set_device_code(const char* value, size_t size);
  inline ::std::string* mutable_device_code();
  inline ::std::string* release_device_code();
  
  // @@protoc_insertion_point(class_scope:cms_8120.RspStorageConfig)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_stoptime();
  inline void clear_has_stoptime();
  inline void set_has_devicetype();
  inline void clear_has_devicetype();
  inline void set_has_storageip();
  inline void clear_has_storageip();
  inline void set_has_storageport();
  inline void clear_has_storageport();
  inline void set_has_storageusername();
  inline void clear_has_storageusername();
  inline void set_has_storagepwd();
  inline void clear_has_storagepwd();
  inline void set_has_poolid();
  inline void clear_has_poolid();
  inline void set_has_device_code();
  inline void clear_has_device_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 result_;
  ::std::string* starttime_;
  static const ::std::string _default_starttime_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 devicetype_;
  ::std::string* stoptime_;
  static const ::std::string _default_stoptime_;
  ::std::string* storageip_;
  ::std::string* storageusername_;
  ::google::protobuf::int32 storageport_;
  ::google::protobuf::int32 poolid_;
  ::std::string* storagepwd_;
  ::std::string* device_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fStorageConfig_2eproto();
  friend void protobuf_AssignDesc_center_2fStorageConfig_2eproto();
  friend void protobuf_ShutdownFile_center_2fStorageConfig_2eproto();
  
  void InitAsDefaultInstance();
  static RspStorageConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqStorageConfig

// optional int32 cmd = 1;
inline bool ReqStorageConfig::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqStorageConfig::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqStorageConfig::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqStorageConfig::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 ReqStorageConfig::cmd() const {
  return cmd_;
}
inline void ReqStorageConfig::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional string ip = 2;
inline bool ReqStorageConfig::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqStorageConfig::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqStorageConfig::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqStorageConfig::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ReqStorageConfig::ip() const {
  return *ip_;
}
inline void ReqStorageConfig::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ReqStorageConfig::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ReqStorageConfig::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqStorageConfig::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ReqStorageConfig::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 port = 3;
inline bool ReqStorageConfig::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqStorageConfig::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqStorageConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqStorageConfig::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ReqStorageConfig::port() const {
  return port_;
}
inline void ReqStorageConfig::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// RspStorageConfig

// optional int32 cmd = 1;
inline bool RspStorageConfig::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspStorageConfig::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspStorageConfig::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspStorageConfig::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 RspStorageConfig::cmd() const {
  return cmd_;
}
inline void RspStorageConfig::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 result = 2;
inline bool RspStorageConfig::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspStorageConfig::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspStorageConfig::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspStorageConfig::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RspStorageConfig::result() const {
  return result_;
}
inline void RspStorageConfig::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 type = 3;
inline bool RspStorageConfig::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspStorageConfig::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspStorageConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspStorageConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RspStorageConfig::type() const {
  return type_;
}
inline void RspStorageConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string startTime = 4 [default = "1970-01-01 00:00:00"];
inline bool RspStorageConfig::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RspStorageConfig::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RspStorageConfig::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RspStorageConfig::clear_starttime() {
  if (starttime_ != &_default_starttime_) {
    starttime_->assign(_default_starttime_);
  }
  clear_has_starttime();
}
inline const ::std::string& RspStorageConfig::starttime() const {
  return *starttime_;
}
inline void RspStorageConfig::set_starttime(const ::std::string& value) {
  set_has_starttime();
  if (starttime_ == &_default_starttime_) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void RspStorageConfig::set_starttime(const char* value) {
  set_has_starttime();
  if (starttime_ == &_default_starttime_) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void RspStorageConfig::set_starttime(const char* value, size_t size) {
  set_has_starttime();
  if (starttime_ == &_default_starttime_) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspStorageConfig::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == &_default_starttime_) {
    starttime_ = new ::std::string(_default_starttime_);
  }
  return starttime_;
}
inline ::std::string* RspStorageConfig::release_starttime() {
  clear_has_starttime();
  if (starttime_ == &_default_starttime_) {
    return NULL;
  } else {
    ::std::string* temp = starttime_;
    starttime_ = const_cast< ::std::string*>(&_default_starttime_);
    return temp;
  }
}

// optional string stopTime = 5 [default = "1970-01-01 00:00:00"];
inline bool RspStorageConfig::has_stoptime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RspStorageConfig::set_has_stoptime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RspStorageConfig::clear_has_stoptime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RspStorageConfig::clear_stoptime() {
  if (stoptime_ != &_default_stoptime_) {
    stoptime_->assign(_default_stoptime_);
  }
  clear_has_stoptime();
}
inline const ::std::string& RspStorageConfig::stoptime() const {
  return *stoptime_;
}
inline void RspStorageConfig::set_stoptime(const ::std::string& value) {
  set_has_stoptime();
  if (stoptime_ == &_default_stoptime_) {
    stoptime_ = new ::std::string;
  }
  stoptime_->assign(value);
}
inline void RspStorageConfig::set_stoptime(const char* value) {
  set_has_stoptime();
  if (stoptime_ == &_default_stoptime_) {
    stoptime_ = new ::std::string;
  }
  stoptime_->assign(value);
}
inline void RspStorageConfig::set_stoptime(const char* value, size_t size) {
  set_has_stoptime();
  if (stoptime_ == &_default_stoptime_) {
    stoptime_ = new ::std::string;
  }
  stoptime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspStorageConfig::mutable_stoptime() {
  set_has_stoptime();
  if (stoptime_ == &_default_stoptime_) {
    stoptime_ = new ::std::string(_default_stoptime_);
  }
  return stoptime_;
}
inline ::std::string* RspStorageConfig::release_stoptime() {
  clear_has_stoptime();
  if (stoptime_ == &_default_stoptime_) {
    return NULL;
  } else {
    ::std::string* temp = stoptime_;
    stoptime_ = const_cast< ::std::string*>(&_default_stoptime_);
    return temp;
  }
}

// optional int32 devicetype = 6;
inline bool RspStorageConfig::has_devicetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RspStorageConfig::set_has_devicetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RspStorageConfig::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RspStorageConfig::clear_devicetype() {
  devicetype_ = 0;
  clear_has_devicetype();
}
inline ::google::protobuf::int32 RspStorageConfig::devicetype() const {
  return devicetype_;
}
inline void RspStorageConfig::set_devicetype(::google::protobuf::int32 value) {
  set_has_devicetype();
  devicetype_ = value;
}

// optional string storageIp = 7;
inline bool RspStorageConfig::has_storageip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RspStorageConfig::set_has_storageip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RspStorageConfig::clear_has_storageip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RspStorageConfig::clear_storageip() {
  if (storageip_ != &::google::protobuf::internal::kEmptyString) {
    storageip_->clear();
  }
  clear_has_storageip();
}
inline const ::std::string& RspStorageConfig::storageip() const {
  return *storageip_;
}
inline void RspStorageConfig::set_storageip(const ::std::string& value) {
  set_has_storageip();
  if (storageip_ == &::google::protobuf::internal::kEmptyString) {
    storageip_ = new ::std::string;
  }
  storageip_->assign(value);
}
inline void RspStorageConfig::set_storageip(const char* value) {
  set_has_storageip();
  if (storageip_ == &::google::protobuf::internal::kEmptyString) {
    storageip_ = new ::std::string;
  }
  storageip_->assign(value);
}
inline void RspStorageConfig::set_storageip(const char* value, size_t size) {
  set_has_storageip();
  if (storageip_ == &::google::protobuf::internal::kEmptyString) {
    storageip_ = new ::std::string;
  }
  storageip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspStorageConfig::mutable_storageip() {
  set_has_storageip();
  if (storageip_ == &::google::protobuf::internal::kEmptyString) {
    storageip_ = new ::std::string;
  }
  return storageip_;
}
inline ::std::string* RspStorageConfig::release_storageip() {
  clear_has_storageip();
  if (storageip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = storageip_;
    storageip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 storagePort = 8;
inline bool RspStorageConfig::has_storageport() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RspStorageConfig::set_has_storageport() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RspStorageConfig::clear_has_storageport() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RspStorageConfig::clear_storageport() {
  storageport_ = 0;
  clear_has_storageport();
}
inline ::google::protobuf::int32 RspStorageConfig::storageport() const {
  return storageport_;
}
inline void RspStorageConfig::set_storageport(::google::protobuf::int32 value) {
  set_has_storageport();
  storageport_ = value;
}

// optional string storageUserName = 9;
inline bool RspStorageConfig::has_storageusername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RspStorageConfig::set_has_storageusername() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RspStorageConfig::clear_has_storageusername() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RspStorageConfig::clear_storageusername() {
  if (storageusername_ != &::google::protobuf::internal::kEmptyString) {
    storageusername_->clear();
  }
  clear_has_storageusername();
}
inline const ::std::string& RspStorageConfig::storageusername() const {
  return *storageusername_;
}
inline void RspStorageConfig::set_storageusername(const ::std::string& value) {
  set_has_storageusername();
  if (storageusername_ == &::google::protobuf::internal::kEmptyString) {
    storageusername_ = new ::std::string;
  }
  storageusername_->assign(value);
}
inline void RspStorageConfig::set_storageusername(const char* value) {
  set_has_storageusername();
  if (storageusername_ == &::google::protobuf::internal::kEmptyString) {
    storageusername_ = new ::std::string;
  }
  storageusername_->assign(value);
}
inline void RspStorageConfig::set_storageusername(const char* value, size_t size) {
  set_has_storageusername();
  if (storageusername_ == &::google::protobuf::internal::kEmptyString) {
    storageusername_ = new ::std::string;
  }
  storageusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspStorageConfig::mutable_storageusername() {
  set_has_storageusername();
  if (storageusername_ == &::google::protobuf::internal::kEmptyString) {
    storageusername_ = new ::std::string;
  }
  return storageusername_;
}
inline ::std::string* RspStorageConfig::release_storageusername() {
  clear_has_storageusername();
  if (storageusername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = storageusername_;
    storageusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string storagePwd = 10;
inline bool RspStorageConfig::has_storagepwd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RspStorageConfig::set_has_storagepwd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RspStorageConfig::clear_has_storagepwd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RspStorageConfig::clear_storagepwd() {
  if (storagepwd_ != &::google::protobuf::internal::kEmptyString) {
    storagepwd_->clear();
  }
  clear_has_storagepwd();
}
inline const ::std::string& RspStorageConfig::storagepwd() const {
  return *storagepwd_;
}
inline void RspStorageConfig::set_storagepwd(const ::std::string& value) {
  set_has_storagepwd();
  if (storagepwd_ == &::google::protobuf::internal::kEmptyString) {
    storagepwd_ = new ::std::string;
  }
  storagepwd_->assign(value);
}
inline void RspStorageConfig::set_storagepwd(const char* value) {
  set_has_storagepwd();
  if (storagepwd_ == &::google::protobuf::internal::kEmptyString) {
    storagepwd_ = new ::std::string;
  }
  storagepwd_->assign(value);
}
inline void RspStorageConfig::set_storagepwd(const char* value, size_t size) {
  set_has_storagepwd();
  if (storagepwd_ == &::google::protobuf::internal::kEmptyString) {
    storagepwd_ = new ::std::string;
  }
  storagepwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspStorageConfig::mutable_storagepwd() {
  set_has_storagepwd();
  if (storagepwd_ == &::google::protobuf::internal::kEmptyString) {
    storagepwd_ = new ::std::string;
  }
  return storagepwd_;
}
inline ::std::string* RspStorageConfig::release_storagepwd() {
  clear_has_storagepwd();
  if (storagepwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = storagepwd_;
    storagepwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 poolid = 11;
inline bool RspStorageConfig::has_poolid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RspStorageConfig::set_has_poolid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RspStorageConfig::clear_has_poolid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RspStorageConfig::clear_poolid() {
  poolid_ = 0;
  clear_has_poolid();
}
inline ::google::protobuf::int32 RspStorageConfig::poolid() const {
  return poolid_;
}
inline void RspStorageConfig::set_poolid(::google::protobuf::int32 value) {
  set_has_poolid();
  poolid_ = value;
}

// optional string device_code = 12;
inline bool RspStorageConfig::has_device_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RspStorageConfig::set_has_device_code() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RspStorageConfig::clear_has_device_code() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RspStorageConfig::clear_device_code() {
  if (device_code_ != &::google::protobuf::internal::kEmptyString) {
    device_code_->clear();
  }
  clear_has_device_code();
}
inline const ::std::string& RspStorageConfig::device_code() const {
  return *device_code_;
}
inline void RspStorageConfig::set_device_code(const ::std::string& value) {
  set_has_device_code();
  if (device_code_ == &::google::protobuf::internal::kEmptyString) {
    device_code_ = new ::std::string;
  }
  device_code_->assign(value);
}
inline void RspStorageConfig::set_device_code(const char* value) {
  set_has_device_code();
  if (device_code_ == &::google::protobuf::internal::kEmptyString) {
    device_code_ = new ::std::string;
  }
  device_code_->assign(value);
}
inline void RspStorageConfig::set_device_code(const char* value, size_t size) {
  set_has_device_code();
  if (device_code_ == &::google::protobuf::internal::kEmptyString) {
    device_code_ = new ::std::string;
  }
  device_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RspStorageConfig::mutable_device_code() {
  set_has_device_code();
  if (device_code_ == &::google::protobuf::internal::kEmptyString) {
    device_code_ = new ::std::string;
  }
  return device_code_;
}
inline ::std::string* RspStorageConfig::release_device_code() {
  clear_has_device_code();
  if (device_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_code_;
    device_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_2fStorageConfig_2eproto__INCLUDED
