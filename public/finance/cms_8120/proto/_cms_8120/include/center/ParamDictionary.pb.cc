// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center/ParamDictionary.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* ParamDictionary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamDictionary_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqParamDictionary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqParamDictionary_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParamDictionaryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamDictionaryList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_2fParamDictionary_2eproto() {
  protobuf_AddDesc_center_2fParamDictionary_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center/ParamDictionary.proto");
  GOOGLE_CHECK(file != NULL);
  ParamDictionary_descriptor_ = file->message_type(0);
  static const int ParamDictionary_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamDictionary, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamDictionary, strcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamDictionary, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamDictionary, nsortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamDictionary, nenable_),
  };
  ParamDictionary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParamDictionary_descriptor_,
      ParamDictionary::default_instance_,
      ParamDictionary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamDictionary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamDictionary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParamDictionary));
  ReqParamDictionary_descriptor_ = file->message_type(1);
  static const int ReqParamDictionary_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqParamDictionary, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqParamDictionary, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqParamDictionary, strcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqParamDictionary, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqParamDictionary, nsortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqParamDictionary, nenable_),
  };
  ReqParamDictionary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqParamDictionary_descriptor_,
      ReqParamDictionary::default_instance_,
      ReqParamDictionary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqParamDictionary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqParamDictionary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqParamDictionary));
  ParamDictionaryList_descriptor_ = file->message_type(2);
  static const int ParamDictionaryList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamDictionaryList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamDictionaryList, paramdictionary_),
  };
  ParamDictionaryList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParamDictionaryList_descriptor_,
      ParamDictionaryList::default_instance_,
      ParamDictionaryList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamDictionaryList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamDictionaryList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParamDictionaryList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_2fParamDictionary_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParamDictionary_descriptor_, &ParamDictionary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqParamDictionary_descriptor_, &ReqParamDictionary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParamDictionaryList_descriptor_, &ParamDictionaryList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_2fParamDictionary_2eproto() {
  delete ParamDictionary::default_instance_;
  delete ParamDictionary_reflection_;
  delete ReqParamDictionary::default_instance_;
  delete ReqParamDictionary_reflection_;
  delete ParamDictionaryList::default_instance_;
  delete ParamDictionaryList_reflection_;
}

void protobuf_AddDesc_center_2fParamDictionary_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_type_2fcmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034center/ParamDictionary.proto\022\010cms_8120"
    "\032\016type/cmd.proto\"a\n\017ParamDictionary\022\n\n\002i"
    "d\030\001 \001(\005\022\017\n\007strCode\030\002 \001(\t\022\017\n\007strName\030\003 \001("
    "\t\022\017\n\007nSortId\030\004 \001(\005\022\017\n\007nEnable\030\005 \001(\005\"q\n\022R"
    "eqParamDictionary\022\013\n\003cmd\030\001 \001(\005\022\n\n\002id\030\002 \001"
    "(\005\022\017\n\007strCode\030\003 \001(\t\022\017\n\007strName\030\004 \001(\t\022\017\n\007"
    "nSortId\030\005 \001(\005\022\017\n\007nEnable\030\006 \001(\005\"V\n\023ParamD"
    "ictionaryList\022\013\n\003cmd\030\001 \001(\005\0222\n\017paramDicti"
    "onary\030\002 \003(\0132\031.cms_8120.ParamDictionary2~"
    "\n ModifyParamDictionaryListService\022Z\n\033Qu"
    "eryAllParamDictionaryInfo\022\034.cms_8120.Req"
    "ParamDictionary\032\035.cms_8120.ParamDictiona"
    "ryListBC\n(com.hikvision.finance.fms.cms."
    "hpp.centerB\024ParamDictionaryProto\210\001\001", 555);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center/ParamDictionary.proto", &protobuf_RegisterTypes);
  ParamDictionary::default_instance_ = new ParamDictionary();
  ReqParamDictionary::default_instance_ = new ReqParamDictionary();
  ParamDictionaryList::default_instance_ = new ParamDictionaryList();
  ParamDictionary::default_instance_->InitAsDefaultInstance();
  ReqParamDictionary::default_instance_->InitAsDefaultInstance();
  ParamDictionaryList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_2fParamDictionary_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_2fParamDictionary_2eproto {
  StaticDescriptorInitializer_center_2fParamDictionary_2eproto() {
    protobuf_AddDesc_center_2fParamDictionary_2eproto();
  }
} static_descriptor_initializer_center_2fParamDictionary_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ParamDictionary::kIdFieldNumber;
const int ParamDictionary::kStrCodeFieldNumber;
const int ParamDictionary::kStrNameFieldNumber;
const int ParamDictionary::kNSortIdFieldNumber;
const int ParamDictionary::kNEnableFieldNumber;
#endif  // !_MSC_VER

ParamDictionary::ParamDictionary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParamDictionary::InitAsDefaultInstance() {
}

ParamDictionary::ParamDictionary(const ParamDictionary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParamDictionary::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  strcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nsortid_ = 0;
  nenable_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParamDictionary::~ParamDictionary() {
  SharedDtor();
}

void ParamDictionary::SharedDtor() {
  if (strcode_ != &::google::protobuf::internal::kEmptyString) {
    delete strcode_;
  }
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void ParamDictionary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamDictionary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamDictionary_descriptor_;
}

const ParamDictionary& ParamDictionary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fParamDictionary_2eproto();  return *default_instance_;
}

ParamDictionary* ParamDictionary::default_instance_ = NULL;

ParamDictionary* ParamDictionary::New() const {
  return new ParamDictionary;
}

void ParamDictionary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_strcode()) {
      if (strcode_ != &::google::protobuf::internal::kEmptyString) {
        strcode_->clear();
      }
    }
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    nsortid_ = 0;
    nenable_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParamDictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strCode;
        break;
      }
      
      // optional string strCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcode().data(), this->strcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strName;
        break;
      }
      
      // optional string strName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nSortId;
        break;
      }
      
      // optional int32 nSortId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsortid_)));
          set_has_nsortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nEnable;
        break;
      }
      
      // optional int32 nEnable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nenable_)));
          set_has_nenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParamDictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string strCode = 2;
  if (has_strcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcode().data(), this->strcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strcode(), output);
  }
  
  // optional string strName = 3;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strname(), output);
  }
  
  // optional int32 nSortId = 4;
  if (has_nsortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nsortid(), output);
  }
  
  // optional int32 nEnable = 5;
  if (has_nenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nenable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParamDictionary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string strCode = 2;
  if (has_strcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcode().data(), this->strcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strcode(), target);
  }
  
  // optional string strName = 3;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strname(), target);
  }
  
  // optional int32 nSortId = 4;
  if (has_nsortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nsortid(), target);
  }
  
  // optional int32 nEnable = 5;
  if (has_nenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nenable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParamDictionary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string strCode = 2;
    if (has_strcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcode());
    }
    
    // optional string strName = 3;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }
    
    // optional int32 nSortId = 4;
    if (has_nsortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsortid());
    }
    
    // optional int32 nEnable = 5;
    if (has_nenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nenable());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamDictionary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParamDictionary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParamDictionary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParamDictionary::MergeFrom(const ParamDictionary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_strcode()) {
      set_strcode(from.strcode());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_nsortid()) {
      set_nsortid(from.nsortid());
    }
    if (from.has_nenable()) {
      set_nenable(from.nenable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParamDictionary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamDictionary::CopyFrom(const ParamDictionary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamDictionary::IsInitialized() const {
  
  return true;
}

void ParamDictionary::Swap(ParamDictionary* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(strcode_, other->strcode_);
    std::swap(strname_, other->strname_);
    std::swap(nsortid_, other->nsortid_);
    std::swap(nenable_, other->nenable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParamDictionary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamDictionary_descriptor_;
  metadata.reflection = ParamDictionary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqParamDictionary::kCmdFieldNumber;
const int ReqParamDictionary::kIdFieldNumber;
const int ReqParamDictionary::kStrCodeFieldNumber;
const int ReqParamDictionary::kStrNameFieldNumber;
const int ReqParamDictionary::kNSortIdFieldNumber;
const int ReqParamDictionary::kNEnableFieldNumber;
#endif  // !_MSC_VER

ReqParamDictionary::ReqParamDictionary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqParamDictionary::InitAsDefaultInstance() {
}

ReqParamDictionary::ReqParamDictionary(const ReqParamDictionary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqParamDictionary::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  id_ = 0;
  strcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nsortid_ = 0;
  nenable_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqParamDictionary::~ReqParamDictionary() {
  SharedDtor();
}

void ReqParamDictionary::SharedDtor() {
  if (strcode_ != &::google::protobuf::internal::kEmptyString) {
    delete strcode_;
  }
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void ReqParamDictionary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqParamDictionary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqParamDictionary_descriptor_;
}

const ReqParamDictionary& ReqParamDictionary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fParamDictionary_2eproto();  return *default_instance_;
}

ReqParamDictionary* ReqParamDictionary::default_instance_ = NULL;

ReqParamDictionary* ReqParamDictionary::New() const {
  return new ReqParamDictionary;
}

void ReqParamDictionary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    id_ = 0;
    if (has_strcode()) {
      if (strcode_ != &::google::protobuf::internal::kEmptyString) {
        strcode_->clear();
      }
    }
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    nsortid_ = 0;
    nenable_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqParamDictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strCode;
        break;
      }
      
      // optional string strCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcode().data(), this->strcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strName;
        break;
      }
      
      // optional string strName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nSortId;
        break;
      }
      
      // optional int32 nSortId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsortid_)));
          set_has_nsortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nEnable;
        break;
      }
      
      // optional int32 nEnable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nenable_)));
          set_has_nenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqParamDictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional string strCode = 3;
  if (has_strcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcode().data(), this->strcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strcode(), output);
  }
  
  // optional string strName = 4;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strname(), output);
  }
  
  // optional int32 nSortId = 5;
  if (has_nsortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nsortid(), output);
  }
  
  // optional int32 nEnable = 6;
  if (has_nenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nenable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqParamDictionary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional string strCode = 3;
  if (has_strcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcode().data(), this->strcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strcode(), target);
  }
  
  // optional string strName = 4;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strname(), target);
  }
  
  // optional int32 nSortId = 5;
  if (has_nsortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nsortid(), target);
  }
  
  // optional int32 nEnable = 6;
  if (has_nenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nenable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqParamDictionary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string strCode = 3;
    if (has_strcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcode());
    }
    
    // optional string strName = 4;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }
    
    // optional int32 nSortId = 5;
    if (has_nsortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsortid());
    }
    
    // optional int32 nEnable = 6;
    if (has_nenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nenable());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqParamDictionary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqParamDictionary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqParamDictionary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqParamDictionary::MergeFrom(const ReqParamDictionary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_strcode()) {
      set_strcode(from.strcode());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_nsortid()) {
      set_nsortid(from.nsortid());
    }
    if (from.has_nenable()) {
      set_nenable(from.nenable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqParamDictionary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqParamDictionary::CopyFrom(const ReqParamDictionary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqParamDictionary::IsInitialized() const {
  
  return true;
}

void ReqParamDictionary::Swap(ReqParamDictionary* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(id_, other->id_);
    std::swap(strcode_, other->strcode_);
    std::swap(strname_, other->strname_);
    std::swap(nsortid_, other->nsortid_);
    std::swap(nenable_, other->nenable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqParamDictionary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqParamDictionary_descriptor_;
  metadata.reflection = ReqParamDictionary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParamDictionaryList::kCmdFieldNumber;
const int ParamDictionaryList::kParamDictionaryFieldNumber;
#endif  // !_MSC_VER

ParamDictionaryList::ParamDictionaryList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParamDictionaryList::InitAsDefaultInstance() {
}

ParamDictionaryList::ParamDictionaryList(const ParamDictionaryList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParamDictionaryList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParamDictionaryList::~ParamDictionaryList() {
  SharedDtor();
}

void ParamDictionaryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParamDictionaryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamDictionaryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamDictionaryList_descriptor_;
}

const ParamDictionaryList& ParamDictionaryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fParamDictionary_2eproto();  return *default_instance_;
}

ParamDictionaryList* ParamDictionaryList::default_instance_ = NULL;

ParamDictionaryList* ParamDictionaryList::New() const {
  return new ParamDictionaryList;
}

void ParamDictionaryList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  paramdictionary_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParamDictionaryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paramDictionary;
        break;
      }
      
      // repeated .cms_8120.ParamDictionary paramDictionary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramDictionary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paramdictionary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paramDictionary;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParamDictionaryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // repeated .cms_8120.ParamDictionary paramDictionary = 2;
  for (int i = 0; i < this->paramdictionary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->paramdictionary(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParamDictionaryList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // repeated .cms_8120.ParamDictionary paramDictionary = 2;
  for (int i = 0; i < this->paramdictionary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->paramdictionary(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParamDictionaryList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
  }
  // repeated .cms_8120.ParamDictionary paramDictionary = 2;
  total_size += 1 * this->paramdictionary_size();
  for (int i = 0; i < this->paramdictionary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paramdictionary(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamDictionaryList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParamDictionaryList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParamDictionaryList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParamDictionaryList::MergeFrom(const ParamDictionaryList& from) {
  GOOGLE_CHECK_NE(&from, this);
  paramdictionary_.MergeFrom(from.paramdictionary_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParamDictionaryList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamDictionaryList::CopyFrom(const ParamDictionaryList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamDictionaryList::IsInitialized() const {
  
  return true;
}

void ParamDictionaryList::Swap(ParamDictionaryList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    paramdictionary_.Swap(&other->paramdictionary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParamDictionaryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamDictionaryList_descriptor_;
  metadata.reflection = ParamDictionaryList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
