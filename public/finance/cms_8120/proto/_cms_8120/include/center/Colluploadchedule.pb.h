// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center/Colluploadchedule.proto

#ifndef PROTOBUF_center_2fColluploadchedule_2eproto__INCLUDED
#define PROTOBUF_center_2fColluploadchedule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_center_2fColluploadchedule_2eproto();
void protobuf_AssignDesc_center_2fColluploadchedule_2eproto();
void protobuf_ShutdownFile_center_2fColluploadchedule_2eproto();

class Colluploadschedule;

// ===================================================================

class Colluploadschedule : public ::google::protobuf::Message {
 public:
  Colluploadschedule();
  virtual ~Colluploadschedule();
  
  Colluploadschedule(const Colluploadschedule& from);
  
  inline Colluploadschedule& operator=(const Colluploadschedule& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Colluploadschedule& default_instance();
  
  void Swap(Colluploadschedule* other);
  
  // implements Message ----------------------------------------------
  
  Colluploadschedule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Colluploadschedule& from);
  void MergeFrom(const Colluploadschedule& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 CollId = 2;
  inline bool has_collid() const;
  inline void clear_collid();
  static const int kCollIdFieldNumber = 2;
  inline ::google::protobuf::int32 collid() const;
  inline void set_collid(::google::protobuf::int32 value);
  
  // optional string stime = 3;
  inline bool has_stime() const;
  inline void clear_stime();
  static const int kStimeFieldNumber = 3;
  inline const ::std::string& stime() const;
  inline void set_stime(const ::std::string& value);
  inline void set_stime(const char* value);
  inline void set_stime(const char* value, size_t size);
  inline ::std::string* mutable_stime();
  inline ::std::string* release_stime();
  
  // optional string etime = 4;
  inline bool has_etime() const;
  inline void clear_etime();
  static const int kEtimeFieldNumber = 4;
  inline const ::std::string& etime() const;
  inline void set_etime(const ::std::string& value);
  inline void set_etime(const char* value);
  inline void set_etime(const char* value, size_t size);
  inline ::std::string* mutable_etime();
  inline ::std::string* release_etime();
  
  // @@protoc_insertion_point(class_scope:cms_8120.Colluploadschedule)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_collid();
  inline void clear_has_collid();
  inline void set_has_stime();
  inline void clear_has_stime();
  inline void set_has_etime();
  inline void clear_has_etime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 collid_;
  ::std::string* stime_;
  ::std::string* etime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fColluploadchedule_2eproto();
  friend void protobuf_AssignDesc_center_2fColluploadchedule_2eproto();
  friend void protobuf_ShutdownFile_center_2fColluploadchedule_2eproto();
  
  void InitAsDefaultInstance();
  static Colluploadschedule* default_instance_;
};
// ===================================================================


// ===================================================================

// Colluploadschedule

// optional int32 id = 1;
inline bool Colluploadschedule::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Colluploadschedule::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Colluploadschedule::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Colluploadschedule::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Colluploadschedule::id() const {
  return id_;
}
inline void Colluploadschedule::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 CollId = 2;
inline bool Colluploadschedule::has_collid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Colluploadschedule::set_has_collid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Colluploadschedule::clear_has_collid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Colluploadschedule::clear_collid() {
  collid_ = 0;
  clear_has_collid();
}
inline ::google::protobuf::int32 Colluploadschedule::collid() const {
  return collid_;
}
inline void Colluploadschedule::set_collid(::google::protobuf::int32 value) {
  set_has_collid();
  collid_ = value;
}

// optional string stime = 3;
inline bool Colluploadschedule::has_stime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Colluploadschedule::set_has_stime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Colluploadschedule::clear_has_stime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Colluploadschedule::clear_stime() {
  if (stime_ != &::google::protobuf::internal::kEmptyString) {
    stime_->clear();
  }
  clear_has_stime();
}
inline const ::std::string& Colluploadschedule::stime() const {
  return *stime_;
}
inline void Colluploadschedule::set_stime(const ::std::string& value) {
  set_has_stime();
  if (stime_ == &::google::protobuf::internal::kEmptyString) {
    stime_ = new ::std::string;
  }
  stime_->assign(value);
}
inline void Colluploadschedule::set_stime(const char* value) {
  set_has_stime();
  if (stime_ == &::google::protobuf::internal::kEmptyString) {
    stime_ = new ::std::string;
  }
  stime_->assign(value);
}
inline void Colluploadschedule::set_stime(const char* value, size_t size) {
  set_has_stime();
  if (stime_ == &::google::protobuf::internal::kEmptyString) {
    stime_ = new ::std::string;
  }
  stime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Colluploadschedule::mutable_stime() {
  set_has_stime();
  if (stime_ == &::google::protobuf::internal::kEmptyString) {
    stime_ = new ::std::string;
  }
  return stime_;
}
inline ::std::string* Colluploadschedule::release_stime() {
  clear_has_stime();
  if (stime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stime_;
    stime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string etime = 4;
inline bool Colluploadschedule::has_etime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Colluploadschedule::set_has_etime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Colluploadschedule::clear_has_etime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Colluploadschedule::clear_etime() {
  if (etime_ != &::google::protobuf::internal::kEmptyString) {
    etime_->clear();
  }
  clear_has_etime();
}
inline const ::std::string& Colluploadschedule::etime() const {
  return *etime_;
}
inline void Colluploadschedule::set_etime(const ::std::string& value) {
  set_has_etime();
  if (etime_ == &::google::protobuf::internal::kEmptyString) {
    etime_ = new ::std::string;
  }
  etime_->assign(value);
}
inline void Colluploadschedule::set_etime(const char* value) {
  set_has_etime();
  if (etime_ == &::google::protobuf::internal::kEmptyString) {
    etime_ = new ::std::string;
  }
  etime_->assign(value);
}
inline void Colluploadschedule::set_etime(const char* value, size_t size) {
  set_has_etime();
  if (etime_ == &::google::protobuf::internal::kEmptyString) {
    etime_ = new ::std::string;
  }
  etime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Colluploadschedule::mutable_etime() {
  set_has_etime();
  if (etime_ == &::google::protobuf::internal::kEmptyString) {
    etime_ = new ::std::string;
  }
  return etime_;
}
inline ::std::string* Colluploadschedule::release_etime() {
  clear_has_etime();
  if (etime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = etime_;
    etime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_2fColluploadchedule_2eproto__INCLUDED
