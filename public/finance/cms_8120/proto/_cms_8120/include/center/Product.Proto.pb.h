// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center/Product.Proto

#ifndef PROTOBUF_center_2fProduct_2eProto__INCLUDED
#define PROTOBUF_center_2fProduct_2eProto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "type/cmd.pb.h"
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_center_2fProduct_2eProto();
void protobuf_AssignDesc_center_2fProduct_2eProto();
void protobuf_ShutdownFile_center_2fProduct_2eProto();

class Product;
class ReqProduct;
class ProductList;

// ===================================================================

class Product : public ::google::protobuf::Message {
 public:
  Product();
  virtual ~Product();
  
  Product(const Product& from);
  
  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Product& default_instance();
  
  void Swap(Product* other);
  
  // implements Message ----------------------------------------------
  
  Product* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Product& from);
  void MergeFrom(const Product& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 nParentId = 2;
  inline bool has_nparentid() const;
  inline void clear_nparentid();
  static const int kNParentIdFieldNumber = 2;
  inline ::google::protobuf::int32 nparentid() const;
  inline void set_nparentid(::google::protobuf::int32 value);
  
  // optional string strName = 3;
  inline bool has_strname() const;
  inline void clear_strname();
  static const int kStrNameFieldNumber = 3;
  inline const ::std::string& strname() const;
  inline void set_strname(const ::std::string& value);
  inline void set_strname(const char* value);
  inline void set_strname(const char* value, size_t size);
  inline ::std::string* mutable_strname();
  inline ::std::string* release_strname();
  
  // optional string strCode = 4;
  inline bool has_strcode() const;
  inline void clear_strcode();
  static const int kStrCodeFieldNumber = 4;
  inline const ::std::string& strcode() const;
  inline void set_strcode(const ::std::string& value);
  inline void set_strcode(const char* value);
  inline void set_strcode(const char* value, size_t size);
  inline ::std::string* mutable_strcode();
  inline ::std::string* release_strcode();
  
  // optional string strEndDate = 5;
  inline bool has_strenddate() const;
  inline void clear_strenddate();
  static const int kStrEndDateFieldNumber = 5;
  inline const ::std::string& strenddate() const;
  inline void set_strenddate(const ::std::string& value);
  inline void set_strenddate(const char* value);
  inline void set_strenddate(const char* value, size_t size);
  inline ::std::string* mutable_strenddate();
  inline ::std::string* release_strenddate();
  
  // optional int32 guaranteeType = 6;
  inline bool has_guaranteetype() const;
  inline void clear_guaranteetype();
  static const int kGuaranteeTypeFieldNumber = 6;
  inline ::google::protobuf::int32 guaranteetype() const;
  inline void set_guaranteetype(::google::protobuf::int32 value);
  
  // optional int32 guaranteeYears = 7;
  inline bool has_guaranteeyears() const;
  inline void clear_guaranteeyears();
  static const int kGuaranteeYearsFieldNumber = 7;
  inline ::google::protobuf::int32 guaranteeyears() const;
  inline void set_guaranteeyears(::google::protobuf::int32 value);
  
  // optional int32 saveType = 8;
  inline bool has_savetype() const;
  inline void clear_savetype();
  static const int kSaveTypeFieldNumber = 8;
  inline ::google::protobuf::int32 savetype() const;
  inline void set_savetype(::google::protobuf::int32 value);
  
  // optional int32 saveYears = 9;
  inline bool has_saveyears() const;
  inline void clear_saveyears();
  static const int kSaveYearsFieldNumber = 9;
  inline ::google::protobuf::int32 saveyears() const;
  inline void set_saveyears(::google::protobuf::int32 value);
  
  // optional int32 nEnabled = 10;
  inline bool has_nenabled() const;
  inline void clear_nenabled();
  static const int kNEnabledFieldNumber = 10;
  inline ::google::protobuf::int32 nenabled() const;
  inline void set_nenabled(::google::protobuf::int32 value);
  
  // optional string strGrade = 11;
  inline bool has_strgrade() const;
  inline void clear_strgrade();
  static const int kStrGradeFieldNumber = 11;
  inline const ::std::string& strgrade() const;
  inline void set_strgrade(const ::std::string& value);
  inline void set_strgrade(const char* value);
  inline void set_strgrade(const char* value, size_t size);
  inline ::std::string* mutable_strgrade();
  inline ::std::string* release_strgrade();
  
  // optional string strRisklevel = 12;
  inline bool has_strrisklevel() const;
  inline void clear_strrisklevel();
  static const int kStrRisklevelFieldNumber = 12;
  inline const ::std::string& strrisklevel() const;
  inline void set_strrisklevel(const ::std::string& value);
  inline void set_strrisklevel(const char* value);
  inline void set_strrisklevel(const char* value, size_t size);
  inline ::std::string* mutable_strrisklevel();
  inline ::std::string* release_strrisklevel();
  
  // optional int32 importUser = 13;
  inline bool has_importuser() const;
  inline void clear_importuser();
  static const int kImportUserFieldNumber = 13;
  inline ::google::protobuf::int32 importuser() const;
  inline void set_importuser(::google::protobuf::int32 value);
  
  // optional string importTime = 14;
  inline bool has_importtime() const;
  inline void clear_importtime();
  static const int kImportTimeFieldNumber = 14;
  inline const ::std::string& importtime() const;
  inline void set_importtime(const ::std::string& value);
  inline void set_importtime(const char* value);
  inline void set_importtime(const char* value, size_t size);
  inline ::std::string* mutable_importtime();
  inline ::std::string* release_importtime();
  
  // optional int32 checkUser = 15;
  inline bool has_checkuser() const;
  inline void clear_checkuser();
  static const int kCheckUserFieldNumber = 15;
  inline ::google::protobuf::int32 checkuser() const;
  inline void set_checkuser(::google::protobuf::int32 value);
  
  // optional string checkTime = 16;
  inline bool has_checktime() const;
  inline void clear_checktime();
  static const int kCheckTimeFieldNumber = 16;
  inline const ::std::string& checktime() const;
  inline void set_checktime(const ::std::string& value);
  inline void set_checktime(const char* value);
  inline void set_checktime(const char* value, size_t size);
  inline ::std::string* mutable_checktime();
  inline ::std::string* release_checktime();
  
  // optional string remark = 17;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 17;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  
  // optional string strApplyDate = 18;
  inline bool has_strapplydate() const;
  inline void clear_strapplydate();
  static const int kStrApplyDateFieldNumber = 18;
  inline const ::std::string& strapplydate() const;
  inline void set_strapplydate(const ::std::string& value);
  inline void set_strapplydate(const char* value);
  inline void set_strapplydate(const char* value, size_t size);
  inline ::std::string* mutable_strapplydate();
  inline ::std::string* release_strapplydate();
  
  // optional string strVideoEndDate = 19;
  inline bool has_strvideoenddate() const;
  inline void clear_strvideoenddate();
  static const int kStrVideoEndDateFieldNumber = 19;
  inline const ::std::string& strvideoenddate() const;
  inline void set_strvideoenddate(const ::std::string& value);
  inline void set_strvideoenddate(const char* value);
  inline void set_strvideoenddate(const char* value, size_t size);
  inline ::std::string* mutable_strvideoenddate();
  inline ::std::string* release_strvideoenddate();
  
  // optional string wordTemplate = 20;
  inline bool has_wordtemplate() const;
  inline void clear_wordtemplate();
  static const int kWordTemplateFieldNumber = 20;
  inline const ::std::string& wordtemplate() const;
  inline void set_wordtemplate(const ::std::string& value);
  inline void set_wordtemplate(const char* value);
  inline void set_wordtemplate(const char* value, size_t size);
  inline ::std::string* mutable_wordtemplate();
  inline ::std::string* release_wordtemplate();
  
  // @@protoc_insertion_point(class_scope:cms_8120.Product)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_nparentid();
  inline void clear_has_nparentid();
  inline void set_has_strname();
  inline void clear_has_strname();
  inline void set_has_strcode();
  inline void clear_has_strcode();
  inline void set_has_strenddate();
  inline void clear_has_strenddate();
  inline void set_has_guaranteetype();
  inline void clear_has_guaranteetype();
  inline void set_has_guaranteeyears();
  inline void clear_has_guaranteeyears();
  inline void set_has_savetype();
  inline void clear_has_savetype();
  inline void set_has_saveyears();
  inline void clear_has_saveyears();
  inline void set_has_nenabled();
  inline void clear_has_nenabled();
  inline void set_has_strgrade();
  inline void clear_has_strgrade();
  inline void set_has_strrisklevel();
  inline void clear_has_strrisklevel();
  inline void set_has_importuser();
  inline void clear_has_importuser();
  inline void set_has_importtime();
  inline void clear_has_importtime();
  inline void set_has_checkuser();
  inline void clear_has_checkuser();
  inline void set_has_checktime();
  inline void clear_has_checktime();
  inline void set_has_remark();
  inline void clear_has_remark();
  inline void set_has_strapplydate();
  inline void clear_has_strapplydate();
  inline void set_has_strvideoenddate();
  inline void clear_has_strvideoenddate();
  inline void set_has_wordtemplate();
  inline void clear_has_wordtemplate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 nparentid_;
  ::std::string* strname_;
  ::std::string* strcode_;
  ::std::string* strenddate_;
  ::google::protobuf::int32 guaranteetype_;
  ::google::protobuf::int32 guaranteeyears_;
  ::google::protobuf::int32 savetype_;
  ::google::protobuf::int32 saveyears_;
  ::std::string* strgrade_;
  ::google::protobuf::int32 nenabled_;
  ::google::protobuf::int32 importuser_;
  ::std::string* strrisklevel_;
  ::std::string* importtime_;
  ::std::string* checktime_;
  ::std::string* remark_;
  ::std::string* strapplydate_;
  ::std::string* strvideoenddate_;
  ::std::string* wordtemplate_;
  ::google::protobuf::int32 checkuser_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fProduct_2eProto();
  friend void protobuf_AssignDesc_center_2fProduct_2eProto();
  friend void protobuf_ShutdownFile_center_2fProduct_2eProto();
  
  void InitAsDefaultInstance();
  static Product* default_instance_;
};
// -------------------------------------------------------------------

class ReqProduct : public ::google::protobuf::Message {
 public:
  ReqProduct();
  virtual ~ReqProduct();
  
  ReqProduct(const ReqProduct& from);
  
  inline ReqProduct& operator=(const ReqProduct& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqProduct& default_instance();
  
  void Swap(ReqProduct* other);
  
  // implements Message ----------------------------------------------
  
  ReqProduct* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqProduct& from);
  void MergeFrom(const ReqProduct& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 nParentId = 3;
  inline bool has_nparentid() const;
  inline void clear_nparentid();
  static const int kNParentIdFieldNumber = 3;
  inline ::google::protobuf::int32 nparentid() const;
  inline void set_nparentid(::google::protobuf::int32 value);
  
  // optional string strName = 4;
  inline bool has_strname() const;
  inline void clear_strname();
  static const int kStrNameFieldNumber = 4;
  inline const ::std::string& strname() const;
  inline void set_strname(const ::std::string& value);
  inline void set_strname(const char* value);
  inline void set_strname(const char* value, size_t size);
  inline ::std::string* mutable_strname();
  inline ::std::string* release_strname();
  
  // optional string strCode = 5;
  inline bool has_strcode() const;
  inline void clear_strcode();
  static const int kStrCodeFieldNumber = 5;
  inline const ::std::string& strcode() const;
  inline void set_strcode(const ::std::string& value);
  inline void set_strcode(const char* value);
  inline void set_strcode(const char* value, size_t size);
  inline ::std::string* mutable_strcode();
  inline ::std::string* release_strcode();
  
  // optional string strEndDate = 6;
  inline bool has_strenddate() const;
  inline void clear_strenddate();
  static const int kStrEndDateFieldNumber = 6;
  inline const ::std::string& strenddate() const;
  inline void set_strenddate(const ::std::string& value);
  inline void set_strenddate(const char* value);
  inline void set_strenddate(const char* value, size_t size);
  inline ::std::string* mutable_strenddate();
  inline ::std::string* release_strenddate();
  
  // optional int32 guaranteeType = 7;
  inline bool has_guaranteetype() const;
  inline void clear_guaranteetype();
  static const int kGuaranteeTypeFieldNumber = 7;
  inline ::google::protobuf::int32 guaranteetype() const;
  inline void set_guaranteetype(::google::protobuf::int32 value);
  
  // optional int32 guaranteeYears = 8;
  inline bool has_guaranteeyears() const;
  inline void clear_guaranteeyears();
  static const int kGuaranteeYearsFieldNumber = 8;
  inline ::google::protobuf::int32 guaranteeyears() const;
  inline void set_guaranteeyears(::google::protobuf::int32 value);
  
  // optional int32 saveType = 9;
  inline bool has_savetype() const;
  inline void clear_savetype();
  static const int kSaveTypeFieldNumber = 9;
  inline ::google::protobuf::int32 savetype() const;
  inline void set_savetype(::google::protobuf::int32 value);
  
  // optional int32 saveYears = 10;
  inline bool has_saveyears() const;
  inline void clear_saveyears();
  static const int kSaveYearsFieldNumber = 10;
  inline ::google::protobuf::int32 saveyears() const;
  inline void set_saveyears(::google::protobuf::int32 value);
  
  // optional int32 nEnabled = 11;
  inline bool has_nenabled() const;
  inline void clear_nenabled();
  static const int kNEnabledFieldNumber = 11;
  inline ::google::protobuf::int32 nenabled() const;
  inline void set_nenabled(::google::protobuf::int32 value);
  
  // optional string strGrade = 12;
  inline bool has_strgrade() const;
  inline void clear_strgrade();
  static const int kStrGradeFieldNumber = 12;
  inline const ::std::string& strgrade() const;
  inline void set_strgrade(const ::std::string& value);
  inline void set_strgrade(const char* value);
  inline void set_strgrade(const char* value, size_t size);
  inline ::std::string* mutable_strgrade();
  inline ::std::string* release_strgrade();
  
  // optional string strRisklevel = 13;
  inline bool has_strrisklevel() const;
  inline void clear_strrisklevel();
  static const int kStrRisklevelFieldNumber = 13;
  inline const ::std::string& strrisklevel() const;
  inline void set_strrisklevel(const ::std::string& value);
  inline void set_strrisklevel(const char* value);
  inline void set_strrisklevel(const char* value, size_t size);
  inline ::std::string* mutable_strrisklevel();
  inline ::std::string* release_strrisklevel();
  
  // optional int32 importUser = 14;
  inline bool has_importuser() const;
  inline void clear_importuser();
  static const int kImportUserFieldNumber = 14;
  inline ::google::protobuf::int32 importuser() const;
  inline void set_importuser(::google::protobuf::int32 value);
  
  // optional string importTime = 15;
  inline bool has_importtime() const;
  inline void clear_importtime();
  static const int kImportTimeFieldNumber = 15;
  inline const ::std::string& importtime() const;
  inline void set_importtime(const ::std::string& value);
  inline void set_importtime(const char* value);
  inline void set_importtime(const char* value, size_t size);
  inline ::std::string* mutable_importtime();
  inline ::std::string* release_importtime();
  
  // optional int32 checkUser = 16;
  inline bool has_checkuser() const;
  inline void clear_checkuser();
  static const int kCheckUserFieldNumber = 16;
  inline ::google::protobuf::int32 checkuser() const;
  inline void set_checkuser(::google::protobuf::int32 value);
  
  // optional string checkTime = 17;
  inline bool has_checktime() const;
  inline void clear_checktime();
  static const int kCheckTimeFieldNumber = 17;
  inline const ::std::string& checktime() const;
  inline void set_checktime(const ::std::string& value);
  inline void set_checktime(const char* value);
  inline void set_checktime(const char* value, size_t size);
  inline ::std::string* mutable_checktime();
  inline ::std::string* release_checktime();
  
  // optional string remark = 18;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 18;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  
  // optional string strApplyDate = 19;
  inline bool has_strapplydate() const;
  inline void clear_strapplydate();
  static const int kStrApplyDateFieldNumber = 19;
  inline const ::std::string& strapplydate() const;
  inline void set_strapplydate(const ::std::string& value);
  inline void set_strapplydate(const char* value);
  inline void set_strapplydate(const char* value, size_t size);
  inline ::std::string* mutable_strapplydate();
  inline ::std::string* release_strapplydate();
  
  // optional string strVideoEndDate = 20;
  inline bool has_strvideoenddate() const;
  inline void clear_strvideoenddate();
  static const int kStrVideoEndDateFieldNumber = 20;
  inline const ::std::string& strvideoenddate() const;
  inline void set_strvideoenddate(const ::std::string& value);
  inline void set_strvideoenddate(const char* value);
  inline void set_strvideoenddate(const char* value, size_t size);
  inline ::std::string* mutable_strvideoenddate();
  inline ::std::string* release_strvideoenddate();
  
  // optional string wordTemplate = 21;
  inline bool has_wordtemplate() const;
  inline void clear_wordtemplate();
  static const int kWordTemplateFieldNumber = 21;
  inline const ::std::string& wordtemplate() const;
  inline void set_wordtemplate(const ::std::string& value);
  inline void set_wordtemplate(const char* value);
  inline void set_wordtemplate(const char* value, size_t size);
  inline ::std::string* mutable_wordtemplate();
  inline ::std::string* release_wordtemplate();
  
  // @@protoc_insertion_point(class_scope:cms_8120.ReqProduct)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_nparentid();
  inline void clear_has_nparentid();
  inline void set_has_strname();
  inline void clear_has_strname();
  inline void set_has_strcode();
  inline void clear_has_strcode();
  inline void set_has_strenddate();
  inline void clear_has_strenddate();
  inline void set_has_guaranteetype();
  inline void clear_has_guaranteetype();
  inline void set_has_guaranteeyears();
  inline void clear_has_guaranteeyears();
  inline void set_has_savetype();
  inline void clear_has_savetype();
  inline void set_has_saveyears();
  inline void clear_has_saveyears();
  inline void set_has_nenabled();
  inline void clear_has_nenabled();
  inline void set_has_strgrade();
  inline void clear_has_strgrade();
  inline void set_has_strrisklevel();
  inline void clear_has_strrisklevel();
  inline void set_has_importuser();
  inline void clear_has_importuser();
  inline void set_has_importtime();
  inline void clear_has_importtime();
  inline void set_has_checkuser();
  inline void clear_has_checkuser();
  inline void set_has_checktime();
  inline void clear_has_checktime();
  inline void set_has_remark();
  inline void clear_has_remark();
  inline void set_has_strapplydate();
  inline void clear_has_strapplydate();
  inline void set_has_strvideoenddate();
  inline void clear_has_strvideoenddate();
  inline void set_has_wordtemplate();
  inline void clear_has_wordtemplate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 id_;
  ::std::string* strname_;
  ::std::string* strcode_;
  ::google::protobuf::int32 nparentid_;
  ::google::protobuf::int32 guaranteetype_;
  ::std::string* strenddate_;
  ::google::protobuf::int32 guaranteeyears_;
  ::google::protobuf::int32 savetype_;
  ::google::protobuf::int32 saveyears_;
  ::google::protobuf::int32 nenabled_;
  ::std::string* strgrade_;
  ::std::string* strrisklevel_;
  ::std::string* importtime_;
  ::google::protobuf::int32 importuser_;
  ::google::protobuf::int32 checkuser_;
  ::std::string* checktime_;
  ::std::string* remark_;
  ::std::string* strapplydate_;
  ::std::string* strvideoenddate_;
  ::std::string* wordtemplate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fProduct_2eProto();
  friend void protobuf_AssignDesc_center_2fProduct_2eProto();
  friend void protobuf_ShutdownFile_center_2fProduct_2eProto();
  
  void InitAsDefaultInstance();
  static ReqProduct* default_instance_;
};
// -------------------------------------------------------------------

class ProductList : public ::google::protobuf::Message {
 public:
  ProductList();
  virtual ~ProductList();
  
  ProductList(const ProductList& from);
  
  inline ProductList& operator=(const ProductList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductList& default_instance();
  
  void Swap(ProductList* other);
  
  // implements Message ----------------------------------------------
  
  ProductList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProductList& from);
  void MergeFrom(const ProductList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // repeated .cms_8120.Product product = 2;
  inline int product_size() const;
  inline void clear_product();
  static const int kProductFieldNumber = 2;
  inline const ::cms_8120::Product& product(int index) const;
  inline ::cms_8120::Product* mutable_product(int index);
  inline ::cms_8120::Product* add_product();
  inline const ::google::protobuf::RepeatedPtrField< ::cms_8120::Product >&
      product() const;
  inline ::google::protobuf::RepeatedPtrField< ::cms_8120::Product >*
      mutable_product();
  
  // @@protoc_insertion_point(class_scope:cms_8120.ProductList)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::cms_8120::Product > product_;
  ::google::protobuf::int32 cmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fProduct_2eProto();
  friend void protobuf_AssignDesc_center_2fProduct_2eProto();
  friend void protobuf_ShutdownFile_center_2fProduct_2eProto();
  
  void InitAsDefaultInstance();
  static ProductList* default_instance_;
};
// ===================================================================


// ===================================================================

// Product

// optional int32 id = 1;
inline bool Product::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Product::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Product::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Product::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Product::id() const {
  return id_;
}
inline void Product::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 nParentId = 2;
inline bool Product::has_nparentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Product::set_has_nparentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Product::clear_has_nparentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Product::clear_nparentid() {
  nparentid_ = 0;
  clear_has_nparentid();
}
inline ::google::protobuf::int32 Product::nparentid() const {
  return nparentid_;
}
inline void Product::set_nparentid(::google::protobuf::int32 value) {
  set_has_nparentid();
  nparentid_ = value;
}

// optional string strName = 3;
inline bool Product::has_strname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Product::set_has_strname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Product::clear_has_strname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Product::clear_strname() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    strname_->clear();
  }
  clear_has_strname();
}
inline const ::std::string& Product::strname() const {
  return *strname_;
}
inline void Product::set_strname(const ::std::string& value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void Product::set_strname(const char* value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void Product::set_strname(const char* value, size_t size) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Product::mutable_strname() {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  return strname_;
}
inline ::std::string* Product::release_strname() {
  clear_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strname_;
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strCode = 4;
inline bool Product::has_strcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Product::set_has_strcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Product::clear_has_strcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Product::clear_strcode() {
  if (strcode_ != &::google::protobuf::internal::kEmptyString) {
    strcode_->clear();
  }
  clear_has_strcode();
}
inline const ::std::string& Product::strcode() const {
  return *strcode_;
}
inline void Product::set_strcode(const ::std::string& value) {
  set_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    strcode_ = new ::std::string;
  }
  strcode_->assign(value);
}
inline void Product::set_strcode(const char* value) {
  set_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    strcode_ = new ::std::string;
  }
  strcode_->assign(value);
}
inline void Product::set_strcode(const char* value, size_t size) {
  set_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    strcode_ = new ::std::string;
  }
  strcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Product::mutable_strcode() {
  set_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    strcode_ = new ::std::string;
  }
  return strcode_;
}
inline ::std::string* Product::release_strcode() {
  clear_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strcode_;
    strcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strEndDate = 5;
inline bool Product::has_strenddate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Product::set_has_strenddate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Product::clear_has_strenddate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Product::clear_strenddate() {
  if (strenddate_ != &::google::protobuf::internal::kEmptyString) {
    strenddate_->clear();
  }
  clear_has_strenddate();
}
inline const ::std::string& Product::strenddate() const {
  return *strenddate_;
}
inline void Product::set_strenddate(const ::std::string& value) {
  set_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    strenddate_ = new ::std::string;
  }
  strenddate_->assign(value);
}
inline void Product::set_strenddate(const char* value) {
  set_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    strenddate_ = new ::std::string;
  }
  strenddate_->assign(value);
}
inline void Product::set_strenddate(const char* value, size_t size) {
  set_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    strenddate_ = new ::std::string;
  }
  strenddate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Product::mutable_strenddate() {
  set_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    strenddate_ = new ::std::string;
  }
  return strenddate_;
}
inline ::std::string* Product::release_strenddate() {
  clear_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strenddate_;
    strenddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 guaranteeType = 6;
inline bool Product::has_guaranteetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Product::set_has_guaranteetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Product::clear_has_guaranteetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Product::clear_guaranteetype() {
  guaranteetype_ = 0;
  clear_has_guaranteetype();
}
inline ::google::protobuf::int32 Product::guaranteetype() const {
  return guaranteetype_;
}
inline void Product::set_guaranteetype(::google::protobuf::int32 value) {
  set_has_guaranteetype();
  guaranteetype_ = value;
}

// optional int32 guaranteeYears = 7;
inline bool Product::has_guaranteeyears() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Product::set_has_guaranteeyears() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Product::clear_has_guaranteeyears() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Product::clear_guaranteeyears() {
  guaranteeyears_ = 0;
  clear_has_guaranteeyears();
}
inline ::google::protobuf::int32 Product::guaranteeyears() const {
  return guaranteeyears_;
}
inline void Product::set_guaranteeyears(::google::protobuf::int32 value) {
  set_has_guaranteeyears();
  guaranteeyears_ = value;
}

// optional int32 saveType = 8;
inline bool Product::has_savetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Product::set_has_savetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Product::clear_has_savetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Product::clear_savetype() {
  savetype_ = 0;
  clear_has_savetype();
}
inline ::google::protobuf::int32 Product::savetype() const {
  return savetype_;
}
inline void Product::set_savetype(::google::protobuf::int32 value) {
  set_has_savetype();
  savetype_ = value;
}

// optional int32 saveYears = 9;
inline bool Product::has_saveyears() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Product::set_has_saveyears() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Product::clear_has_saveyears() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Product::clear_saveyears() {
  saveyears_ = 0;
  clear_has_saveyears();
}
inline ::google::protobuf::int32 Product::saveyears() const {
  return saveyears_;
}
inline void Product::set_saveyears(::google::protobuf::int32 value) {
  set_has_saveyears();
  saveyears_ = value;
}

// optional int32 nEnabled = 10;
inline bool Product::has_nenabled() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Product::set_has_nenabled() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Product::clear_has_nenabled() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Product::clear_nenabled() {
  nenabled_ = 0;
  clear_has_nenabled();
}
inline ::google::protobuf::int32 Product::nenabled() const {
  return nenabled_;
}
inline void Product::set_nenabled(::google::protobuf::int32 value) {
  set_has_nenabled();
  nenabled_ = value;
}

// optional string strGrade = 11;
inline bool Product::has_strgrade() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Product::set_has_strgrade() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Product::clear_has_strgrade() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Product::clear_strgrade() {
  if (strgrade_ != &::google::protobuf::internal::kEmptyString) {
    strgrade_->clear();
  }
  clear_has_strgrade();
}
inline const ::std::string& Product::strgrade() const {
  return *strgrade_;
}
inline void Product::set_strgrade(const ::std::string& value) {
  set_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    strgrade_ = new ::std::string;
  }
  strgrade_->assign(value);
}
inline void Product::set_strgrade(const char* value) {
  set_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    strgrade_ = new ::std::string;
  }
  strgrade_->assign(value);
}
inline void Product::set_strgrade(const char* value, size_t size) {
  set_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    strgrade_ = new ::std::string;
  }
  strgrade_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Product::mutable_strgrade() {
  set_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    strgrade_ = new ::std::string;
  }
  return strgrade_;
}
inline ::std::string* Product::release_strgrade() {
  clear_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strgrade_;
    strgrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strRisklevel = 12;
inline bool Product::has_strrisklevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Product::set_has_strrisklevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Product::clear_has_strrisklevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Product::clear_strrisklevel() {
  if (strrisklevel_ != &::google::protobuf::internal::kEmptyString) {
    strrisklevel_->clear();
  }
  clear_has_strrisklevel();
}
inline const ::std::string& Product::strrisklevel() const {
  return *strrisklevel_;
}
inline void Product::set_strrisklevel(const ::std::string& value) {
  set_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    strrisklevel_ = new ::std::string;
  }
  strrisklevel_->assign(value);
}
inline void Product::set_strrisklevel(const char* value) {
  set_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    strrisklevel_ = new ::std::string;
  }
  strrisklevel_->assign(value);
}
inline void Product::set_strrisklevel(const char* value, size_t size) {
  set_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    strrisklevel_ = new ::std::string;
  }
  strrisklevel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Product::mutable_strrisklevel() {
  set_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    strrisklevel_ = new ::std::string;
  }
  return strrisklevel_;
}
inline ::std::string* Product::release_strrisklevel() {
  clear_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strrisklevel_;
    strrisklevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 importUser = 13;
inline bool Product::has_importuser() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Product::set_has_importuser() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Product::clear_has_importuser() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Product::clear_importuser() {
  importuser_ = 0;
  clear_has_importuser();
}
inline ::google::protobuf::int32 Product::importuser() const {
  return importuser_;
}
inline void Product::set_importuser(::google::protobuf::int32 value) {
  set_has_importuser();
  importuser_ = value;
}

// optional string importTime = 14;
inline bool Product::has_importtime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Product::set_has_importtime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Product::clear_has_importtime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Product::clear_importtime() {
  if (importtime_ != &::google::protobuf::internal::kEmptyString) {
    importtime_->clear();
  }
  clear_has_importtime();
}
inline const ::std::string& Product::importtime() const {
  return *importtime_;
}
inline void Product::set_importtime(const ::std::string& value) {
  set_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    importtime_ = new ::std::string;
  }
  importtime_->assign(value);
}
inline void Product::set_importtime(const char* value) {
  set_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    importtime_ = new ::std::string;
  }
  importtime_->assign(value);
}
inline void Product::set_importtime(const char* value, size_t size) {
  set_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    importtime_ = new ::std::string;
  }
  importtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Product::mutable_importtime() {
  set_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    importtime_ = new ::std::string;
  }
  return importtime_;
}
inline ::std::string* Product::release_importtime() {
  clear_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = importtime_;
    importtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 checkUser = 15;
inline bool Product::has_checkuser() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Product::set_has_checkuser() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Product::clear_has_checkuser() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Product::clear_checkuser() {
  checkuser_ = 0;
  clear_has_checkuser();
}
inline ::google::protobuf::int32 Product::checkuser() const {
  return checkuser_;
}
inline void Product::set_checkuser(::google::protobuf::int32 value) {
  set_has_checkuser();
  checkuser_ = value;
}

// optional string checkTime = 16;
inline bool Product::has_checktime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Product::set_has_checktime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Product::clear_has_checktime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Product::clear_checktime() {
  if (checktime_ != &::google::protobuf::internal::kEmptyString) {
    checktime_->clear();
  }
  clear_has_checktime();
}
inline const ::std::string& Product::checktime() const {
  return *checktime_;
}
inline void Product::set_checktime(const ::std::string& value) {
  set_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    checktime_ = new ::std::string;
  }
  checktime_->assign(value);
}
inline void Product::set_checktime(const char* value) {
  set_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    checktime_ = new ::std::string;
  }
  checktime_->assign(value);
}
inline void Product::set_checktime(const char* value, size_t size) {
  set_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    checktime_ = new ::std::string;
  }
  checktime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Product::mutable_checktime() {
  set_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    checktime_ = new ::std::string;
  }
  return checktime_;
}
inline ::std::string* Product::release_checktime() {
  clear_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = checktime_;
    checktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string remark = 17;
inline bool Product::has_remark() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Product::set_has_remark() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Product::clear_has_remark() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Product::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& Product::remark() const {
  return *remark_;
}
inline void Product::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void Product::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void Product::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Product::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* Product::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strApplyDate = 18;
inline bool Product::has_strapplydate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Product::set_has_strapplydate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Product::clear_has_strapplydate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Product::clear_strapplydate() {
  if (strapplydate_ != &::google::protobuf::internal::kEmptyString) {
    strapplydate_->clear();
  }
  clear_has_strapplydate();
}
inline const ::std::string& Product::strapplydate() const {
  return *strapplydate_;
}
inline void Product::set_strapplydate(const ::std::string& value) {
  set_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    strapplydate_ = new ::std::string;
  }
  strapplydate_->assign(value);
}
inline void Product::set_strapplydate(const char* value) {
  set_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    strapplydate_ = new ::std::string;
  }
  strapplydate_->assign(value);
}
inline void Product::set_strapplydate(const char* value, size_t size) {
  set_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    strapplydate_ = new ::std::string;
  }
  strapplydate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Product::mutable_strapplydate() {
  set_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    strapplydate_ = new ::std::string;
  }
  return strapplydate_;
}
inline ::std::string* Product::release_strapplydate() {
  clear_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strapplydate_;
    strapplydate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strVideoEndDate = 19;
inline bool Product::has_strvideoenddate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Product::set_has_strvideoenddate() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Product::clear_has_strvideoenddate() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Product::clear_strvideoenddate() {
  if (strvideoenddate_ != &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_->clear();
  }
  clear_has_strvideoenddate();
}
inline const ::std::string& Product::strvideoenddate() const {
  return *strvideoenddate_;
}
inline void Product::set_strvideoenddate(const ::std::string& value) {
  set_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_ = new ::std::string;
  }
  strvideoenddate_->assign(value);
}
inline void Product::set_strvideoenddate(const char* value) {
  set_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_ = new ::std::string;
  }
  strvideoenddate_->assign(value);
}
inline void Product::set_strvideoenddate(const char* value, size_t size) {
  set_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_ = new ::std::string;
  }
  strvideoenddate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Product::mutable_strvideoenddate() {
  set_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_ = new ::std::string;
  }
  return strvideoenddate_;
}
inline ::std::string* Product::release_strvideoenddate() {
  clear_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strvideoenddate_;
    strvideoenddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string wordTemplate = 20;
inline bool Product::has_wordtemplate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Product::set_has_wordtemplate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Product::clear_has_wordtemplate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Product::clear_wordtemplate() {
  if (wordtemplate_ != &::google::protobuf::internal::kEmptyString) {
    wordtemplate_->clear();
  }
  clear_has_wordtemplate();
}
inline const ::std::string& Product::wordtemplate() const {
  return *wordtemplate_;
}
inline void Product::set_wordtemplate(const ::std::string& value) {
  set_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    wordtemplate_ = new ::std::string;
  }
  wordtemplate_->assign(value);
}
inline void Product::set_wordtemplate(const char* value) {
  set_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    wordtemplate_ = new ::std::string;
  }
  wordtemplate_->assign(value);
}
inline void Product::set_wordtemplate(const char* value, size_t size) {
  set_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    wordtemplate_ = new ::std::string;
  }
  wordtemplate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Product::mutable_wordtemplate() {
  set_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    wordtemplate_ = new ::std::string;
  }
  return wordtemplate_;
}
inline ::std::string* Product::release_wordtemplate() {
  clear_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wordtemplate_;
    wordtemplate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReqProduct

// optional int32 cmd = 1;
inline bool ReqProduct::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqProduct::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqProduct::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqProduct::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 ReqProduct::cmd() const {
  return cmd_;
}
inline void ReqProduct::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional int32 id = 2;
inline bool ReqProduct::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqProduct::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqProduct::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqProduct::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReqProduct::id() const {
  return id_;
}
inline void ReqProduct::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 nParentId = 3;
inline bool ReqProduct::has_nparentid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqProduct::set_has_nparentid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqProduct::clear_has_nparentid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqProduct::clear_nparentid() {
  nparentid_ = 0;
  clear_has_nparentid();
}
inline ::google::protobuf::int32 ReqProduct::nparentid() const {
  return nparentid_;
}
inline void ReqProduct::set_nparentid(::google::protobuf::int32 value) {
  set_has_nparentid();
  nparentid_ = value;
}

// optional string strName = 4;
inline bool ReqProduct::has_strname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqProduct::set_has_strname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqProduct::clear_has_strname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqProduct::clear_strname() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    strname_->clear();
  }
  clear_has_strname();
}
inline const ::std::string& ReqProduct::strname() const {
  return *strname_;
}
inline void ReqProduct::set_strname(const ::std::string& value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void ReqProduct::set_strname(const char* value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void ReqProduct::set_strname(const char* value, size_t size) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqProduct::mutable_strname() {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  return strname_;
}
inline ::std::string* ReqProduct::release_strname() {
  clear_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strname_;
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strCode = 5;
inline bool ReqProduct::has_strcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqProduct::set_has_strcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqProduct::clear_has_strcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqProduct::clear_strcode() {
  if (strcode_ != &::google::protobuf::internal::kEmptyString) {
    strcode_->clear();
  }
  clear_has_strcode();
}
inline const ::std::string& ReqProduct::strcode() const {
  return *strcode_;
}
inline void ReqProduct::set_strcode(const ::std::string& value) {
  set_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    strcode_ = new ::std::string;
  }
  strcode_->assign(value);
}
inline void ReqProduct::set_strcode(const char* value) {
  set_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    strcode_ = new ::std::string;
  }
  strcode_->assign(value);
}
inline void ReqProduct::set_strcode(const char* value, size_t size) {
  set_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    strcode_ = new ::std::string;
  }
  strcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqProduct::mutable_strcode() {
  set_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    strcode_ = new ::std::string;
  }
  return strcode_;
}
inline ::std::string* ReqProduct::release_strcode() {
  clear_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strcode_;
    strcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strEndDate = 6;
inline bool ReqProduct::has_strenddate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqProduct::set_has_strenddate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqProduct::clear_has_strenddate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqProduct::clear_strenddate() {
  if (strenddate_ != &::google::protobuf::internal::kEmptyString) {
    strenddate_->clear();
  }
  clear_has_strenddate();
}
inline const ::std::string& ReqProduct::strenddate() const {
  return *strenddate_;
}
inline void ReqProduct::set_strenddate(const ::std::string& value) {
  set_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    strenddate_ = new ::std::string;
  }
  strenddate_->assign(value);
}
inline void ReqProduct::set_strenddate(const char* value) {
  set_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    strenddate_ = new ::std::string;
  }
  strenddate_->assign(value);
}
inline void ReqProduct::set_strenddate(const char* value, size_t size) {
  set_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    strenddate_ = new ::std::string;
  }
  strenddate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqProduct::mutable_strenddate() {
  set_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    strenddate_ = new ::std::string;
  }
  return strenddate_;
}
inline ::std::string* ReqProduct::release_strenddate() {
  clear_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strenddate_;
    strenddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 guaranteeType = 7;
inline bool ReqProduct::has_guaranteetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqProduct::set_has_guaranteetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqProduct::clear_has_guaranteetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqProduct::clear_guaranteetype() {
  guaranteetype_ = 0;
  clear_has_guaranteetype();
}
inline ::google::protobuf::int32 ReqProduct::guaranteetype() const {
  return guaranteetype_;
}
inline void ReqProduct::set_guaranteetype(::google::protobuf::int32 value) {
  set_has_guaranteetype();
  guaranteetype_ = value;
}

// optional int32 guaranteeYears = 8;
inline bool ReqProduct::has_guaranteeyears() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqProduct::set_has_guaranteeyears() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqProduct::clear_has_guaranteeyears() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqProduct::clear_guaranteeyears() {
  guaranteeyears_ = 0;
  clear_has_guaranteeyears();
}
inline ::google::protobuf::int32 ReqProduct::guaranteeyears() const {
  return guaranteeyears_;
}
inline void ReqProduct::set_guaranteeyears(::google::protobuf::int32 value) {
  set_has_guaranteeyears();
  guaranteeyears_ = value;
}

// optional int32 saveType = 9;
inline bool ReqProduct::has_savetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReqProduct::set_has_savetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReqProduct::clear_has_savetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReqProduct::clear_savetype() {
  savetype_ = 0;
  clear_has_savetype();
}
inline ::google::protobuf::int32 ReqProduct::savetype() const {
  return savetype_;
}
inline void ReqProduct::set_savetype(::google::protobuf::int32 value) {
  set_has_savetype();
  savetype_ = value;
}

// optional int32 saveYears = 10;
inline bool ReqProduct::has_saveyears() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReqProduct::set_has_saveyears() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReqProduct::clear_has_saveyears() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReqProduct::clear_saveyears() {
  saveyears_ = 0;
  clear_has_saveyears();
}
inline ::google::protobuf::int32 ReqProduct::saveyears() const {
  return saveyears_;
}
inline void ReqProduct::set_saveyears(::google::protobuf::int32 value) {
  set_has_saveyears();
  saveyears_ = value;
}

// optional int32 nEnabled = 11;
inline bool ReqProduct::has_nenabled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReqProduct::set_has_nenabled() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReqProduct::clear_has_nenabled() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReqProduct::clear_nenabled() {
  nenabled_ = 0;
  clear_has_nenabled();
}
inline ::google::protobuf::int32 ReqProduct::nenabled() const {
  return nenabled_;
}
inline void ReqProduct::set_nenabled(::google::protobuf::int32 value) {
  set_has_nenabled();
  nenabled_ = value;
}

// optional string strGrade = 12;
inline bool ReqProduct::has_strgrade() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReqProduct::set_has_strgrade() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReqProduct::clear_has_strgrade() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReqProduct::clear_strgrade() {
  if (strgrade_ != &::google::protobuf::internal::kEmptyString) {
    strgrade_->clear();
  }
  clear_has_strgrade();
}
inline const ::std::string& ReqProduct::strgrade() const {
  return *strgrade_;
}
inline void ReqProduct::set_strgrade(const ::std::string& value) {
  set_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    strgrade_ = new ::std::string;
  }
  strgrade_->assign(value);
}
inline void ReqProduct::set_strgrade(const char* value) {
  set_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    strgrade_ = new ::std::string;
  }
  strgrade_->assign(value);
}
inline void ReqProduct::set_strgrade(const char* value, size_t size) {
  set_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    strgrade_ = new ::std::string;
  }
  strgrade_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqProduct::mutable_strgrade() {
  set_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    strgrade_ = new ::std::string;
  }
  return strgrade_;
}
inline ::std::string* ReqProduct::release_strgrade() {
  clear_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strgrade_;
    strgrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strRisklevel = 13;
inline bool ReqProduct::has_strrisklevel() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ReqProduct::set_has_strrisklevel() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ReqProduct::clear_has_strrisklevel() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ReqProduct::clear_strrisklevel() {
  if (strrisklevel_ != &::google::protobuf::internal::kEmptyString) {
    strrisklevel_->clear();
  }
  clear_has_strrisklevel();
}
inline const ::std::string& ReqProduct::strrisklevel() const {
  return *strrisklevel_;
}
inline void ReqProduct::set_strrisklevel(const ::std::string& value) {
  set_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    strrisklevel_ = new ::std::string;
  }
  strrisklevel_->assign(value);
}
inline void ReqProduct::set_strrisklevel(const char* value) {
  set_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    strrisklevel_ = new ::std::string;
  }
  strrisklevel_->assign(value);
}
inline void ReqProduct::set_strrisklevel(const char* value, size_t size) {
  set_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    strrisklevel_ = new ::std::string;
  }
  strrisklevel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqProduct::mutable_strrisklevel() {
  set_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    strrisklevel_ = new ::std::string;
  }
  return strrisklevel_;
}
inline ::std::string* ReqProduct::release_strrisklevel() {
  clear_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strrisklevel_;
    strrisklevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 importUser = 14;
inline bool ReqProduct::has_importuser() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ReqProduct::set_has_importuser() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ReqProduct::clear_has_importuser() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ReqProduct::clear_importuser() {
  importuser_ = 0;
  clear_has_importuser();
}
inline ::google::protobuf::int32 ReqProduct::importuser() const {
  return importuser_;
}
inline void ReqProduct::set_importuser(::google::protobuf::int32 value) {
  set_has_importuser();
  importuser_ = value;
}

// optional string importTime = 15;
inline bool ReqProduct::has_importtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ReqProduct::set_has_importtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ReqProduct::clear_has_importtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ReqProduct::clear_importtime() {
  if (importtime_ != &::google::protobuf::internal::kEmptyString) {
    importtime_->clear();
  }
  clear_has_importtime();
}
inline const ::std::string& ReqProduct::importtime() const {
  return *importtime_;
}
inline void ReqProduct::set_importtime(const ::std::string& value) {
  set_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    importtime_ = new ::std::string;
  }
  importtime_->assign(value);
}
inline void ReqProduct::set_importtime(const char* value) {
  set_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    importtime_ = new ::std::string;
  }
  importtime_->assign(value);
}
inline void ReqProduct::set_importtime(const char* value, size_t size) {
  set_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    importtime_ = new ::std::string;
  }
  importtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqProduct::mutable_importtime() {
  set_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    importtime_ = new ::std::string;
  }
  return importtime_;
}
inline ::std::string* ReqProduct::release_importtime() {
  clear_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = importtime_;
    importtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 checkUser = 16;
inline bool ReqProduct::has_checkuser() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ReqProduct::set_has_checkuser() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ReqProduct::clear_has_checkuser() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ReqProduct::clear_checkuser() {
  checkuser_ = 0;
  clear_has_checkuser();
}
inline ::google::protobuf::int32 ReqProduct::checkuser() const {
  return checkuser_;
}
inline void ReqProduct::set_checkuser(::google::protobuf::int32 value) {
  set_has_checkuser();
  checkuser_ = value;
}

// optional string checkTime = 17;
inline bool ReqProduct::has_checktime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ReqProduct::set_has_checktime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ReqProduct::clear_has_checktime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ReqProduct::clear_checktime() {
  if (checktime_ != &::google::protobuf::internal::kEmptyString) {
    checktime_->clear();
  }
  clear_has_checktime();
}
inline const ::std::string& ReqProduct::checktime() const {
  return *checktime_;
}
inline void ReqProduct::set_checktime(const ::std::string& value) {
  set_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    checktime_ = new ::std::string;
  }
  checktime_->assign(value);
}
inline void ReqProduct::set_checktime(const char* value) {
  set_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    checktime_ = new ::std::string;
  }
  checktime_->assign(value);
}
inline void ReqProduct::set_checktime(const char* value, size_t size) {
  set_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    checktime_ = new ::std::string;
  }
  checktime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqProduct::mutable_checktime() {
  set_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    checktime_ = new ::std::string;
  }
  return checktime_;
}
inline ::std::string* ReqProduct::release_checktime() {
  clear_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = checktime_;
    checktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string remark = 18;
inline bool ReqProduct::has_remark() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ReqProduct::set_has_remark() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ReqProduct::clear_has_remark() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ReqProduct::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& ReqProduct::remark() const {
  return *remark_;
}
inline void ReqProduct::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void ReqProduct::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void ReqProduct::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqProduct::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* ReqProduct::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strApplyDate = 19;
inline bool ReqProduct::has_strapplydate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ReqProduct::set_has_strapplydate() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ReqProduct::clear_has_strapplydate() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ReqProduct::clear_strapplydate() {
  if (strapplydate_ != &::google::protobuf::internal::kEmptyString) {
    strapplydate_->clear();
  }
  clear_has_strapplydate();
}
inline const ::std::string& ReqProduct::strapplydate() const {
  return *strapplydate_;
}
inline void ReqProduct::set_strapplydate(const ::std::string& value) {
  set_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    strapplydate_ = new ::std::string;
  }
  strapplydate_->assign(value);
}
inline void ReqProduct::set_strapplydate(const char* value) {
  set_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    strapplydate_ = new ::std::string;
  }
  strapplydate_->assign(value);
}
inline void ReqProduct::set_strapplydate(const char* value, size_t size) {
  set_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    strapplydate_ = new ::std::string;
  }
  strapplydate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqProduct::mutable_strapplydate() {
  set_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    strapplydate_ = new ::std::string;
  }
  return strapplydate_;
}
inline ::std::string* ReqProduct::release_strapplydate() {
  clear_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strapplydate_;
    strapplydate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strVideoEndDate = 20;
inline bool ReqProduct::has_strvideoenddate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ReqProduct::set_has_strvideoenddate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ReqProduct::clear_has_strvideoenddate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ReqProduct::clear_strvideoenddate() {
  if (strvideoenddate_ != &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_->clear();
  }
  clear_has_strvideoenddate();
}
inline const ::std::string& ReqProduct::strvideoenddate() const {
  return *strvideoenddate_;
}
inline void ReqProduct::set_strvideoenddate(const ::std::string& value) {
  set_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_ = new ::std::string;
  }
  strvideoenddate_->assign(value);
}
inline void ReqProduct::set_strvideoenddate(const char* value) {
  set_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_ = new ::std::string;
  }
  strvideoenddate_->assign(value);
}
inline void ReqProduct::set_strvideoenddate(const char* value, size_t size) {
  set_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_ = new ::std::string;
  }
  strvideoenddate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqProduct::mutable_strvideoenddate() {
  set_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_ = new ::std::string;
  }
  return strvideoenddate_;
}
inline ::std::string* ReqProduct::release_strvideoenddate() {
  clear_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strvideoenddate_;
    strvideoenddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string wordTemplate = 21;
inline bool ReqProduct::has_wordtemplate() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ReqProduct::set_has_wordtemplate() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ReqProduct::clear_has_wordtemplate() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ReqProduct::clear_wordtemplate() {
  if (wordtemplate_ != &::google::protobuf::internal::kEmptyString) {
    wordtemplate_->clear();
  }
  clear_has_wordtemplate();
}
inline const ::std::string& ReqProduct::wordtemplate() const {
  return *wordtemplate_;
}
inline void ReqProduct::set_wordtemplate(const ::std::string& value) {
  set_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    wordtemplate_ = new ::std::string;
  }
  wordtemplate_->assign(value);
}
inline void ReqProduct::set_wordtemplate(const char* value) {
  set_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    wordtemplate_ = new ::std::string;
  }
  wordtemplate_->assign(value);
}
inline void ReqProduct::set_wordtemplate(const char* value, size_t size) {
  set_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    wordtemplate_ = new ::std::string;
  }
  wordtemplate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqProduct::mutable_wordtemplate() {
  set_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    wordtemplate_ = new ::std::string;
  }
  return wordtemplate_;
}
inline ::std::string* ReqProduct::release_wordtemplate() {
  clear_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wordtemplate_;
    wordtemplate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProductList

// optional int32 cmd = 1;
inline bool ProductList::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProductList::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProductList::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProductList::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 ProductList::cmd() const {
  return cmd_;
}
inline void ProductList::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// repeated .cms_8120.Product product = 2;
inline int ProductList::product_size() const {
  return product_.size();
}
inline void ProductList::clear_product() {
  product_.Clear();
}
inline const ::cms_8120::Product& ProductList::product(int index) const {
  return product_.Get(index);
}
inline ::cms_8120::Product* ProductList::mutable_product(int index) {
  return product_.Mutable(index);
}
inline ::cms_8120::Product* ProductList::add_product() {
  return product_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cms_8120::Product >&
ProductList::product() const {
  return product_;
}
inline ::google::protobuf::RepeatedPtrField< ::cms_8120::Product >*
ProductList::mutable_product() {
  return &product_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_2fProduct_2eProto__INCLUDED
