// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center/OvertimeRecord.proto

#ifndef PROTOBUF_center_2fOvertimeRecord_2eproto__INCLUDED
#define PROTOBUF_center_2fOvertimeRecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "type/cmd.pb.h"
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_center_2fOvertimeRecord_2eproto();
void protobuf_AssignDesc_center_2fOvertimeRecord_2eproto();
void protobuf_ShutdownFile_center_2fOvertimeRecord_2eproto();

class ReqOvertimeRecord;
class OvertimeRecord;
class RspOvertimeRecord;

// ===================================================================

class ReqOvertimeRecord : public ::google::protobuf::Message {
 public:
  ReqOvertimeRecord();
  virtual ~ReqOvertimeRecord();
  
  ReqOvertimeRecord(const ReqOvertimeRecord& from);
  
  inline ReqOvertimeRecord& operator=(const ReqOvertimeRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOvertimeRecord& default_instance();
  
  void Swap(ReqOvertimeRecord* other);
  
  // implements Message ----------------------------------------------
  
  ReqOvertimeRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOvertimeRecord& from);
  void MergeFrom(const ReqOvertimeRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cms_8120.ReqOvertimeRecord)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fOvertimeRecord_2eproto();
  friend void protobuf_AssignDesc_center_2fOvertimeRecord_2eproto();
  friend void protobuf_ShutdownFile_center_2fOvertimeRecord_2eproto();
  
  void InitAsDefaultInstance();
  static ReqOvertimeRecord* default_instance_;
};
// -------------------------------------------------------------------

class OvertimeRecord : public ::google::protobuf::Message {
 public:
  OvertimeRecord();
  virtual ~OvertimeRecord();
  
  OvertimeRecord(const OvertimeRecord& from);
  
  inline OvertimeRecord& operator=(const OvertimeRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OvertimeRecord& default_instance();
  
  void Swap(OvertimeRecord* other);
  
  // implements Message ----------------------------------------------
  
  OvertimeRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OvertimeRecord& from);
  void MergeFrom(const OvertimeRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string proId = 2;
  inline bool has_proid() const;
  inline void clear_proid();
  static const int kProIdFieldNumber = 2;
  inline const ::std::string& proid() const;
  inline void set_proid(const ::std::string& value);
  inline void set_proid(const char* value);
  inline void set_proid(const char* value, size_t size);
  inline ::std::string* mutable_proid();
  inline ::std::string* release_proid();
  
  // optional string businessTime = 3 [default = "1970-01-01 00:00:00"];
  inline bool has_businesstime() const;
  inline void clear_businesstime();
  static const int kBusinessTimeFieldNumber = 3;
  inline const ::std::string& businesstime() const;
  inline void set_businesstime(const ::std::string& value);
  inline void set_businesstime(const char* value);
  inline void set_businesstime(const char* value, size_t size);
  inline ::std::string* mutable_businesstime();
  inline ::std::string* release_businesstime();
  
  // @@protoc_insertion_point(class_scope:cms_8120.OvertimeRecord)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_proid();
  inline void clear_has_proid();
  inline void set_has_businesstime();
  inline void clear_has_businesstime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* proid_;
  ::std::string* businesstime_;
  static const ::std::string _default_businesstime_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fOvertimeRecord_2eproto();
  friend void protobuf_AssignDesc_center_2fOvertimeRecord_2eproto();
  friend void protobuf_ShutdownFile_center_2fOvertimeRecord_2eproto();
  
  void InitAsDefaultInstance();
  static OvertimeRecord* default_instance_;
};
// -------------------------------------------------------------------

class RspOvertimeRecord : public ::google::protobuf::Message {
 public:
  RspOvertimeRecord();
  virtual ~RspOvertimeRecord();
  
  RspOvertimeRecord(const RspOvertimeRecord& from);
  
  inline RspOvertimeRecord& operator=(const RspOvertimeRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspOvertimeRecord& default_instance();
  
  void Swap(RspOvertimeRecord* other);
  
  // implements Message ----------------------------------------------
  
  RspOvertimeRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspOvertimeRecord& from);
  void MergeFrom(const RspOvertimeRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);
  
  // repeated .cms_8120.OvertimeRecord overtimeRecord = 2;
  inline int overtimerecord_size() const;
  inline void clear_overtimerecord();
  static const int kOvertimeRecordFieldNumber = 2;
  inline const ::cms_8120::OvertimeRecord& overtimerecord(int index) const;
  inline ::cms_8120::OvertimeRecord* mutable_overtimerecord(int index);
  inline ::cms_8120::OvertimeRecord* add_overtimerecord();
  inline const ::google::protobuf::RepeatedPtrField< ::cms_8120::OvertimeRecord >&
      overtimerecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::cms_8120::OvertimeRecord >*
      mutable_overtimerecord();
  
  // @@protoc_insertion_point(class_scope:cms_8120.RspOvertimeRecord)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::cms_8120::OvertimeRecord > overtimerecord_;
  ::google::protobuf::int32 cmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fOvertimeRecord_2eproto();
  friend void protobuf_AssignDesc_center_2fOvertimeRecord_2eproto();
  friend void protobuf_ShutdownFile_center_2fOvertimeRecord_2eproto();
  
  void InitAsDefaultInstance();
  static RspOvertimeRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqOvertimeRecord

// optional int32 cmd = 1;
inline bool ReqOvertimeRecord::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqOvertimeRecord::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqOvertimeRecord::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqOvertimeRecord::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 ReqOvertimeRecord::cmd() const {
  return cmd_;
}
inline void ReqOvertimeRecord::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// -------------------------------------------------------------------

// OvertimeRecord

// optional int32 id = 1;
inline bool OvertimeRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OvertimeRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OvertimeRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OvertimeRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 OvertimeRecord::id() const {
  return id_;
}
inline void OvertimeRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string proId = 2;
inline bool OvertimeRecord::has_proid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OvertimeRecord::set_has_proid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OvertimeRecord::clear_has_proid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OvertimeRecord::clear_proid() {
  if (proid_ != &::google::protobuf::internal::kEmptyString) {
    proid_->clear();
  }
  clear_has_proid();
}
inline const ::std::string& OvertimeRecord::proid() const {
  return *proid_;
}
inline void OvertimeRecord::set_proid(const ::std::string& value) {
  set_has_proid();
  if (proid_ == &::google::protobuf::internal::kEmptyString) {
    proid_ = new ::std::string;
  }
  proid_->assign(value);
}
inline void OvertimeRecord::set_proid(const char* value) {
  set_has_proid();
  if (proid_ == &::google::protobuf::internal::kEmptyString) {
    proid_ = new ::std::string;
  }
  proid_->assign(value);
}
inline void OvertimeRecord::set_proid(const char* value, size_t size) {
  set_has_proid();
  if (proid_ == &::google::protobuf::internal::kEmptyString) {
    proid_ = new ::std::string;
  }
  proid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OvertimeRecord::mutable_proid() {
  set_has_proid();
  if (proid_ == &::google::protobuf::internal::kEmptyString) {
    proid_ = new ::std::string;
  }
  return proid_;
}
inline ::std::string* OvertimeRecord::release_proid() {
  clear_has_proid();
  if (proid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = proid_;
    proid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string businessTime = 3 [default = "1970-01-01 00:00:00"];
inline bool OvertimeRecord::has_businesstime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OvertimeRecord::set_has_businesstime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OvertimeRecord::clear_has_businesstime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OvertimeRecord::clear_businesstime() {
  if (businesstime_ != &_default_businesstime_) {
    businesstime_->assign(_default_businesstime_);
  }
  clear_has_businesstime();
}
inline const ::std::string& OvertimeRecord::businesstime() const {
  return *businesstime_;
}
inline void OvertimeRecord::set_businesstime(const ::std::string& value) {
  set_has_businesstime();
  if (businesstime_ == &_default_businesstime_) {
    businesstime_ = new ::std::string;
  }
  businesstime_->assign(value);
}
inline void OvertimeRecord::set_businesstime(const char* value) {
  set_has_businesstime();
  if (businesstime_ == &_default_businesstime_) {
    businesstime_ = new ::std::string;
  }
  businesstime_->assign(value);
}
inline void OvertimeRecord::set_businesstime(const char* value, size_t size) {
  set_has_businesstime();
  if (businesstime_ == &_default_businesstime_) {
    businesstime_ = new ::std::string;
  }
  businesstime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OvertimeRecord::mutable_businesstime() {
  set_has_businesstime();
  if (businesstime_ == &_default_businesstime_) {
    businesstime_ = new ::std::string(_default_businesstime_);
  }
  return businesstime_;
}
inline ::std::string* OvertimeRecord::release_businesstime() {
  clear_has_businesstime();
  if (businesstime_ == &_default_businesstime_) {
    return NULL;
  } else {
    ::std::string* temp = businesstime_;
    businesstime_ = const_cast< ::std::string*>(&_default_businesstime_);
    return temp;
  }
}

// -------------------------------------------------------------------

// RspOvertimeRecord

// optional int32 cmd = 1;
inline bool RspOvertimeRecord::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspOvertimeRecord::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspOvertimeRecord::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspOvertimeRecord::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 RspOvertimeRecord::cmd() const {
  return cmd_;
}
inline void RspOvertimeRecord::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// repeated .cms_8120.OvertimeRecord overtimeRecord = 2;
inline int RspOvertimeRecord::overtimerecord_size() const {
  return overtimerecord_.size();
}
inline void RspOvertimeRecord::clear_overtimerecord() {
  overtimerecord_.Clear();
}
inline const ::cms_8120::OvertimeRecord& RspOvertimeRecord::overtimerecord(int index) const {
  return overtimerecord_.Get(index);
}
inline ::cms_8120::OvertimeRecord* RspOvertimeRecord::mutable_overtimerecord(int index) {
  return overtimerecord_.Mutable(index);
}
inline ::cms_8120::OvertimeRecord* RspOvertimeRecord::add_overtimerecord() {
  return overtimerecord_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cms_8120::OvertimeRecord >&
RspOvertimeRecord::overtimerecord() const {
  return overtimerecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::cms_8120::OvertimeRecord >*
RspOvertimeRecord::mutable_overtimerecord() {
  return &overtimerecord_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_2fOvertimeRecord_2eproto__INCLUDED
