// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center/Records.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* Records_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Records_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRecords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRecords_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordsList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_2fRecords_2eproto() {
  protobuf_AddDesc_center_2fRecords_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center/Records.proto");
  GOOGLE_CHECK(file != NULL);
  Records_descriptor_ = file->message_type(0);
  static const int Records_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, ncollectregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, strrecordname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nrecordtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nrecordfiletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nrecordstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nuploadpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nrecordbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nrecordendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, streamno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nrepairdevid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, strcollectip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, dvrport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, dvrusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, dvrpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, ncollectchan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, strurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, screenshotsrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, dtbusinesstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nrecordlocaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nfileheadlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, ncallertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, strcallerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nrepairtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nrepairtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nlinkorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nlinktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nmanufacturertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, nfilesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, ntaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, strip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, strcloudip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, ncloudport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, straccesskey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, strsecretkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, strbucket_),
  };
  Records_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Records_descriptor_,
      Records::default_instance_,
      Records_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Records));
  ReqRecords_descriptor_ = file->message_type(1);
  static const int ReqRecords_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, nrecordstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, nuploadpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, ntaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, streamno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, rtsppath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, nfilesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, errormsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, endtime_),
  };
  ReqRecords_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRecords_descriptor_,
      ReqRecords::default_instance_,
      ReqRecords_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecords, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRecords));
  RecordsList_descriptor_ = file->message_type(2);
  static const int RecordsList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsList, record_),
  };
  RecordsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordsList_descriptor_,
      RecordsList::default_instance_,
      RecordsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordsList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_2fRecords_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Records_descriptor_, &Records::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRecords_descriptor_, &ReqRecords::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordsList_descriptor_, &RecordsList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_2fRecords_2eproto() {
  delete Records::default_instance_;
  delete Records_reflection_;
  delete ReqRecords::default_instance_;
  delete ReqRecords_reflection_;
  delete RecordsList::default_instance_;
  delete RecordsList_reflection_;
}

void protobuf_AddDesc_center_2fRecords_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_server_2fRspServerData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024center/Records.proto\022\010cms_8120\032\032server"
    "/RspServerData.proto\"\364\006\n\007Records\022\n\n\002id\030\001"
    " \001(\005\022\030\n\020nCollectRegionId\030\002 \001(\005\022\017\n\007nUserI"
    "D\030\003 \001(\005\022\025\n\rstrRecordName\030\004 \001(\t\022\023\n\013nRecor"
    "dType\030\005 \001(\005\022\027\n\017nRecordFileType\030\006 \001(\005\022\025\n\r"
    "nRecordStatus\030\007 \001(\005\022\026\n\016nUploadPercent\030\010 "
    "\001(\005\022&\n\tstartTime\030\t \001(\t:\0231970-01-01 00:00"
    ":00\022$\n\007endTime\030\n \001(\t:\0231970-01-01 00:00:0"
    "0\022\030\n\020nRecordBeginTime\030\013 \001(\005\022\026\n\016nRecordEn"
    "dTime\030\014 \001(\005\022\020\n\010streamNo\030\r \001(\t\022\024\n\014nRepair"
    "DevId\030\016 \001(\005\022\024\n\014strCollectIp\030\017 \001(\t\022\017\n\007dvr"
    "Port\030\020 \001(\005\022\023\n\013dvrUserName\030\021 \001(\t\022\016\n\006dvrPw"
    "d\030\022 \001(\t\022\024\n\014nCollectChan\030\023 \001(\005\022\016\n\006strUrl\030"
    "\024 \001(\t\022\025\n\rscreenshotSrc\030\025 \001(\t\022+\n\016dtBusine"
    "ssTime\030\026 \001(\t:\0231970-01-01 00:00:00\022\030\n\020nRe"
    "cordLocalTime\030\027 \001(\005\022\024\n\014nFileHeadLen\030\030 \001("
    "\005\022\023\n\013nCallerType\030\031 \001(\005\022\023\n\013strCallerId\030\032 "
    "\001(\t\022\023\n\013nRepairType\030\033 \001(\005\022\023\n\013nRepairTime\030"
    "\034 \001(\005\022\024\n\014nLinkOrderId\030\035 \001(\005\022\021\n\tnLinkType"
    "\030\036 \001(\005\022\031\n\021nManufacturerType\030\037 \001(\005\022\021\n\tnFi"
    "leSize\030  \001(\005\022\017\n\007nTaskId\030! \001(\005\022\r\n\005strIp\030\""
    " \001(\t\022\022\n\nstrCloudIp\030# \001(\t\022\022\n\nnCloudPort\030$"
    " \001(\005\022\024\n\014strAccessKey\030% \001(\t\022\024\n\014strSecretK"
    "ey\030& \001(\t\022\021\n\tstrBucket\030\' \001(\t\"\322\001\n\nReqRecor"
    "ds\022\013\n\003cmd\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\025\n\rnRecordSt"
    "atus\030\003 \001(\005\022\026\n\016nUpLoadPercent\030\004 \001(\005\022\017\n\007nT"
    "askId\030\005 \001(\005\022\020\n\010streamNo\030\006 \001(\t\022\020\n\010rtspPat"
    "h\030\007 \001(\t\022\021\n\tnFileSize\030\010 \001(\005\022\020\n\010errorMsg\030\t"
    " \001(\t\022\021\n\tstartTime\030\n \001(\t\022\017\n\007endTime\030\013 \001(\t"
    "\"=\n\013RecordsList\022\013\n\003cmd\030\001 \001(\005\022!\n\006record\030\002"
    " \003(\0132\021.cms_8120.Records2\367\002\n\030ModifyRecord"
    "sinfoService\022\?\n\020QyeryRecordsInfo\022\024.cms_8"
    "120.ReqRecords\032\025.cms_8120.RecordsList\022J\n"
    "\031UpdateRecordsInfoBystatus\022\024.cms_8120.Re"
    "qRecords\032\027.cms_8120.RspServerData\022C\n\024Que"
    "ryRecordsInfoByid\022\024.cms_8120.ReqRecords\032"
    "\025.cms_8120.RecordsList\022D\n\023UpdateUpLoadPe"
    "rcent\022\024.cms_8120.ReqRecords\032\027.cms_8120.R"
    "spServerData\022C\n\024QueryRecordsFileInfo\022\024.c"
    "ms_8120.ReqRecords\032\025.cms_8120.RecordsLis"
    "tB;\n(com.hikvision.finance.fms.cms.hpp.c"
    "enterB\014RecordsProto\210\001\001", 1662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center/Records.proto", &protobuf_RegisterTypes);
  Records::default_instance_ = new Records();
  ReqRecords::default_instance_ = new ReqRecords();
  RecordsList::default_instance_ = new RecordsList();
  Records::default_instance_->InitAsDefaultInstance();
  ReqRecords::default_instance_->InitAsDefaultInstance();
  RecordsList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_2fRecords_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_2fRecords_2eproto {
  StaticDescriptorInitializer_center_2fRecords_2eproto() {
    protobuf_AddDesc_center_2fRecords_2eproto();
  }
} static_descriptor_initializer_center_2fRecords_2eproto_;


// ===================================================================

const ::std::string Records::_default_starttime_("1970-01-01 00:00:00");
const ::std::string Records::_default_endtime_("1970-01-01 00:00:00");
const ::std::string Records::_default_dtbusinesstime_("1970-01-01 00:00:00");
#ifndef _MSC_VER
const int Records::kIdFieldNumber;
const int Records::kNCollectRegionIdFieldNumber;
const int Records::kNUserIDFieldNumber;
const int Records::kStrRecordNameFieldNumber;
const int Records::kNRecordTypeFieldNumber;
const int Records::kNRecordFileTypeFieldNumber;
const int Records::kNRecordStatusFieldNumber;
const int Records::kNUploadPercentFieldNumber;
const int Records::kStartTimeFieldNumber;
const int Records::kEndTimeFieldNumber;
const int Records::kNRecordBeginTimeFieldNumber;
const int Records::kNRecordEndTimeFieldNumber;
const int Records::kStreamNoFieldNumber;
const int Records::kNRepairDevIdFieldNumber;
const int Records::kStrCollectIpFieldNumber;
const int Records::kDvrPortFieldNumber;
const int Records::kDvrUserNameFieldNumber;
const int Records::kDvrPwdFieldNumber;
const int Records::kNCollectChanFieldNumber;
const int Records::kStrUrlFieldNumber;
const int Records::kScreenshotSrcFieldNumber;
const int Records::kDtBusinessTimeFieldNumber;
const int Records::kNRecordLocalTimeFieldNumber;
const int Records::kNFileHeadLenFieldNumber;
const int Records::kNCallerTypeFieldNumber;
const int Records::kStrCallerIdFieldNumber;
const int Records::kNRepairTypeFieldNumber;
const int Records::kNRepairTimeFieldNumber;
const int Records::kNLinkOrderIdFieldNumber;
const int Records::kNLinkTypeFieldNumber;
const int Records::kNManufacturerTypeFieldNumber;
const int Records::kNFileSizeFieldNumber;
const int Records::kNTaskIdFieldNumber;
const int Records::kStrIpFieldNumber;
const int Records::kStrCloudIpFieldNumber;
const int Records::kNCloudPortFieldNumber;
const int Records::kStrAccessKeyFieldNumber;
const int Records::kStrSecretKeyFieldNumber;
const int Records::kStrBucketFieldNumber;
#endif  // !_MSC_VER

Records::Records()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Records::InitAsDefaultInstance() {
}

Records::Records(const Records& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Records::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ncollectregionid_ = 0;
  nuserid_ = 0;
  strrecordname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nrecordtype_ = 0;
  nrecordfiletype_ = 0;
  nrecordstatus_ = 0;
  nuploadpercent_ = 0;
  starttime_ = const_cast< ::std::string*>(&_default_starttime_);
  endtime_ = const_cast< ::std::string*>(&_default_endtime_);
  nrecordbegintime_ = 0;
  nrecordendtime_ = 0;
  streamno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nrepairdevid_ = 0;
  strcollectip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dvrport_ = 0;
  dvrusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dvrpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ncollectchan_ = 0;
  strurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screenshotsrc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dtbusinesstime_ = const_cast< ::std::string*>(&_default_dtbusinesstime_);
  nrecordlocaltime_ = 0;
  nfileheadlen_ = 0;
  ncallertype_ = 0;
  strcallerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nrepairtype_ = 0;
  nrepairtime_ = 0;
  nlinkorderid_ = 0;
  nlinktype_ = 0;
  nmanufacturertype_ = 0;
  nfilesize_ = 0;
  ntaskid_ = 0;
  strip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcloudip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ncloudport_ = 0;
  straccesskey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strsecretkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strbucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Records::~Records() {
  SharedDtor();
}

void Records::SharedDtor() {
  if (strrecordname_ != &::google::protobuf::internal::kEmptyString) {
    delete strrecordname_;
  }
  if (starttime_ != &_default_starttime_) {
    delete starttime_;
  }
  if (endtime_ != &_default_endtime_) {
    delete endtime_;
  }
  if (streamno_ != &::google::protobuf::internal::kEmptyString) {
    delete streamno_;
  }
  if (strcollectip_ != &::google::protobuf::internal::kEmptyString) {
    delete strcollectip_;
  }
  if (dvrusername_ != &::google::protobuf::internal::kEmptyString) {
    delete dvrusername_;
  }
  if (dvrpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete dvrpwd_;
  }
  if (strurl_ != &::google::protobuf::internal::kEmptyString) {
    delete strurl_;
  }
  if (screenshotsrc_ != &::google::protobuf::internal::kEmptyString) {
    delete screenshotsrc_;
  }
  if (dtbusinesstime_ != &_default_dtbusinesstime_) {
    delete dtbusinesstime_;
  }
  if (strcallerid_ != &::google::protobuf::internal::kEmptyString) {
    delete strcallerid_;
  }
  if (strip_ != &::google::protobuf::internal::kEmptyString) {
    delete strip_;
  }
  if (strcloudip_ != &::google::protobuf::internal::kEmptyString) {
    delete strcloudip_;
  }
  if (straccesskey_ != &::google::protobuf::internal::kEmptyString) {
    delete straccesskey_;
  }
  if (strsecretkey_ != &::google::protobuf::internal::kEmptyString) {
    delete strsecretkey_;
  }
  if (strbucket_ != &::google::protobuf::internal::kEmptyString) {
    delete strbucket_;
  }
  if (this != default_instance_) {
  }
}

void Records::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Records::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Records_descriptor_;
}

const Records& Records::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fRecords_2eproto();  return *default_instance_;
}

Records* Records::default_instance_ = NULL;

Records* Records::New() const {
  return new Records;
}

void Records::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    ncollectregionid_ = 0;
    nuserid_ = 0;
    if (has_strrecordname()) {
      if (strrecordname_ != &::google::protobuf::internal::kEmptyString) {
        strrecordname_->clear();
      }
    }
    nrecordtype_ = 0;
    nrecordfiletype_ = 0;
    nrecordstatus_ = 0;
    nuploadpercent_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_starttime()) {
      if (starttime_ != &_default_starttime_) {
        starttime_->assign(_default_starttime_);
      }
    }
    if (has_endtime()) {
      if (endtime_ != &_default_endtime_) {
        endtime_->assign(_default_endtime_);
      }
    }
    nrecordbegintime_ = 0;
    nrecordendtime_ = 0;
    if (has_streamno()) {
      if (streamno_ != &::google::protobuf::internal::kEmptyString) {
        streamno_->clear();
      }
    }
    nrepairdevid_ = 0;
    if (has_strcollectip()) {
      if (strcollectip_ != &::google::protobuf::internal::kEmptyString) {
        strcollectip_->clear();
      }
    }
    dvrport_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_dvrusername()) {
      if (dvrusername_ != &::google::protobuf::internal::kEmptyString) {
        dvrusername_->clear();
      }
    }
    if (has_dvrpwd()) {
      if (dvrpwd_ != &::google::protobuf::internal::kEmptyString) {
        dvrpwd_->clear();
      }
    }
    ncollectchan_ = 0;
    if (has_strurl()) {
      if (strurl_ != &::google::protobuf::internal::kEmptyString) {
        strurl_->clear();
      }
    }
    if (has_screenshotsrc()) {
      if (screenshotsrc_ != &::google::protobuf::internal::kEmptyString) {
        screenshotsrc_->clear();
      }
    }
    if (has_dtbusinesstime()) {
      if (dtbusinesstime_ != &_default_dtbusinesstime_) {
        dtbusinesstime_->assign(_default_dtbusinesstime_);
      }
    }
    nrecordlocaltime_ = 0;
    nfileheadlen_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ncallertype_ = 0;
    if (has_strcallerid()) {
      if (strcallerid_ != &::google::protobuf::internal::kEmptyString) {
        strcallerid_->clear();
      }
    }
    nrepairtype_ = 0;
    nrepairtime_ = 0;
    nlinkorderid_ = 0;
    nlinktype_ = 0;
    nmanufacturertype_ = 0;
    nfilesize_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    ntaskid_ = 0;
    if (has_strip()) {
      if (strip_ != &::google::protobuf::internal::kEmptyString) {
        strip_->clear();
      }
    }
    if (has_strcloudip()) {
      if (strcloudip_ != &::google::protobuf::internal::kEmptyString) {
        strcloudip_->clear();
      }
    }
    ncloudport_ = 0;
    if (has_straccesskey()) {
      if (straccesskey_ != &::google::protobuf::internal::kEmptyString) {
        straccesskey_->clear();
      }
    }
    if (has_strsecretkey()) {
      if (strsecretkey_ != &::google::protobuf::internal::kEmptyString) {
        strsecretkey_->clear();
      }
    }
    if (has_strbucket()) {
      if (strbucket_ != &::google::protobuf::internal::kEmptyString) {
        strbucket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Records::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nCollectRegionId;
        break;
      }
      
      // optional int32 nCollectRegionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCollectRegionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncollectregionid_)));
          set_has_ncollectregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nUserID;
        break;
      }
      
      // optional int32 nUserID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nuserid_)));
          set_has_nuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strRecordName;
        break;
      }
      
      // optional string strRecordName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRecordName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strrecordname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strrecordname().data(), this->strrecordname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nRecordType;
        break;
      }
      
      // optional int32 nRecordType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRecordType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrecordtype_)));
          set_has_nrecordtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nRecordFileType;
        break;
      }
      
      // optional int32 nRecordFileType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRecordFileType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrecordfiletype_)));
          set_has_nrecordfiletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nRecordStatus;
        break;
      }
      
      // optional int32 nRecordStatus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRecordStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrecordstatus_)));
          set_has_nrecordstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_nUploadPercent;
        break;
      }
      
      // optional int32 nUploadPercent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nUploadPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nuploadpercent_)));
          set_has_nuploadpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_startTime;
        break;
      }
      
      // optional string startTime = 9 [default = "1970-01-01 00:00:00"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_endTime;
        break;
      }
      
      // optional string endTime = 10 [default = "1970-01-01 00:00:00"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nRecordBeginTime;
        break;
      }
      
      // optional int32 nRecordBeginTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRecordBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrecordbegintime_)));
          set_has_nrecordbegintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nRecordEndTime;
        break;
      }
      
      // optional int32 nRecordEndTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRecordEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrecordendtime_)));
          set_has_nrecordendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_streamNo;
        break;
      }
      
      // optional string streamNo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_streamNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->streamno().data(), this->streamno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_nRepairDevId;
        break;
      }
      
      // optional int32 nRepairDevId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRepairDevId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrepairdevid_)));
          set_has_nrepairdevid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_strCollectIp;
        break;
      }
      
      // optional string strCollectIp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCollectIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcollectip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcollectip().data(), this->strcollectip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dvrPort;
        break;
      }
      
      // optional int32 dvrPort = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dvrPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dvrport_)));
          set_has_dvrport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_dvrUserName;
        break;
      }
      
      // optional string dvrUserName = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dvrUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dvrusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dvrusername().data(), this->dvrusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_dvrPwd;
        break;
      }
      
      // optional string dvrPwd = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dvrPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dvrpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dvrpwd().data(), this->dvrpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_nCollectChan;
        break;
      }
      
      // optional int32 nCollectChan = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCollectChan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncollectchan_)));
          set_has_ncollectchan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_strUrl;
        break;
      }
      
      // optional string strUrl = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strurl().data(), this->strurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_screenshotSrc;
        break;
      }
      
      // optional string screenshotSrc = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screenshotSrc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_screenshotsrc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->screenshotsrc().data(), this->screenshotsrc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_dtBusinessTime;
        break;
      }
      
      // optional string dtBusinessTime = 22 [default = "1970-01-01 00:00:00"];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtBusinessTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dtbusinesstime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dtbusinesstime().data(), this->dtbusinesstime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_nRecordLocalTime;
        break;
      }
      
      // optional int32 nRecordLocalTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRecordLocalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrecordlocaltime_)));
          set_has_nrecordlocaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_nFileHeadLen;
        break;
      }
      
      // optional int32 nFileHeadLen = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFileHeadLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfileheadlen_)));
          set_has_nfileheadlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_nCallerType;
        break;
      }
      
      // optional int32 nCallerType = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCallerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncallertype_)));
          set_has_ncallertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_strCallerId;
        break;
      }
      
      // optional string strCallerId = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCallerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcallerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcallerid().data(), this->strcallerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_nRepairType;
        break;
      }
      
      // optional int32 nRepairType = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRepairType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrepairtype_)));
          set_has_nrepairtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_nRepairTime;
        break;
      }
      
      // optional int32 nRepairTime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRepairTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrepairtime_)));
          set_has_nrepairtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_nLinkOrderId;
        break;
      }
      
      // optional int32 nLinkOrderId = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLinkOrderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlinkorderid_)));
          set_has_nlinkorderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_nLinkType;
        break;
      }
      
      // optional int32 nLinkType = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLinkType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlinktype_)));
          set_has_nlinktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_nManufacturerType;
        break;
      }
      
      // optional int32 nManufacturerType = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nManufacturerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmanufacturertype_)));
          set_has_nmanufacturertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_nFileSize;
        break;
      }
      
      // optional int32 nFileSize = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfilesize_)));
          set_has_nfilesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_nTaskId;
        break;
      }
      
      // optional int32 nTaskId = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTaskId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntaskid_)));
          set_has_ntaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_strIp;
        break;
      }
      
      // optional string strIp = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strip().data(), this->strip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_strCloudIp;
        break;
      }
      
      // optional string strCloudIp = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCloudIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcloudip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcloudip().data(), this->strcloudip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_nCloudPort;
        break;
      }
      
      // optional int32 nCloudPort = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCloudPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncloudport_)));
          set_has_ncloudport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_strAccessKey;
        break;
      }
      
      // optional string strAccessKey = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAccessKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccesskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccesskey().data(), this->straccesskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_strSecretKey;
        break;
      }
      
      // optional string strSecretKey = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strSecretKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsecretkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strsecretkey().data(), this->strsecretkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_strBucket;
        break;
      }
      
      // optional string strBucket = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strBucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strbucket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strbucket().data(), this->strbucket().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Records::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 nCollectRegionId = 2;
  if (has_ncollectregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ncollectregionid(), output);
  }
  
  // optional int32 nUserID = 3;
  if (has_nuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nuserid(), output);
  }
  
  // optional string strRecordName = 4;
  if (has_strrecordname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordname().data(), this->strrecordname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strrecordname(), output);
  }
  
  // optional int32 nRecordType = 5;
  if (has_nrecordtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nrecordtype(), output);
  }
  
  // optional int32 nRecordFileType = 6;
  if (has_nrecordfiletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nrecordfiletype(), output);
  }
  
  // optional int32 nRecordStatus = 7;
  if (has_nrecordstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nrecordstatus(), output);
  }
  
  // optional int32 nUploadPercent = 8;
  if (has_nuploadpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nuploadpercent(), output);
  }
  
  // optional string startTime = 9 [default = "1970-01-01 00:00:00"];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->starttime(), output);
  }
  
  // optional string endTime = 10 [default = "1970-01-01 00:00:00"];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->endtime(), output);
  }
  
  // optional int32 nRecordBeginTime = 11;
  if (has_nrecordbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nrecordbegintime(), output);
  }
  
  // optional int32 nRecordEndTime = 12;
  if (has_nrecordendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->nrecordendtime(), output);
  }
  
  // optional string streamNo = 13;
  if (has_streamno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streamno().data(), this->streamno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->streamno(), output);
  }
  
  // optional int32 nRepairDevId = 14;
  if (has_nrepairdevid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->nrepairdevid(), output);
  }
  
  // optional string strCollectIp = 15;
  if (has_strcollectip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcollectip().data(), this->strcollectip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->strcollectip(), output);
  }
  
  // optional int32 dvrPort = 16;
  if (has_dvrport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->dvrport(), output);
  }
  
  // optional string dvrUserName = 17;
  if (has_dvrusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dvrusername().data(), this->dvrusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->dvrusername(), output);
  }
  
  // optional string dvrPwd = 18;
  if (has_dvrpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dvrpwd().data(), this->dvrpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->dvrpwd(), output);
  }
  
  // optional int32 nCollectChan = 19;
  if (has_ncollectchan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->ncollectchan(), output);
  }
  
  // optional string strUrl = 20;
  if (has_strurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->strurl(), output);
  }
  
  // optional string screenshotSrc = 21;
  if (has_screenshotsrc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->screenshotsrc().data(), this->screenshotsrc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->screenshotsrc(), output);
  }
  
  // optional string dtBusinessTime = 22 [default = "1970-01-01 00:00:00"];
  if (has_dtbusinesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dtbusinesstime().data(), this->dtbusinesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->dtbusinesstime(), output);
  }
  
  // optional int32 nRecordLocalTime = 23;
  if (has_nrecordlocaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->nrecordlocaltime(), output);
  }
  
  // optional int32 nFileHeadLen = 24;
  if (has_nfileheadlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->nfileheadlen(), output);
  }
  
  // optional int32 nCallerType = 25;
  if (has_ncallertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ncallertype(), output);
  }
  
  // optional string strCallerId = 26;
  if (has_strcallerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcallerid().data(), this->strcallerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->strcallerid(), output);
  }
  
  // optional int32 nRepairType = 27;
  if (has_nrepairtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->nrepairtype(), output);
  }
  
  // optional int32 nRepairTime = 28;
  if (has_nrepairtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->nrepairtime(), output);
  }
  
  // optional int32 nLinkOrderId = 29;
  if (has_nlinkorderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->nlinkorderid(), output);
  }
  
  // optional int32 nLinkType = 30;
  if (has_nlinktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->nlinktype(), output);
  }
  
  // optional int32 nManufacturerType = 31;
  if (has_nmanufacturertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->nmanufacturertype(), output);
  }
  
  // optional int32 nFileSize = 32;
  if (has_nfilesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->nfilesize(), output);
  }
  
  // optional int32 nTaskId = 33;
  if (has_ntaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->ntaskid(), output);
  }
  
  // optional string strIp = 34;
  if (has_strip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strip().data(), this->strip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->strip(), output);
  }
  
  // optional string strCloudIp = 35;
  if (has_strcloudip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcloudip().data(), this->strcloudip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->strcloudip(), output);
  }
  
  // optional int32 nCloudPort = 36;
  if (has_ncloudport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->ncloudport(), output);
  }
  
  // optional string strAccessKey = 37;
  if (has_straccesskey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccesskey().data(), this->straccesskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->straccesskey(), output);
  }
  
  // optional string strSecretKey = 38;
  if (has_strsecretkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsecretkey().data(), this->strsecretkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->strsecretkey(), output);
  }
  
  // optional string strBucket = 39;
  if (has_strbucket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbucket().data(), this->strbucket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->strbucket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Records::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 nCollectRegionId = 2;
  if (has_ncollectregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ncollectregionid(), target);
  }
  
  // optional int32 nUserID = 3;
  if (has_nuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nuserid(), target);
  }
  
  // optional string strRecordName = 4;
  if (has_strrecordname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordname().data(), this->strrecordname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strrecordname(), target);
  }
  
  // optional int32 nRecordType = 5;
  if (has_nrecordtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nrecordtype(), target);
  }
  
  // optional int32 nRecordFileType = 6;
  if (has_nrecordfiletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nrecordfiletype(), target);
  }
  
  // optional int32 nRecordStatus = 7;
  if (has_nrecordstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nrecordstatus(), target);
  }
  
  // optional int32 nUploadPercent = 8;
  if (has_nuploadpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nuploadpercent(), target);
  }
  
  // optional string startTime = 9 [default = "1970-01-01 00:00:00"];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->starttime(), target);
  }
  
  // optional string endTime = 10 [default = "1970-01-01 00:00:00"];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->endtime(), target);
  }
  
  // optional int32 nRecordBeginTime = 11;
  if (has_nrecordbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nrecordbegintime(), target);
  }
  
  // optional int32 nRecordEndTime = 12;
  if (has_nrecordendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->nrecordendtime(), target);
  }
  
  // optional string streamNo = 13;
  if (has_streamno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streamno().data(), this->streamno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->streamno(), target);
  }
  
  // optional int32 nRepairDevId = 14;
  if (has_nrepairdevid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->nrepairdevid(), target);
  }
  
  // optional string strCollectIp = 15;
  if (has_strcollectip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcollectip().data(), this->strcollectip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->strcollectip(), target);
  }
  
  // optional int32 dvrPort = 16;
  if (has_dvrport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->dvrport(), target);
  }
  
  // optional string dvrUserName = 17;
  if (has_dvrusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dvrusername().data(), this->dvrusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->dvrusername(), target);
  }
  
  // optional string dvrPwd = 18;
  if (has_dvrpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dvrpwd().data(), this->dvrpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->dvrpwd(), target);
  }
  
  // optional int32 nCollectChan = 19;
  if (has_ncollectchan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->ncollectchan(), target);
  }
  
  // optional string strUrl = 20;
  if (has_strurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->strurl(), target);
  }
  
  // optional string screenshotSrc = 21;
  if (has_screenshotsrc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->screenshotsrc().data(), this->screenshotsrc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->screenshotsrc(), target);
  }
  
  // optional string dtBusinessTime = 22 [default = "1970-01-01 00:00:00"];
  if (has_dtbusinesstime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dtbusinesstime().data(), this->dtbusinesstime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->dtbusinesstime(), target);
  }
  
  // optional int32 nRecordLocalTime = 23;
  if (has_nrecordlocaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->nrecordlocaltime(), target);
  }
  
  // optional int32 nFileHeadLen = 24;
  if (has_nfileheadlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->nfileheadlen(), target);
  }
  
  // optional int32 nCallerType = 25;
  if (has_ncallertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->ncallertype(), target);
  }
  
  // optional string strCallerId = 26;
  if (has_strcallerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcallerid().data(), this->strcallerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->strcallerid(), target);
  }
  
  // optional int32 nRepairType = 27;
  if (has_nrepairtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->nrepairtype(), target);
  }
  
  // optional int32 nRepairTime = 28;
  if (has_nrepairtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->nrepairtime(), target);
  }
  
  // optional int32 nLinkOrderId = 29;
  if (has_nlinkorderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->nlinkorderid(), target);
  }
  
  // optional int32 nLinkType = 30;
  if (has_nlinktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->nlinktype(), target);
  }
  
  // optional int32 nManufacturerType = 31;
  if (has_nmanufacturertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->nmanufacturertype(), target);
  }
  
  // optional int32 nFileSize = 32;
  if (has_nfilesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->nfilesize(), target);
  }
  
  // optional int32 nTaskId = 33;
  if (has_ntaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->ntaskid(), target);
  }
  
  // optional string strIp = 34;
  if (has_strip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strip().data(), this->strip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->strip(), target);
  }
  
  // optional string strCloudIp = 35;
  if (has_strcloudip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcloudip().data(), this->strcloudip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->strcloudip(), target);
  }
  
  // optional int32 nCloudPort = 36;
  if (has_ncloudport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->ncloudport(), target);
  }
  
  // optional string strAccessKey = 37;
  if (has_straccesskey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccesskey().data(), this->straccesskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->straccesskey(), target);
  }
  
  // optional string strSecretKey = 38;
  if (has_strsecretkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsecretkey().data(), this->strsecretkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->strsecretkey(), target);
  }
  
  // optional string strBucket = 39;
  if (has_strbucket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbucket().data(), this->strbucket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->strbucket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Records::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 nCollectRegionId = 2;
    if (has_ncollectregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncollectregionid());
    }
    
    // optional int32 nUserID = 3;
    if (has_nuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nuserid());
    }
    
    // optional string strRecordName = 4;
    if (has_strrecordname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strrecordname());
    }
    
    // optional int32 nRecordType = 5;
    if (has_nrecordtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrecordtype());
    }
    
    // optional int32 nRecordFileType = 6;
    if (has_nrecordfiletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrecordfiletype());
    }
    
    // optional int32 nRecordStatus = 7;
    if (has_nrecordstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrecordstatus());
    }
    
    // optional int32 nUploadPercent = 8;
    if (has_nuploadpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nuploadpercent());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string startTime = 9 [default = "1970-01-01 00:00:00"];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }
    
    // optional string endTime = 10 [default = "1970-01-01 00:00:00"];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }
    
    // optional int32 nRecordBeginTime = 11;
    if (has_nrecordbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrecordbegintime());
    }
    
    // optional int32 nRecordEndTime = 12;
    if (has_nrecordendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrecordendtime());
    }
    
    // optional string streamNo = 13;
    if (has_streamno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamno());
    }
    
    // optional int32 nRepairDevId = 14;
    if (has_nrepairdevid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrepairdevid());
    }
    
    // optional string strCollectIp = 15;
    if (has_strcollectip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcollectip());
    }
    
    // optional int32 dvrPort = 16;
    if (has_dvrport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dvrport());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string dvrUserName = 17;
    if (has_dvrusername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dvrusername());
    }
    
    // optional string dvrPwd = 18;
    if (has_dvrpwd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dvrpwd());
    }
    
    // optional int32 nCollectChan = 19;
    if (has_ncollectchan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncollectchan());
    }
    
    // optional string strUrl = 20;
    if (has_strurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strurl());
    }
    
    // optional string screenshotSrc = 21;
    if (has_screenshotsrc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->screenshotsrc());
    }
    
    // optional string dtBusinessTime = 22 [default = "1970-01-01 00:00:00"];
    if (has_dtbusinesstime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dtbusinesstime());
    }
    
    // optional int32 nRecordLocalTime = 23;
    if (has_nrecordlocaltime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrecordlocaltime());
    }
    
    // optional int32 nFileHeadLen = 24;
    if (has_nfileheadlen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nfileheadlen());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 nCallerType = 25;
    if (has_ncallertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncallertype());
    }
    
    // optional string strCallerId = 26;
    if (has_strcallerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcallerid());
    }
    
    // optional int32 nRepairType = 27;
    if (has_nrepairtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrepairtype());
    }
    
    // optional int32 nRepairTime = 28;
    if (has_nrepairtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrepairtime());
    }
    
    // optional int32 nLinkOrderId = 29;
    if (has_nlinkorderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlinkorderid());
    }
    
    // optional int32 nLinkType = 30;
    if (has_nlinktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlinktype());
    }
    
    // optional int32 nManufacturerType = 31;
    if (has_nmanufacturertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmanufacturertype());
    }
    
    // optional int32 nFileSize = 32;
    if (has_nfilesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nfilesize());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 nTaskId = 33;
    if (has_ntaskid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntaskid());
    }
    
    // optional string strIp = 34;
    if (has_strip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strip());
    }
    
    // optional string strCloudIp = 35;
    if (has_strcloudip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcloudip());
    }
    
    // optional int32 nCloudPort = 36;
    if (has_ncloudport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncloudport());
    }
    
    // optional string strAccessKey = 37;
    if (has_straccesskey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccesskey());
    }
    
    // optional string strSecretKey = 38;
    if (has_strsecretkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsecretkey());
    }
    
    // optional string strBucket = 39;
    if (has_strbucket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strbucket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Records::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Records* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Records*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Records::MergeFrom(const Records& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ncollectregionid()) {
      set_ncollectregionid(from.ncollectregionid());
    }
    if (from.has_nuserid()) {
      set_nuserid(from.nuserid());
    }
    if (from.has_strrecordname()) {
      set_strrecordname(from.strrecordname());
    }
    if (from.has_nrecordtype()) {
      set_nrecordtype(from.nrecordtype());
    }
    if (from.has_nrecordfiletype()) {
      set_nrecordfiletype(from.nrecordfiletype());
    }
    if (from.has_nrecordstatus()) {
      set_nrecordstatus(from.nrecordstatus());
    }
    if (from.has_nuploadpercent()) {
      set_nuploadpercent(from.nuploadpercent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_nrecordbegintime()) {
      set_nrecordbegintime(from.nrecordbegintime());
    }
    if (from.has_nrecordendtime()) {
      set_nrecordendtime(from.nrecordendtime());
    }
    if (from.has_streamno()) {
      set_streamno(from.streamno());
    }
    if (from.has_nrepairdevid()) {
      set_nrepairdevid(from.nrepairdevid());
    }
    if (from.has_strcollectip()) {
      set_strcollectip(from.strcollectip());
    }
    if (from.has_dvrport()) {
      set_dvrport(from.dvrport());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dvrusername()) {
      set_dvrusername(from.dvrusername());
    }
    if (from.has_dvrpwd()) {
      set_dvrpwd(from.dvrpwd());
    }
    if (from.has_ncollectchan()) {
      set_ncollectchan(from.ncollectchan());
    }
    if (from.has_strurl()) {
      set_strurl(from.strurl());
    }
    if (from.has_screenshotsrc()) {
      set_screenshotsrc(from.screenshotsrc());
    }
    if (from.has_dtbusinesstime()) {
      set_dtbusinesstime(from.dtbusinesstime());
    }
    if (from.has_nrecordlocaltime()) {
      set_nrecordlocaltime(from.nrecordlocaltime());
    }
    if (from.has_nfileheadlen()) {
      set_nfileheadlen(from.nfileheadlen());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ncallertype()) {
      set_ncallertype(from.ncallertype());
    }
    if (from.has_strcallerid()) {
      set_strcallerid(from.strcallerid());
    }
    if (from.has_nrepairtype()) {
      set_nrepairtype(from.nrepairtype());
    }
    if (from.has_nrepairtime()) {
      set_nrepairtime(from.nrepairtime());
    }
    if (from.has_nlinkorderid()) {
      set_nlinkorderid(from.nlinkorderid());
    }
    if (from.has_nlinktype()) {
      set_nlinktype(from.nlinktype());
    }
    if (from.has_nmanufacturertype()) {
      set_nmanufacturertype(from.nmanufacturertype());
    }
    if (from.has_nfilesize()) {
      set_nfilesize(from.nfilesize());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ntaskid()) {
      set_ntaskid(from.ntaskid());
    }
    if (from.has_strip()) {
      set_strip(from.strip());
    }
    if (from.has_strcloudip()) {
      set_strcloudip(from.strcloudip());
    }
    if (from.has_ncloudport()) {
      set_ncloudport(from.ncloudport());
    }
    if (from.has_straccesskey()) {
      set_straccesskey(from.straccesskey());
    }
    if (from.has_strsecretkey()) {
      set_strsecretkey(from.strsecretkey());
    }
    if (from.has_strbucket()) {
      set_strbucket(from.strbucket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Records::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Records::CopyFrom(const Records& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Records::IsInitialized() const {
  
  return true;
}

void Records::Swap(Records* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ncollectregionid_, other->ncollectregionid_);
    std::swap(nuserid_, other->nuserid_);
    std::swap(strrecordname_, other->strrecordname_);
    std::swap(nrecordtype_, other->nrecordtype_);
    std::swap(nrecordfiletype_, other->nrecordfiletype_);
    std::swap(nrecordstatus_, other->nrecordstatus_);
    std::swap(nuploadpercent_, other->nuploadpercent_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(nrecordbegintime_, other->nrecordbegintime_);
    std::swap(nrecordendtime_, other->nrecordendtime_);
    std::swap(streamno_, other->streamno_);
    std::swap(nrepairdevid_, other->nrepairdevid_);
    std::swap(strcollectip_, other->strcollectip_);
    std::swap(dvrport_, other->dvrport_);
    std::swap(dvrusername_, other->dvrusername_);
    std::swap(dvrpwd_, other->dvrpwd_);
    std::swap(ncollectchan_, other->ncollectchan_);
    std::swap(strurl_, other->strurl_);
    std::swap(screenshotsrc_, other->screenshotsrc_);
    std::swap(dtbusinesstime_, other->dtbusinesstime_);
    std::swap(nrecordlocaltime_, other->nrecordlocaltime_);
    std::swap(nfileheadlen_, other->nfileheadlen_);
    std::swap(ncallertype_, other->ncallertype_);
    std::swap(strcallerid_, other->strcallerid_);
    std::swap(nrepairtype_, other->nrepairtype_);
    std::swap(nrepairtime_, other->nrepairtime_);
    std::swap(nlinkorderid_, other->nlinkorderid_);
    std::swap(nlinktype_, other->nlinktype_);
    std::swap(nmanufacturertype_, other->nmanufacturertype_);
    std::swap(nfilesize_, other->nfilesize_);
    std::swap(ntaskid_, other->ntaskid_);
    std::swap(strip_, other->strip_);
    std::swap(strcloudip_, other->strcloudip_);
    std::swap(ncloudport_, other->ncloudport_);
    std::swap(straccesskey_, other->straccesskey_);
    std::swap(strsecretkey_, other->strsecretkey_);
    std::swap(strbucket_, other->strbucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Records::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Records_descriptor_;
  metadata.reflection = Records_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRecords::kCmdFieldNumber;
const int ReqRecords::kIdFieldNumber;
const int ReqRecords::kNRecordStatusFieldNumber;
const int ReqRecords::kNUpLoadPercentFieldNumber;
const int ReqRecords::kNTaskIdFieldNumber;
const int ReqRecords::kStreamNoFieldNumber;
const int ReqRecords::kRtspPathFieldNumber;
const int ReqRecords::kNFileSizeFieldNumber;
const int ReqRecords::kErrorMsgFieldNumber;
const int ReqRecords::kStartTimeFieldNumber;
const int ReqRecords::kEndTimeFieldNumber;
#endif  // !_MSC_VER

ReqRecords::ReqRecords()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRecords::InitAsDefaultInstance() {
}

ReqRecords::ReqRecords(const ReqRecords& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRecords::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  id_ = 0;
  nrecordstatus_ = 0;
  nuploadpercent_ = 0;
  ntaskid_ = 0;
  streamno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rtsppath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nfilesize_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRecords::~ReqRecords() {
  SharedDtor();
}

void ReqRecords::SharedDtor() {
  if (streamno_ != &::google::protobuf::internal::kEmptyString) {
    delete streamno_;
  }
  if (rtsppath_ != &::google::protobuf::internal::kEmptyString) {
    delete rtsppath_;
  }
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (this != default_instance_) {
  }
}

void ReqRecords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRecords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRecords_descriptor_;
}

const ReqRecords& ReqRecords::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fRecords_2eproto();  return *default_instance_;
}

ReqRecords* ReqRecords::default_instance_ = NULL;

ReqRecords* ReqRecords::New() const {
  return new ReqRecords;
}

void ReqRecords::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    id_ = 0;
    nrecordstatus_ = 0;
    nuploadpercent_ = 0;
    ntaskid_ = 0;
    if (has_streamno()) {
      if (streamno_ != &::google::protobuf::internal::kEmptyString) {
        streamno_->clear();
      }
    }
    if (has_rtsppath()) {
      if (rtsppath_ != &::google::protobuf::internal::kEmptyString) {
        rtsppath_->clear();
      }
    }
    nfilesize_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::kEmptyString) {
        starttime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::kEmptyString) {
        endtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRecords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nRecordStatus;
        break;
      }
      
      // optional int32 nRecordStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRecordStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrecordstatus_)));
          set_has_nrecordstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nUpLoadPercent;
        break;
      }
      
      // optional int32 nUpLoadPercent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nUpLoadPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nuploadpercent_)));
          set_has_nuploadpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nTaskId;
        break;
      }
      
      // optional int32 nTaskId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTaskId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntaskid_)));
          set_has_ntaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_streamNo;
        break;
      }
      
      // optional string streamNo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_streamNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->streamno().data(), this->streamno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rtspPath;
        break;
      }
      
      // optional string rtspPath = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rtspPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtsppath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rtsppath().data(), this->rtsppath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_nFileSize;
        break;
      }
      
      // optional int32 nFileSize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfilesize_)));
          set_has_nfilesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_startTime;
        break;
      }
      
      // optional string startTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_endTime;
        break;
      }
      
      // optional string endTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRecords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 nRecordStatus = 3;
  if (has_nrecordstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nrecordstatus(), output);
  }
  
  // optional int32 nUpLoadPercent = 4;
  if (has_nuploadpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nuploadpercent(), output);
  }
  
  // optional int32 nTaskId = 5;
  if (has_ntaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ntaskid(), output);
  }
  
  // optional string streamNo = 6;
  if (has_streamno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streamno().data(), this->streamno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->streamno(), output);
  }
  
  // optional string rtspPath = 7;
  if (has_rtsppath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rtsppath().data(), this->rtsppath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->rtsppath(), output);
  }
  
  // optional int32 nFileSize = 8;
  if (has_nfilesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nfilesize(), output);
  }
  
  // optional string errorMsg = 9;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->errormsg(), output);
  }
  
  // optional string startTime = 10;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->starttime(), output);
  }
  
  // optional string endTime = 11;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->endtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRecords::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 nRecordStatus = 3;
  if (has_nrecordstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nrecordstatus(), target);
  }
  
  // optional int32 nUpLoadPercent = 4;
  if (has_nuploadpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nuploadpercent(), target);
  }
  
  // optional int32 nTaskId = 5;
  if (has_ntaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ntaskid(), target);
  }
  
  // optional string streamNo = 6;
  if (has_streamno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streamno().data(), this->streamno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->streamno(), target);
  }
  
  // optional string rtspPath = 7;
  if (has_rtsppath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rtsppath().data(), this->rtsppath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rtsppath(), target);
  }
  
  // optional int32 nFileSize = 8;
  if (has_nfilesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nfilesize(), target);
  }
  
  // optional string errorMsg = 9;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->errormsg(), target);
  }
  
  // optional string startTime = 10;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->starttime(), target);
  }
  
  // optional string endTime = 11;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->endtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRecords::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 nRecordStatus = 3;
    if (has_nrecordstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrecordstatus());
    }
    
    // optional int32 nUpLoadPercent = 4;
    if (has_nuploadpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nuploadpercent());
    }
    
    // optional int32 nTaskId = 5;
    if (has_ntaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntaskid());
    }
    
    // optional string streamNo = 6;
    if (has_streamno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streamno());
    }
    
    // optional string rtspPath = 7;
    if (has_rtsppath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rtsppath());
    }
    
    // optional int32 nFileSize = 8;
    if (has_nfilesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nfilesize());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string errorMsg = 9;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
    // optional string startTime = 10;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }
    
    // optional string endTime = 11;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRecords::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRecords* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRecords*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRecords::MergeFrom(const ReqRecords& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nrecordstatus()) {
      set_nrecordstatus(from.nrecordstatus());
    }
    if (from.has_nuploadpercent()) {
      set_nuploadpercent(from.nuploadpercent());
    }
    if (from.has_ntaskid()) {
      set_ntaskid(from.ntaskid());
    }
    if (from.has_streamno()) {
      set_streamno(from.streamno());
    }
    if (from.has_rtsppath()) {
      set_rtsppath(from.rtsppath());
    }
    if (from.has_nfilesize()) {
      set_nfilesize(from.nfilesize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRecords::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRecords::CopyFrom(const ReqRecords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRecords::IsInitialized() const {
  
  return true;
}

void ReqRecords::Swap(ReqRecords* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(id_, other->id_);
    std::swap(nrecordstatus_, other->nrecordstatus_);
    std::swap(nuploadpercent_, other->nuploadpercent_);
    std::swap(ntaskid_, other->ntaskid_);
    std::swap(streamno_, other->streamno_);
    std::swap(rtsppath_, other->rtsppath_);
    std::swap(nfilesize_, other->nfilesize_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRecords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRecords_descriptor_;
  metadata.reflection = ReqRecords_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordsList::kCmdFieldNumber;
const int RecordsList::kRecordFieldNumber;
#endif  // !_MSC_VER

RecordsList::RecordsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordsList::InitAsDefaultInstance() {
}

RecordsList::RecordsList(const RecordsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordsList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordsList::~RecordsList() {
  SharedDtor();
}

void RecordsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordsList_descriptor_;
}

const RecordsList& RecordsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fRecords_2eproto();  return *default_instance_;
}

RecordsList* RecordsList::default_instance_ = NULL;

RecordsList* RecordsList::New() const {
  return new RecordsList;
}

void RecordsList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }
      
      // repeated .cms_8120.Records record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // repeated .cms_8120.Records record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // repeated .cms_8120.Records record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordsList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
  }
  // repeated .cms_8120.Records record = 2;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordsList::MergeFrom(const RecordsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordsList::CopyFrom(const RecordsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordsList::IsInitialized() const {
  
  return true;
}

void RecordsList::Swap(RecordsList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordsList_descriptor_;
  metadata.reflection = RecordsList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
