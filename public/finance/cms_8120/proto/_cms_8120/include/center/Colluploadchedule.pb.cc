// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center/Colluploadchedule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* Colluploadschedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Colluploadschedule_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_2fColluploadchedule_2eproto() {
  protobuf_AddDesc_center_2fColluploadchedule_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center/Colluploadchedule.proto");
  GOOGLE_CHECK(file != NULL);
  Colluploadschedule_descriptor_ = file->message_type(0);
  static const int Colluploadschedule_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colluploadschedule, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colluploadschedule, collid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colluploadschedule, stime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colluploadschedule, etime_),
  };
  Colluploadschedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Colluploadschedule_descriptor_,
      Colluploadschedule::default_instance_,
      Colluploadschedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colluploadschedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colluploadschedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Colluploadschedule));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_2fColluploadchedule_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Colluploadschedule_descriptor_, &Colluploadschedule::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_2fColluploadchedule_2eproto() {
  delete Colluploadschedule::default_instance_;
  delete Colluploadschedule_reflection_;
}

void protobuf_AddDesc_center_2fColluploadchedule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036center/Colluploadchedule.proto\022\010cms_81"
    "20\"N\n\022Colluploadschedule\022\n\n\002id\030\001 \001(\005\022\016\n\006"
    "CollId\030\002 \001(\005\022\r\n\005stime\030\003 \001(\t\022\r\n\005etime\030\004 \001"
    "(\tBC\n(com.hikvision.finance.fms.cms.hpp."
    "centerB\027ColluploadscheduleProto", 191);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center/Colluploadchedule.proto", &protobuf_RegisterTypes);
  Colluploadschedule::default_instance_ = new Colluploadschedule();
  Colluploadschedule::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_2fColluploadchedule_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_2fColluploadchedule_2eproto {
  StaticDescriptorInitializer_center_2fColluploadchedule_2eproto() {
    protobuf_AddDesc_center_2fColluploadchedule_2eproto();
  }
} static_descriptor_initializer_center_2fColluploadchedule_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Colluploadschedule::kIdFieldNumber;
const int Colluploadschedule::kCollIdFieldNumber;
const int Colluploadschedule::kStimeFieldNumber;
const int Colluploadschedule::kEtimeFieldNumber;
#endif  // !_MSC_VER

Colluploadschedule::Colluploadschedule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Colluploadschedule::InitAsDefaultInstance() {
}

Colluploadschedule::Colluploadschedule(const Colluploadschedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Colluploadschedule::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  collid_ = 0;
  stime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  etime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Colluploadschedule::~Colluploadschedule() {
  SharedDtor();
}

void Colluploadschedule::SharedDtor() {
  if (stime_ != &::google::protobuf::internal::kEmptyString) {
    delete stime_;
  }
  if (etime_ != &::google::protobuf::internal::kEmptyString) {
    delete etime_;
  }
  if (this != default_instance_) {
  }
}

void Colluploadschedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Colluploadschedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Colluploadschedule_descriptor_;
}

const Colluploadschedule& Colluploadschedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fColluploadchedule_2eproto();  return *default_instance_;
}

Colluploadschedule* Colluploadschedule::default_instance_ = NULL;

Colluploadschedule* Colluploadschedule::New() const {
  return new Colluploadschedule;
}

void Colluploadschedule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    collid_ = 0;
    if (has_stime()) {
      if (stime_ != &::google::protobuf::internal::kEmptyString) {
        stime_->clear();
      }
    }
    if (has_etime()) {
      if (etime_ != &::google::protobuf::internal::kEmptyString) {
        etime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Colluploadschedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CollId;
        break;
      }
      
      // optional int32 CollId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CollId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collid_)));
          set_has_collid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stime;
        break;
      }
      
      // optional string stime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stime().data(), this->stime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_etime;
        break;
      }
      
      // optional string etime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_etime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_etime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->etime().data(), this->etime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Colluploadschedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 CollId = 2;
  if (has_collid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->collid(), output);
  }
  
  // optional string stime = 3;
  if (has_stime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stime().data(), this->stime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stime(), output);
  }
  
  // optional string etime = 4;
  if (has_etime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->etime().data(), this->etime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->etime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Colluploadschedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 CollId = 2;
  if (has_collid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->collid(), target);
  }
  
  // optional string stime = 3;
  if (has_stime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stime().data(), this->stime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stime(), target);
  }
  
  // optional string etime = 4;
  if (has_etime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->etime().data(), this->etime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->etime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Colluploadschedule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 CollId = 2;
    if (has_collid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collid());
    }
    
    // optional string stime = 3;
    if (has_stime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stime());
    }
    
    // optional string etime = 4;
    if (has_etime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->etime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Colluploadschedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Colluploadschedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Colluploadschedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Colluploadschedule::MergeFrom(const Colluploadschedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_collid()) {
      set_collid(from.collid());
    }
    if (from.has_stime()) {
      set_stime(from.stime());
    }
    if (from.has_etime()) {
      set_etime(from.etime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Colluploadschedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Colluploadschedule::CopyFrom(const Colluploadschedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Colluploadschedule::IsInitialized() const {
  
  return true;
}

void Colluploadschedule::Swap(Colluploadschedule* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(collid_, other->collid_);
    std::swap(stime_, other->stime_);
    std::swap(etime_, other->etime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Colluploadschedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Colluploadschedule_descriptor_;
  metadata.reflection = Colluploadschedule_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
