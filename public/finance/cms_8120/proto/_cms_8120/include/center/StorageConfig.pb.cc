// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center/StorageConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* ReqStorageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqStorageConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspStorageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspStorageConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_2fStorageConfig_2eproto() {
  protobuf_AddDesc_center_2fStorageConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center/StorageConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ReqStorageConfig_descriptor_ = file->message_type(0);
  static const int ReqStorageConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStorageConfig, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStorageConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStorageConfig, port_),
  };
  ReqStorageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqStorageConfig_descriptor_,
      ReqStorageConfig::default_instance_,
      ReqStorageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStorageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStorageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqStorageConfig));
  RspStorageConfig_descriptor_ = file->message_type(1);
  static const int RspStorageConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, stoptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, storageip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, storageport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, storageusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, storagepwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, poolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, device_code_),
  };
  RspStorageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspStorageConfig_descriptor_,
      RspStorageConfig::default_instance_,
      RspStorageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStorageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspStorageConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_2fStorageConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqStorageConfig_descriptor_, &ReqStorageConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspStorageConfig_descriptor_, &RspStorageConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_2fStorageConfig_2eproto() {
  delete ReqStorageConfig::default_instance_;
  delete ReqStorageConfig_reflection_;
  delete RspStorageConfig::default_instance_;
  delete RspStorageConfig_reflection_;
}

void protobuf_AddDesc_center_2fStorageConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_type_2fcmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032center/StorageConfig.proto\022\010cms_8120\032\016"
    "type/cmd.proto\"9\n\020ReqStorageConfig\022\013\n\003cm"
    "d\030\001 \001(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\"\232\002\n\020Rs"
    "pStorageConfig\022\013\n\003cmd\030\001 \001(\005\022\016\n\006result\030\002 "
    "\001(\005\022\014\n\004type\030\003 \001(\005\022&\n\tstartTime\030\004 \001(\t:\02319"
    "70-01-01 00:00:00\022%\n\010stopTime\030\005 \001(\t:\023197"
    "0-01-01 00:00:00\022\022\n\ndevicetype\030\006 \001(\005\022\021\n\t"
    "storageIp\030\007 \001(\t\022\023\n\013storagePort\030\010 \001(\005\022\027\n\017"
    "storageUserName\030\t \001(\t\022\022\n\nstoragePwd\030\n \001("
    "\t\022\016\n\006poolid\030\013 \001(\005\022\023\n\013device_code\030\014 \001(\t2n"
    "\n\032ModifyStorageConfigService\022P\n\026QuerySto"
    "rageConfiginfo\022\032.cms_8120.ReqStorageConf"
    "ig\032\032.cms_8120.RspStorageConfigBA\n(com.hi"
    "kvision.finance.fms.cms.hpp.centerB\022Stor"
    "ageConfigProto\210\001\001", 577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center/StorageConfig.proto", &protobuf_RegisterTypes);
  ReqStorageConfig::default_instance_ = new ReqStorageConfig();
  RspStorageConfig::default_instance_ = new RspStorageConfig();
  ReqStorageConfig::default_instance_->InitAsDefaultInstance();
  RspStorageConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_2fStorageConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_2fStorageConfig_2eproto {
  StaticDescriptorInitializer_center_2fStorageConfig_2eproto() {
    protobuf_AddDesc_center_2fStorageConfig_2eproto();
  }
} static_descriptor_initializer_center_2fStorageConfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReqStorageConfig::kCmdFieldNumber;
const int ReqStorageConfig::kIpFieldNumber;
const int ReqStorageConfig::kPortFieldNumber;
#endif  // !_MSC_VER

ReqStorageConfig::ReqStorageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqStorageConfig::InitAsDefaultInstance() {
}

ReqStorageConfig::ReqStorageConfig(const ReqStorageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqStorageConfig::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqStorageConfig::~ReqStorageConfig() {
  SharedDtor();
}

void ReqStorageConfig::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ReqStorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqStorageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqStorageConfig_descriptor_;
}

const ReqStorageConfig& ReqStorageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fStorageConfig_2eproto();  return *default_instance_;
}

ReqStorageConfig* ReqStorageConfig::default_instance_ = NULL;

ReqStorageConfig* ReqStorageConfig::New() const {
  return new ReqStorageConfig;
}

void ReqStorageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqStorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqStorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }
  
  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqStorageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }
  
  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqStorageConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqStorageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqStorageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqStorageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqStorageConfig::MergeFrom(const ReqStorageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqStorageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqStorageConfig::CopyFrom(const ReqStorageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqStorageConfig::IsInitialized() const {
  
  return true;
}

void ReqStorageConfig::Swap(ReqStorageConfig* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqStorageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqStorageConfig_descriptor_;
  metadata.reflection = ReqStorageConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RspStorageConfig::_default_starttime_("1970-01-01 00:00:00");
const ::std::string RspStorageConfig::_default_stoptime_("1970-01-01 00:00:00");
#ifndef _MSC_VER
const int RspStorageConfig::kCmdFieldNumber;
const int RspStorageConfig::kResultFieldNumber;
const int RspStorageConfig::kTypeFieldNumber;
const int RspStorageConfig::kStartTimeFieldNumber;
const int RspStorageConfig::kStopTimeFieldNumber;
const int RspStorageConfig::kDevicetypeFieldNumber;
const int RspStorageConfig::kStorageIpFieldNumber;
const int RspStorageConfig::kStoragePortFieldNumber;
const int RspStorageConfig::kStorageUserNameFieldNumber;
const int RspStorageConfig::kStoragePwdFieldNumber;
const int RspStorageConfig::kPoolidFieldNumber;
const int RspStorageConfig::kDeviceCodeFieldNumber;
#endif  // !_MSC_VER

RspStorageConfig::RspStorageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspStorageConfig::InitAsDefaultInstance() {
}

RspStorageConfig::RspStorageConfig(const RspStorageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspStorageConfig::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  result_ = 0;
  type_ = 0;
  starttime_ = const_cast< ::std::string*>(&_default_starttime_);
  stoptime_ = const_cast< ::std::string*>(&_default_stoptime_);
  devicetype_ = 0;
  storageip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  storageport_ = 0;
  storageusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  storagepwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  poolid_ = 0;
  device_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspStorageConfig::~RspStorageConfig() {
  SharedDtor();
}

void RspStorageConfig::SharedDtor() {
  if (starttime_ != &_default_starttime_) {
    delete starttime_;
  }
  if (stoptime_ != &_default_stoptime_) {
    delete stoptime_;
  }
  if (storageip_ != &::google::protobuf::internal::kEmptyString) {
    delete storageip_;
  }
  if (storageusername_ != &::google::protobuf::internal::kEmptyString) {
    delete storageusername_;
  }
  if (storagepwd_ != &::google::protobuf::internal::kEmptyString) {
    delete storagepwd_;
  }
  if (device_code_ != &::google::protobuf::internal::kEmptyString) {
    delete device_code_;
  }
  if (this != default_instance_) {
  }
}

void RspStorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspStorageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspStorageConfig_descriptor_;
}

const RspStorageConfig& RspStorageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fStorageConfig_2eproto();  return *default_instance_;
}

RspStorageConfig* RspStorageConfig::default_instance_ = NULL;

RspStorageConfig* RspStorageConfig::New() const {
  return new RspStorageConfig;
}

void RspStorageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    result_ = 0;
    type_ = 0;
    if (has_starttime()) {
      if (starttime_ != &_default_starttime_) {
        starttime_->assign(_default_starttime_);
      }
    }
    if (has_stoptime()) {
      if (stoptime_ != &_default_stoptime_) {
        stoptime_->assign(_default_stoptime_);
      }
    }
    devicetype_ = 0;
    if (has_storageip()) {
      if (storageip_ != &::google::protobuf::internal::kEmptyString) {
        storageip_->clear();
      }
    }
    storageport_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_storageusername()) {
      if (storageusername_ != &::google::protobuf::internal::kEmptyString) {
        storageusername_->clear();
      }
    }
    if (has_storagepwd()) {
      if (storagepwd_ != &::google::protobuf::internal::kEmptyString) {
        storagepwd_->clear();
      }
    }
    poolid_ = 0;
    if (has_device_code()) {
      if (device_code_ != &::google::protobuf::internal::kEmptyString) {
        device_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspStorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_startTime;
        break;
      }
      
      // optional string startTime = 4 [default = "1970-01-01 00:00:00"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stopTime;
        break;
      }
      
      // optional string stopTime = 5 [default = "1970-01-01 00:00:00"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stopTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoptime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stoptime().data(), this->stoptime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_devicetype;
        break;
      }
      
      // optional int32 devicetype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devicetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_storageIp;
        break;
      }
      
      // optional string storageIp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storageIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storageip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->storageip().data(), this->storageip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_storagePort;
        break;
      }
      
      // optional int32 storagePort = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storagePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storageport_)));
          set_has_storageport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_storageUserName;
        break;
      }
      
      // optional string storageUserName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storageUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storageusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->storageusername().data(), this->storageusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_storagePwd;
        break;
      }
      
      // optional string storagePwd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storagePwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storagepwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->storagepwd().data(), this->storagepwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_poolid;
        break;
      }
      
      // optional int32 poolid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poolid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poolid_)));
          set_has_poolid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_device_code;
        break;
      }
      
      // optional string device_code = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_code().data(), this->device_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspStorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // optional string startTime = 4 [default = "1970-01-01 00:00:00"];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->starttime(), output);
  }
  
  // optional string stopTime = 5 [default = "1970-01-01 00:00:00"];
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stoptime().data(), this->stoptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stoptime(), output);
  }
  
  // optional int32 devicetype = 6;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->devicetype(), output);
  }
  
  // optional string storageIp = 7;
  if (has_storageip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storageip().data(), this->storageip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->storageip(), output);
  }
  
  // optional int32 storagePort = 8;
  if (has_storageport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->storageport(), output);
  }
  
  // optional string storageUserName = 9;
  if (has_storageusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storageusername().data(), this->storageusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->storageusername(), output);
  }
  
  // optional string storagePwd = 10;
  if (has_storagepwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storagepwd().data(), this->storagepwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->storagepwd(), output);
  }
  
  // optional int32 poolid = 11;
  if (has_poolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->poolid(), output);
  }
  
  // optional string device_code = 12;
  if (has_device_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_code().data(), this->device_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->device_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspStorageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional string startTime = 4 [default = "1970-01-01 00:00:00"];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->starttime(), target);
  }
  
  // optional string stopTime = 5 [default = "1970-01-01 00:00:00"];
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stoptime().data(), this->stoptime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stoptime(), target);
  }
  
  // optional int32 devicetype = 6;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->devicetype(), target);
  }
  
  // optional string storageIp = 7;
  if (has_storageip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storageip().data(), this->storageip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->storageip(), target);
  }
  
  // optional int32 storagePort = 8;
  if (has_storageport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->storageport(), target);
  }
  
  // optional string storageUserName = 9;
  if (has_storageusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storageusername().data(), this->storageusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->storageusername(), target);
  }
  
  // optional string storagePwd = 10;
  if (has_storagepwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storagepwd().data(), this->storagepwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->storagepwd(), target);
  }
  
  // optional int32 poolid = 11;
  if (has_poolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->poolid(), target);
  }
  
  // optional string device_code = 12;
  if (has_device_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_code().data(), this->device_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->device_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspStorageConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string startTime = 4 [default = "1970-01-01 00:00:00"];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }
    
    // optional string stopTime = 5 [default = "1970-01-01 00:00:00"];
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stoptime());
    }
    
    // optional int32 devicetype = 6;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicetype());
    }
    
    // optional string storageIp = 7;
    if (has_storageip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storageip());
    }
    
    // optional int32 storagePort = 8;
    if (has_storageport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storageport());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string storageUserName = 9;
    if (has_storageusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storageusername());
    }
    
    // optional string storagePwd = 10;
    if (has_storagepwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storagepwd());
    }
    
    // optional int32 poolid = 11;
    if (has_poolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poolid());
    }
    
    // optional string device_code = 12;
    if (has_device_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspStorageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspStorageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspStorageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspStorageConfig::MergeFrom(const RspStorageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_storageip()) {
      set_storageip(from.storageip());
    }
    if (from.has_storageport()) {
      set_storageport(from.storageport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_storageusername()) {
      set_storageusername(from.storageusername());
    }
    if (from.has_storagepwd()) {
      set_storagepwd(from.storagepwd());
    }
    if (from.has_poolid()) {
      set_poolid(from.poolid());
    }
    if (from.has_device_code()) {
      set_device_code(from.device_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspStorageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspStorageConfig::CopyFrom(const RspStorageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspStorageConfig::IsInitialized() const {
  
  return true;
}

void RspStorageConfig::Swap(RspStorageConfig* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(storageip_, other->storageip_);
    std::swap(storageport_, other->storageport_);
    std::swap(storageusername_, other->storageusername_);
    std::swap(storagepwd_, other->storagepwd_);
    std::swap(poolid_, other->poolid_);
    std::swap(device_code_, other->device_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspStorageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspStorageConfig_descriptor_;
  metadata.reflection = RspStorageConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
