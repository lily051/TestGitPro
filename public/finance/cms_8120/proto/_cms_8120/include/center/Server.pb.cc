// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center/Server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_2fServer_2eproto() {
  protobuf_AddDesc_center_2fServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center/Server.proto");
  GOOGLE_CHECK(file != NULL);
  Server_descriptor_ = file->message_type(0);
  static const int Server_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, strip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, nctrlport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, ndataport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, struser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, strcomment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, nmultid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, nmultver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, nmultsysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, strconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, nonline_),
  };
  Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Server_descriptor_,
      Server::default_instance_,
      Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Server));
  ReqServer_descriptor_ = file->message_type(1);
  static const int ReqServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServer, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServer, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServer, strip_),
  };
  ReqServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqServer_descriptor_,
      ReqServer::default_instance_,
      ReqServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqServer));
  ServerList_descriptor_ = file->message_type(2);
  static const int ServerList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, server_),
  };
  ServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerList_descriptor_,
      ServerList::default_instance_,
      ServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_2fServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Server_descriptor_, &Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqServer_descriptor_, &ReqServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerList_descriptor_, &ServerList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_2fServer_2eproto() {
  delete Server::default_instance_;
  delete Server_reflection_;
  delete ReqServer::default_instance_;
  delete ReqServer_reflection_;
  delete ServerList::default_instance_;
  delete ServerList_reflection_;
}

void protobuf_AddDesc_center_2fServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_type_2fcmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023center/Server.proto\022\010cms_8120\032\016type/cm"
    "d.proto\"\330\001\n\006Server\022\n\n\002id\030\001 \001(\005\022\r\n\005nType\030"
    "\002 \001(\005\022\r\n\005strIP\030\003 \001(\t\022\021\n\tnCtrlPort\030\004 \001(\005\022"
    "\021\n\tnDataPort\030\005 \001(\005\022\017\n\007strUser\030\006 \001(\t\022\022\n\ns"
    "trComment\030\007 \001(\t\022\017\n\007nMultId\030\010 \001(\005\022\020\n\010nMul"
    "tVer\030\t \001(\005\022\022\n\nnMultSysId\030\n \001(\005\022\021\n\tstrCon"
    "fig\030\013 \001(\t\022\017\n\007nonline\030\014 \001(\005\"B\n\tReqServer\022"
    "\013\n\003cmd\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\r\n\005nType\030\003 \001(\005\022"
    "\r\n\005strIP\030\004 \001(\t\";\n\nServerList\022\013\n\003cmd\030\001 \001("
    "\005\022 \n\006server\030\002 \003(\0132\020.cms_8120.ServerB7\n(c"
    "om.hikvision.finance.fms.cms.hpp.centerB"
    "\013ServerProto", 452);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center/Server.proto", &protobuf_RegisterTypes);
  Server::default_instance_ = new Server();
  ReqServer::default_instance_ = new ReqServer();
  ServerList::default_instance_ = new ServerList();
  Server::default_instance_->InitAsDefaultInstance();
  ReqServer::default_instance_->InitAsDefaultInstance();
  ServerList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_2fServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_2fServer_2eproto {
  StaticDescriptorInitializer_center_2fServer_2eproto() {
    protobuf_AddDesc_center_2fServer_2eproto();
  }
} static_descriptor_initializer_center_2fServer_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Server::kIdFieldNumber;
const int Server::kNTypeFieldNumber;
const int Server::kStrIPFieldNumber;
const int Server::kNCtrlPortFieldNumber;
const int Server::kNDataPortFieldNumber;
const int Server::kStrUserFieldNumber;
const int Server::kStrCommentFieldNumber;
const int Server::kNMultIdFieldNumber;
const int Server::kNMultVerFieldNumber;
const int Server::kNMultSysIdFieldNumber;
const int Server::kStrConfigFieldNumber;
const int Server::kNonlineFieldNumber;
#endif  // !_MSC_VER

Server::Server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Server::InitAsDefaultInstance() {
}

Server::Server(const Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Server::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ntype_ = 0;
  strip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nctrlport_ = 0;
  ndataport_ = 0;
  struser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcomment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nmultid_ = 0;
  nmultver_ = 0;
  nmultsysid_ = 0;
  strconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nonline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Server::~Server() {
  SharedDtor();
}

void Server::SharedDtor() {
  if (strip_ != &::google::protobuf::internal::kEmptyString) {
    delete strip_;
  }
  if (struser_ != &::google::protobuf::internal::kEmptyString) {
    delete struser_;
  }
  if (strcomment_ != &::google::protobuf::internal::kEmptyString) {
    delete strcomment_;
  }
  if (strconfig_ != &::google::protobuf::internal::kEmptyString) {
    delete strconfig_;
  }
  if (this != default_instance_) {
  }
}

void Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_descriptor_;
}

const Server& Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fServer_2eproto();  return *default_instance_;
}

Server* Server::default_instance_ = NULL;

Server* Server::New() const {
  return new Server;
}

void Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    ntype_ = 0;
    if (has_strip()) {
      if (strip_ != &::google::protobuf::internal::kEmptyString) {
        strip_->clear();
      }
    }
    nctrlport_ = 0;
    ndataport_ = 0;
    if (has_struser()) {
      if (struser_ != &::google::protobuf::internal::kEmptyString) {
        struser_->clear();
      }
    }
    if (has_strcomment()) {
      if (strcomment_ != &::google::protobuf::internal::kEmptyString) {
        strcomment_->clear();
      }
    }
    nmultid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nmultver_ = 0;
    nmultsysid_ = 0;
    if (has_strconfig()) {
      if (strconfig_ != &::google::protobuf::internal::kEmptyString) {
        strconfig_->clear();
      }
    }
    nonline_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nType;
        break;
      }
      
      // optional int32 nType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strIP;
        break;
      }
      
      // optional string strIP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strip().data(), this->strip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nCtrlPort;
        break;
      }
      
      // optional int32 nCtrlPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCtrlPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nctrlport_)));
          set_has_nctrlport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nDataPort;
        break;
      }
      
      // optional int32 nDataPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nDataPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndataport_)));
          set_has_ndataport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strUser;
        break;
      }
      
      // optional string strUser = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_struser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->struser().data(), this->struser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strComment;
        break;
      }
      
      // optional string strComment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strComment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcomment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcomment().data(), this->strcomment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_nMultId;
        break;
      }
      
      // optional int32 nMultId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMultId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmultid_)));
          set_has_nmultid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nMultVer;
        break;
      }
      
      // optional int32 nMultVer = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMultVer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmultver_)));
          set_has_nmultver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_nMultSysId;
        break;
      }
      
      // optional int32 nMultSysId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMultSysId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmultsysid_)));
          set_has_nmultsysid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_strConfig;
        break;
      }
      
      // optional string strConfig = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strconfig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strconfig().data(), this->strconfig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nonline;
        break;
      }
      
      // optional int32 nonline = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nonline_)));
          set_has_nonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 nType = 2;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntype(), output);
  }
  
  // optional string strIP = 3;
  if (has_strip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strip().data(), this->strip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strip(), output);
  }
  
  // optional int32 nCtrlPort = 4;
  if (has_nctrlport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nctrlport(), output);
  }
  
  // optional int32 nDataPort = 5;
  if (has_ndataport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ndataport(), output);
  }
  
  // optional string strUser = 6;
  if (has_struser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->struser().data(), this->struser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->struser(), output);
  }
  
  // optional string strComment = 7;
  if (has_strcomment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcomment().data(), this->strcomment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strcomment(), output);
  }
  
  // optional int32 nMultId = 8;
  if (has_nmultid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nmultid(), output);
  }
  
  // optional int32 nMultVer = 9;
  if (has_nmultver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nmultver(), output);
  }
  
  // optional int32 nMultSysId = 10;
  if (has_nmultsysid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->nmultsysid(), output);
  }
  
  // optional string strConfig = 11;
  if (has_strconfig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strconfig().data(), this->strconfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->strconfig(), output);
  }
  
  // optional int32 nonline = 12;
  if (has_nonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->nonline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 nType = 2;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntype(), target);
  }
  
  // optional string strIP = 3;
  if (has_strip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strip().data(), this->strip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strip(), target);
  }
  
  // optional int32 nCtrlPort = 4;
  if (has_nctrlport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nctrlport(), target);
  }
  
  // optional int32 nDataPort = 5;
  if (has_ndataport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ndataport(), target);
  }
  
  // optional string strUser = 6;
  if (has_struser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->struser().data(), this->struser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->struser(), target);
  }
  
  // optional string strComment = 7;
  if (has_strcomment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcomment().data(), this->strcomment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strcomment(), target);
  }
  
  // optional int32 nMultId = 8;
  if (has_nmultid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nmultid(), target);
  }
  
  // optional int32 nMultVer = 9;
  if (has_nmultver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nmultver(), target);
  }
  
  // optional int32 nMultSysId = 10;
  if (has_nmultsysid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->nmultsysid(), target);
  }
  
  // optional string strConfig = 11;
  if (has_strconfig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strconfig().data(), this->strconfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->strconfig(), target);
  }
  
  // optional int32 nonline = 12;
  if (has_nonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->nonline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Server::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 nType = 2;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
    // optional string strIP = 3;
    if (has_strip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strip());
    }
    
    // optional int32 nCtrlPort = 4;
    if (has_nctrlport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nctrlport());
    }
    
    // optional int32 nDataPort = 5;
    if (has_ndataport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndataport());
    }
    
    // optional string strUser = 6;
    if (has_struser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->struser());
    }
    
    // optional string strComment = 7;
    if (has_strcomment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcomment());
    }
    
    // optional int32 nMultId = 8;
    if (has_nmultid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmultid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nMultVer = 9;
    if (has_nmultver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmultver());
    }
    
    // optional int32 nMultSysId = 10;
    if (has_nmultsysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmultsysid());
    }
    
    // optional string strConfig = 11;
    if (has_strconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strconfig());
    }
    
    // optional int32 nonline = 12;
    if (has_nonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nonline());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
    if (from.has_strip()) {
      set_strip(from.strip());
    }
    if (from.has_nctrlport()) {
      set_nctrlport(from.nctrlport());
    }
    if (from.has_ndataport()) {
      set_ndataport(from.ndataport());
    }
    if (from.has_struser()) {
      set_struser(from.struser());
    }
    if (from.has_strcomment()) {
      set_strcomment(from.strcomment());
    }
    if (from.has_nmultid()) {
      set_nmultid(from.nmultid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nmultver()) {
      set_nmultver(from.nmultver());
    }
    if (from.has_nmultsysid()) {
      set_nmultsysid(from.nmultsysid());
    }
    if (from.has_strconfig()) {
      set_strconfig(from.strconfig());
    }
    if (from.has_nonline()) {
      set_nonline(from.nonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  
  return true;
}

void Server::Swap(Server* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ntype_, other->ntype_);
    std::swap(strip_, other->strip_);
    std::swap(nctrlport_, other->nctrlport_);
    std::swap(ndataport_, other->ndataport_);
    std::swap(struser_, other->struser_);
    std::swap(strcomment_, other->strcomment_);
    std::swap(nmultid_, other->nmultid_);
    std::swap(nmultver_, other->nmultver_);
    std::swap(nmultsysid_, other->nmultsysid_);
    std::swap(strconfig_, other->strconfig_);
    std::swap(nonline_, other->nonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_descriptor_;
  metadata.reflection = Server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqServer::kCmdFieldNumber;
const int ReqServer::kIdFieldNumber;
const int ReqServer::kNTypeFieldNumber;
const int ReqServer::kStrIPFieldNumber;
#endif  // !_MSC_VER

ReqServer::ReqServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqServer::InitAsDefaultInstance() {
}

ReqServer::ReqServer(const ReqServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqServer::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  id_ = 0;
  ntype_ = 0;
  strip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqServer::~ReqServer() {
  SharedDtor();
}

void ReqServer::SharedDtor() {
  if (strip_ != &::google::protobuf::internal::kEmptyString) {
    delete strip_;
  }
  if (this != default_instance_) {
  }
}

void ReqServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqServer_descriptor_;
}

const ReqServer& ReqServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fServer_2eproto();  return *default_instance_;
}

ReqServer* ReqServer::default_instance_ = NULL;

ReqServer* ReqServer::New() const {
  return new ReqServer;
}

void ReqServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    id_ = 0;
    ntype_ = 0;
    if (has_strip()) {
      if (strip_ != &::google::protobuf::internal::kEmptyString) {
        strip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }
      
      // optional int32 nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strIP;
        break;
      }
      
      // optional string strIP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strip().data(), this->strip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ntype(), output);
  }
  
  // optional string strIP = 4;
  if (has_strip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strip().data(), this->strip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 nType = 3;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ntype(), target);
  }
  
  // optional string strIP = 4;
  if (has_strip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strip().data(), this->strip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
    // optional string strIP = 4;
    if (has_strip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqServer::MergeFrom(const ReqServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
    if (from.has_strip()) {
      set_strip(from.strip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqServer::CopyFrom(const ReqServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqServer::IsInitialized() const {
  
  return true;
}

void ReqServer::Swap(ReqServer* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(id_, other->id_);
    std::swap(ntype_, other->ntype_);
    std::swap(strip_, other->strip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqServer_descriptor_;
  metadata.reflection = ReqServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerList::kCmdFieldNumber;
const int ServerList::kServerFieldNumber;
#endif  // !_MSC_VER

ServerList::ServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerList::InitAsDefaultInstance() {
}

ServerList::ServerList(const ServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerList::~ServerList() {
  SharedDtor();
}

void ServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerList_descriptor_;
}

const ServerList& ServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fServer_2eproto();  return *default_instance_;
}

ServerList* ServerList::default_instance_ = NULL;

ServerList* ServerList::New() const {
  return new ServerList;
}

void ServerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  server_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server;
        break;
      }
      
      // repeated .cms_8120.Server server = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // repeated .cms_8120.Server server = 2;
  for (int i = 0; i < this->server_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // repeated .cms_8120.Server server = 2;
  for (int i = 0; i < this->server_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
  }
  // repeated .cms_8120.Server server = 2;
  total_size += 1 * this->server_size();
  for (int i = 0; i < this->server_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerList::MergeFrom(const ServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_.MergeFrom(from.server_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerList::CopyFrom(const ServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerList::IsInitialized() const {
  
  return true;
}

void ServerList::Swap(ServerList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    server_.Swap(&other->server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerList_descriptor_;
  metadata.reflection = ServerList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
