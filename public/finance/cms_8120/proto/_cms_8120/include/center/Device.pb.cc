// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center/Device.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

namespace {

const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_2fDevice_2eproto() {
  protobuf_AddDesc_center_2fDevice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center/Device.proto");
  GOOGLE_CHECK(file != NULL);
  Device_descriptor_ = file->message_type(0);
  static const int Device_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, strip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, nport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, struser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, strpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, strpasswordlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, ndevtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, nproducttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, nchannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, strdeviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, telchannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, nregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, nstreamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, dvrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, nconfigport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, strconfiguser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, strconfigpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, uitotalspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, uifreespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, strindexcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, strmanufacture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, straccesskey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, strsecretkey_),
  };
  Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Device_descriptor_,
      Device::default_instance_,
      Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Device));
  ReqDevice_descriptor_ = file->message_type(1);
  static const int ReqDevice_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevice, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevice, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevice, strip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevice, nport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevice, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevice, uitotalspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevice, uifreespace_),
  };
  ReqDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDevice_descriptor_,
      ReqDevice::default_instance_,
      ReqDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDevice));
  DeviceList_descriptor_ = file->message_type(2);
  static const int DeviceList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceList, device_),
  };
  DeviceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceList_descriptor_,
      DeviceList::default_instance_,
      DeviceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_2fDevice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Device_descriptor_, &Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDevice_descriptor_, &ReqDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceList_descriptor_, &DeviceList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_2fDevice_2eproto() {
  delete Device::default_instance_;
  delete Device_reflection_;
  delete ReqDevice::default_instance_;
  delete ReqDevice_reflection_;
  delete DeviceList::default_instance_;
  delete DeviceList_reflection_;
}

void protobuf_AddDesc_center_2fDevice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cms_8120::protobuf_AddDesc_type_2fcmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023center/Device.proto\022\010cms_8120\032\016type/cm"
    "d.proto\"\212\004\n\006Device\022\n\n\002id\030\001 \001(\005\022\r\n\005nType\030"
    "\002 \001(\005\022\017\n\007strName\030\003 \001(\t\022\r\n\005strIp\030\004 \001(\t\022\r\n"
    "\005nPort\030\005 \001(\005\022\017\n\007strUser\030\006 \001(\t\022\023\n\013strPass"
    "word\030\007 \001(\t\022\030\n\020strPasswordLevel\030\010 \001(\t\022\020\n\010"
    "nDevType\030\t \001(\005\022\024\n\014nProductType\030\n \001(\005\022\020\n\010"
    "nChanNum\030\013 \001(\005\022\023\n\013strDeviceId\030\014 \001(\t\022\022\n\nt"
    "elChanNum\030\r \001(\005\022\021\n\tnRegionId\030\016 \001(\005\022\023\n\013nS"
    "treamType\030\017 \001(\005\022\017\n\007dvrType\030\020 \001(\005\022\023\n\013nCon"
    "figPort\030\021 \001(\005\022\025\n\rstrConfigUser\030\022 \001(\t\022\031\n\021"
    "strConfigPassword\030\023 \001(\t\022\016\n\006online\030\024 \001(\005\022"
    "\024\n\014uiTotalSpace\030\025 \001(\005\022\023\n\013uiFreeSpace\030\026 \001"
    "(\005\022\024\n\014strIndexCode\030\027 \001(\t\022\026\n\016strManufactu"
    "re\030\030 \001(\t\022\024\n\014strAccessKey\030\031 \001(\t\022\024\n\014strSec"
    "retKey\030\032 \001(\t\"\214\001\n\tReqDevice\022\013\n\003cmd\030\001 \001(\005\022"
    "\r\n\005nType\030\002 \001(\005\022\n\n\002id\030\003 \001(\005\022\r\n\005strIp\030\004 \001("
    "\t\022\r\n\005nPort\030\005 \001(\005\022\016\n\006online\030\006 \001(\005\022\024\n\014uiTo"
    "talSpace\030\007 \001(\005\022\023\n\013uiFreeSpace\030\010 \001(\005\";\n\nD"
    "eviceList\022\013\n\003cmd\030\001 \001(\005\022 \n\006device\030\002 \003(\0132\020"
    ".cms_8120.Device2\343\001\n\023ModifyDeviceService"
    "\022C\n\026QueryStorageDeviceInfo\022\023.cms_8120.Re"
    "qDevice\032\024.cms_8120.DeviceList\022I\n\034QuerySt"
    "orageDeviceInfoBytype\022\023.cms_8120.ReqDevi"
    "ce\032\024.cms_8120.DeviceList\022<\n\017QueryAllDvrI"
    "nfo\022\023.cms_8120.ReqDevice\032\024.cms_8120.Devi"
    "ceListB:\n(com.hikvision.finance.fms.cms."
    "hpp.centerB\013DeviceProto\210\001\001", 1066);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center/Device.proto", &protobuf_RegisterTypes);
  Device::default_instance_ = new Device();
  ReqDevice::default_instance_ = new ReqDevice();
  DeviceList::default_instance_ = new DeviceList();
  Device::default_instance_->InitAsDefaultInstance();
  ReqDevice::default_instance_->InitAsDefaultInstance();
  DeviceList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_2fDevice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_2fDevice_2eproto {
  StaticDescriptorInitializer_center_2fDevice_2eproto() {
    protobuf_AddDesc_center_2fDevice_2eproto();
  }
} static_descriptor_initializer_center_2fDevice_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Device::kIdFieldNumber;
const int Device::kNTypeFieldNumber;
const int Device::kStrNameFieldNumber;
const int Device::kStrIpFieldNumber;
const int Device::kNPortFieldNumber;
const int Device::kStrUserFieldNumber;
const int Device::kStrPasswordFieldNumber;
const int Device::kStrPasswordLevelFieldNumber;
const int Device::kNDevTypeFieldNumber;
const int Device::kNProductTypeFieldNumber;
const int Device::kNChanNumFieldNumber;
const int Device::kStrDeviceIdFieldNumber;
const int Device::kTelChanNumFieldNumber;
const int Device::kNRegionIdFieldNumber;
const int Device::kNStreamTypeFieldNumber;
const int Device::kDvrTypeFieldNumber;
const int Device::kNConfigPortFieldNumber;
const int Device::kStrConfigUserFieldNumber;
const int Device::kStrConfigPasswordFieldNumber;
const int Device::kOnlineFieldNumber;
const int Device::kUiTotalSpaceFieldNumber;
const int Device::kUiFreeSpaceFieldNumber;
const int Device::kStrIndexCodeFieldNumber;
const int Device::kStrManufactureFieldNumber;
const int Device::kStrAccessKeyFieldNumber;
const int Device::kStrSecretKeyFieldNumber;
#endif  // !_MSC_VER

Device::Device()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Device::InitAsDefaultInstance() {
}

Device::Device(const Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Device::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ntype_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nport_ = 0;
  struser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strpasswordlevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ndevtype_ = 0;
  nproducttype_ = 0;
  nchannum_ = 0;
  strdeviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  telchannum_ = 0;
  nregionid_ = 0;
  nstreamtype_ = 0;
  dvrtype_ = 0;
  nconfigport_ = 0;
  strconfiguser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strconfigpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  online_ = 0;
  uitotalspace_ = 0;
  uifreespace_ = 0;
  strindexcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strmanufacture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  straccesskey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strsecretkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Device::~Device() {
  SharedDtor();
}

void Device::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (strip_ != &::google::protobuf::internal::kEmptyString) {
    delete strip_;
  }
  if (struser_ != &::google::protobuf::internal::kEmptyString) {
    delete struser_;
  }
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (strpasswordlevel_ != &::google::protobuf::internal::kEmptyString) {
    delete strpasswordlevel_;
  }
  if (strdeviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete strdeviceid_;
  }
  if (strconfiguser_ != &::google::protobuf::internal::kEmptyString) {
    delete strconfiguser_;
  }
  if (strconfigpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strconfigpassword_;
  }
  if (strindexcode_ != &::google::protobuf::internal::kEmptyString) {
    delete strindexcode_;
  }
  if (strmanufacture_ != &::google::protobuf::internal::kEmptyString) {
    delete strmanufacture_;
  }
  if (straccesskey_ != &::google::protobuf::internal::kEmptyString) {
    delete straccesskey_;
  }
  if (strsecretkey_ != &::google::protobuf::internal::kEmptyString) {
    delete strsecretkey_;
  }
  if (this != default_instance_) {
  }
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fDevice_2eproto();  return *default_instance_;
}

Device* Device::default_instance_ = NULL;

Device* Device::New() const {
  return new Device;
}

void Device::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    ntype_ = 0;
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    if (has_strip()) {
      if (strip_ != &::google::protobuf::internal::kEmptyString) {
        strip_->clear();
      }
    }
    nport_ = 0;
    if (has_struser()) {
      if (struser_ != &::google::protobuf::internal::kEmptyString) {
        struser_->clear();
      }
    }
    if (has_strpassword()) {
      if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
        strpassword_->clear();
      }
    }
    if (has_strpasswordlevel()) {
      if (strpasswordlevel_ != &::google::protobuf::internal::kEmptyString) {
        strpasswordlevel_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ndevtype_ = 0;
    nproducttype_ = 0;
    nchannum_ = 0;
    if (has_strdeviceid()) {
      if (strdeviceid_ != &::google::protobuf::internal::kEmptyString) {
        strdeviceid_->clear();
      }
    }
    telchannum_ = 0;
    nregionid_ = 0;
    nstreamtype_ = 0;
    dvrtype_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    nconfigport_ = 0;
    if (has_strconfiguser()) {
      if (strconfiguser_ != &::google::protobuf::internal::kEmptyString) {
        strconfiguser_->clear();
      }
    }
    if (has_strconfigpassword()) {
      if (strconfigpassword_ != &::google::protobuf::internal::kEmptyString) {
        strconfigpassword_->clear();
      }
    }
    online_ = 0;
    uitotalspace_ = 0;
    uifreespace_ = 0;
    if (has_strindexcode()) {
      if (strindexcode_ != &::google::protobuf::internal::kEmptyString) {
        strindexcode_->clear();
      }
    }
    if (has_strmanufacture()) {
      if (strmanufacture_ != &::google::protobuf::internal::kEmptyString) {
        strmanufacture_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_straccesskey()) {
      if (straccesskey_ != &::google::protobuf::internal::kEmptyString) {
        straccesskey_->clear();
      }
    }
    if (has_strsecretkey()) {
      if (strsecretkey_ != &::google::protobuf::internal::kEmptyString) {
        strsecretkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nType;
        break;
      }
      
      // optional int32 nType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strName;
        break;
      }
      
      // optional string strName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strIp;
        break;
      }
      
      // optional string strIp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strip().data(), this->strip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nPort;
        break;
      }
      
      // optional int32 nPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nport_)));
          set_has_nport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strUser;
        break;
      }
      
      // optional string strUser = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_struser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->struser().data(), this->struser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strPassword;
        break;
      }
      
      // optional string strPassword = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpassword().data(), this->strpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_strPasswordLevel;
        break;
      }
      
      // optional string strPasswordLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPasswordLevel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpasswordlevel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpasswordlevel().data(), this->strpasswordlevel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nDevType;
        break;
      }
      
      // optional int32 nDevType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nDevType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndevtype_)));
          set_has_ndevtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_nProductType;
        break;
      }
      
      // optional int32 nProductType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nProductType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nproducttype_)));
          set_has_nproducttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nChanNum;
        break;
      }
      
      // optional int32 nChanNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nChanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchannum_)));
          set_has_nchannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_strDeviceId;
        break;
      }
      
      // optional string strDeviceId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDeviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strdeviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strdeviceid().data(), this->strdeviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_telChanNum;
        break;
      }
      
      // optional int32 telChanNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_telChanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &telchannum_)));
          set_has_telchannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_nRegionId;
        break;
      }
      
      // optional int32 nRegionId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRegionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nregionid_)));
          set_has_nregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_nStreamType;
        break;
      }
      
      // optional int32 nStreamType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nStreamType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nstreamtype_)));
          set_has_nstreamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dvrType;
        break;
      }
      
      // optional int32 dvrType = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dvrType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dvrtype_)));
          set_has_dvrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_nConfigPort;
        break;
      }
      
      // optional int32 nConfigPort = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nConfigPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nconfigport_)));
          set_has_nconfigport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_strConfigUser;
        break;
      }
      
      // optional string strConfigUser = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strConfigUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strconfiguser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strconfiguser().data(), this->strconfiguser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_strConfigPassword;
        break;
      }
      
      // optional string strConfigPassword = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strConfigPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strconfigpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strconfigpassword().data(), this->strconfigpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_online;
        break;
      }
      
      // optional int32 online = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_uiTotalSpace;
        break;
      }
      
      // optional int32 uiTotalSpace = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTotalSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uitotalspace_)));
          set_has_uitotalspace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_uiFreeSpace;
        break;
      }
      
      // optional int32 uiFreeSpace = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiFreeSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uifreespace_)));
          set_has_uifreespace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_strIndexCode;
        break;
      }
      
      // optional string strIndexCode = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strIndexCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strindexcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strindexcode().data(), this->strindexcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_strManufacture;
        break;
      }
      
      // optional string strManufacture = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strManufacture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strmanufacture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strmanufacture().data(), this->strmanufacture().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_strAccessKey;
        break;
      }
      
      // optional string strAccessKey = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAccessKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccesskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccesskey().data(), this->straccesskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_strSecretKey;
        break;
      }
      
      // optional string strSecretKey = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strSecretKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsecretkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strsecretkey().data(), this->strsecretkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 nType = 2;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntype(), output);
  }
  
  // optional string strName = 3;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strname(), output);
  }
  
  // optional string strIp = 4;
  if (has_strip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strip().data(), this->strip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strip(), output);
  }
  
  // optional int32 nPort = 5;
  if (has_nport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nport(), output);
  }
  
  // optional string strUser = 6;
  if (has_struser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->struser().data(), this->struser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->struser(), output);
  }
  
  // optional string strPassword = 7;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strpassword(), output);
  }
  
  // optional string strPasswordLevel = 8;
  if (has_strpasswordlevel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpasswordlevel().data(), this->strpasswordlevel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->strpasswordlevel(), output);
  }
  
  // optional int32 nDevType = 9;
  if (has_ndevtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ndevtype(), output);
  }
  
  // optional int32 nProductType = 10;
  if (has_nproducttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->nproducttype(), output);
  }
  
  // optional int32 nChanNum = 11;
  if (has_nchannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nchannum(), output);
  }
  
  // optional string strDeviceId = 12;
  if (has_strdeviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdeviceid().data(), this->strdeviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->strdeviceid(), output);
  }
  
  // optional int32 telChanNum = 13;
  if (has_telchannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->telchannum(), output);
  }
  
  // optional int32 nRegionId = 14;
  if (has_nregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->nregionid(), output);
  }
  
  // optional int32 nStreamType = 15;
  if (has_nstreamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->nstreamtype(), output);
  }
  
  // optional int32 dvrType = 16;
  if (has_dvrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->dvrtype(), output);
  }
  
  // optional int32 nConfigPort = 17;
  if (has_nconfigport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->nconfigport(), output);
  }
  
  // optional string strConfigUser = 18;
  if (has_strconfiguser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strconfiguser().data(), this->strconfiguser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->strconfiguser(), output);
  }
  
  // optional string strConfigPassword = 19;
  if (has_strconfigpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strconfigpassword().data(), this->strconfigpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->strconfigpassword(), output);
  }
  
  // optional int32 online = 20;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->online(), output);
  }
  
  // optional int32 uiTotalSpace = 21;
  if (has_uitotalspace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->uitotalspace(), output);
  }
  
  // optional int32 uiFreeSpace = 22;
  if (has_uifreespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->uifreespace(), output);
  }
  
  // optional string strIndexCode = 23;
  if (has_strindexcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strindexcode().data(), this->strindexcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->strindexcode(), output);
  }
  
  // optional string strManufacture = 24;
  if (has_strmanufacture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strmanufacture().data(), this->strmanufacture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->strmanufacture(), output);
  }
  
  // optional string strAccessKey = 25;
  if (has_straccesskey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccesskey().data(), this->straccesskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->straccesskey(), output);
  }
  
  // optional string strSecretKey = 26;
  if (has_strsecretkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsecretkey().data(), this->strsecretkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->strsecretkey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 nType = 2;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntype(), target);
  }
  
  // optional string strName = 3;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strname(), target);
  }
  
  // optional string strIp = 4;
  if (has_strip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strip().data(), this->strip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strip(), target);
  }
  
  // optional int32 nPort = 5;
  if (has_nport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nport(), target);
  }
  
  // optional string strUser = 6;
  if (has_struser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->struser().data(), this->struser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->struser(), target);
  }
  
  // optional string strPassword = 7;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strpassword(), target);
  }
  
  // optional string strPasswordLevel = 8;
  if (has_strpasswordlevel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpasswordlevel().data(), this->strpasswordlevel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->strpasswordlevel(), target);
  }
  
  // optional int32 nDevType = 9;
  if (has_ndevtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ndevtype(), target);
  }
  
  // optional int32 nProductType = 10;
  if (has_nproducttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->nproducttype(), target);
  }
  
  // optional int32 nChanNum = 11;
  if (has_nchannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nchannum(), target);
  }
  
  // optional string strDeviceId = 12;
  if (has_strdeviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdeviceid().data(), this->strdeviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->strdeviceid(), target);
  }
  
  // optional int32 telChanNum = 13;
  if (has_telchannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->telchannum(), target);
  }
  
  // optional int32 nRegionId = 14;
  if (has_nregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->nregionid(), target);
  }
  
  // optional int32 nStreamType = 15;
  if (has_nstreamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->nstreamtype(), target);
  }
  
  // optional int32 dvrType = 16;
  if (has_dvrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->dvrtype(), target);
  }
  
  // optional int32 nConfigPort = 17;
  if (has_nconfigport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->nconfigport(), target);
  }
  
  // optional string strConfigUser = 18;
  if (has_strconfiguser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strconfiguser().data(), this->strconfiguser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->strconfiguser(), target);
  }
  
  // optional string strConfigPassword = 19;
  if (has_strconfigpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strconfigpassword().data(), this->strconfigpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->strconfigpassword(), target);
  }
  
  // optional int32 online = 20;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->online(), target);
  }
  
  // optional int32 uiTotalSpace = 21;
  if (has_uitotalspace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->uitotalspace(), target);
  }
  
  // optional int32 uiFreeSpace = 22;
  if (has_uifreespace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->uifreespace(), target);
  }
  
  // optional string strIndexCode = 23;
  if (has_strindexcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strindexcode().data(), this->strindexcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->strindexcode(), target);
  }
  
  // optional string strManufacture = 24;
  if (has_strmanufacture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strmanufacture().data(), this->strmanufacture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->strmanufacture(), target);
  }
  
  // optional string strAccessKey = 25;
  if (has_straccesskey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccesskey().data(), this->straccesskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->straccesskey(), target);
  }
  
  // optional string strSecretKey = 26;
  if (has_strsecretkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsecretkey().data(), this->strsecretkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->strsecretkey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Device::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 nType = 2;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
    // optional string strName = 3;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }
    
    // optional string strIp = 4;
    if (has_strip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strip());
    }
    
    // optional int32 nPort = 5;
    if (has_nport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nport());
    }
    
    // optional string strUser = 6;
    if (has_struser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->struser());
    }
    
    // optional string strPassword = 7;
    if (has_strpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpassword());
    }
    
    // optional string strPasswordLevel = 8;
    if (has_strpasswordlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpasswordlevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nDevType = 9;
    if (has_ndevtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndevtype());
    }
    
    // optional int32 nProductType = 10;
    if (has_nproducttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nproducttype());
    }
    
    // optional int32 nChanNum = 11;
    if (has_nchannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchannum());
    }
    
    // optional string strDeviceId = 12;
    if (has_strdeviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strdeviceid());
    }
    
    // optional int32 telChanNum = 13;
    if (has_telchannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->telchannum());
    }
    
    // optional int32 nRegionId = 14;
    if (has_nregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nregionid());
    }
    
    // optional int32 nStreamType = 15;
    if (has_nstreamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nstreamtype());
    }
    
    // optional int32 dvrType = 16;
    if (has_dvrtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dvrtype());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 nConfigPort = 17;
    if (has_nconfigport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nconfigport());
    }
    
    // optional string strConfigUser = 18;
    if (has_strconfiguser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strconfiguser());
    }
    
    // optional string strConfigPassword = 19;
    if (has_strconfigpassword()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strconfigpassword());
    }
    
    // optional int32 online = 20;
    if (has_online()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }
    
    // optional int32 uiTotalSpace = 21;
    if (has_uitotalspace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uitotalspace());
    }
    
    // optional int32 uiFreeSpace = 22;
    if (has_uifreespace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uifreespace());
    }
    
    // optional string strIndexCode = 23;
    if (has_strindexcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strindexcode());
    }
    
    // optional string strManufacture = 24;
    if (has_strmanufacture()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strmanufacture());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string strAccessKey = 25;
    if (has_straccesskey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccesskey());
    }
    
    // optional string strSecretKey = 26;
    if (has_strsecretkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsecretkey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_strip()) {
      set_strip(from.strip());
    }
    if (from.has_nport()) {
      set_nport(from.nport());
    }
    if (from.has_struser()) {
      set_struser(from.struser());
    }
    if (from.has_strpassword()) {
      set_strpassword(from.strpassword());
    }
    if (from.has_strpasswordlevel()) {
      set_strpasswordlevel(from.strpasswordlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ndevtype()) {
      set_ndevtype(from.ndevtype());
    }
    if (from.has_nproducttype()) {
      set_nproducttype(from.nproducttype());
    }
    if (from.has_nchannum()) {
      set_nchannum(from.nchannum());
    }
    if (from.has_strdeviceid()) {
      set_strdeviceid(from.strdeviceid());
    }
    if (from.has_telchannum()) {
      set_telchannum(from.telchannum());
    }
    if (from.has_nregionid()) {
      set_nregionid(from.nregionid());
    }
    if (from.has_nstreamtype()) {
      set_nstreamtype(from.nstreamtype());
    }
    if (from.has_dvrtype()) {
      set_dvrtype(from.dvrtype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_nconfigport()) {
      set_nconfigport(from.nconfigport());
    }
    if (from.has_strconfiguser()) {
      set_strconfiguser(from.strconfiguser());
    }
    if (from.has_strconfigpassword()) {
      set_strconfigpassword(from.strconfigpassword());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_uitotalspace()) {
      set_uitotalspace(from.uitotalspace());
    }
    if (from.has_uifreespace()) {
      set_uifreespace(from.uifreespace());
    }
    if (from.has_strindexcode()) {
      set_strindexcode(from.strindexcode());
    }
    if (from.has_strmanufacture()) {
      set_strmanufacture(from.strmanufacture());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_straccesskey()) {
      set_straccesskey(from.straccesskey());
    }
    if (from.has_strsecretkey()) {
      set_strsecretkey(from.strsecretkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  
  return true;
}

void Device::Swap(Device* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ntype_, other->ntype_);
    std::swap(strname_, other->strname_);
    std::swap(strip_, other->strip_);
    std::swap(nport_, other->nport_);
    std::swap(struser_, other->struser_);
    std::swap(strpassword_, other->strpassword_);
    std::swap(strpasswordlevel_, other->strpasswordlevel_);
    std::swap(ndevtype_, other->ndevtype_);
    std::swap(nproducttype_, other->nproducttype_);
    std::swap(nchannum_, other->nchannum_);
    std::swap(strdeviceid_, other->strdeviceid_);
    std::swap(telchannum_, other->telchannum_);
    std::swap(nregionid_, other->nregionid_);
    std::swap(nstreamtype_, other->nstreamtype_);
    std::swap(dvrtype_, other->dvrtype_);
    std::swap(nconfigport_, other->nconfigport_);
    std::swap(strconfiguser_, other->strconfiguser_);
    std::swap(strconfigpassword_, other->strconfigpassword_);
    std::swap(online_, other->online_);
    std::swap(uitotalspace_, other->uitotalspace_);
    std::swap(uifreespace_, other->uifreespace_);
    std::swap(strindexcode_, other->strindexcode_);
    std::swap(strmanufacture_, other->strmanufacture_);
    std::swap(straccesskey_, other->straccesskey_);
    std::swap(strsecretkey_, other->strsecretkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDevice::kCmdFieldNumber;
const int ReqDevice::kNTypeFieldNumber;
const int ReqDevice::kIdFieldNumber;
const int ReqDevice::kStrIpFieldNumber;
const int ReqDevice::kNPortFieldNumber;
const int ReqDevice::kOnlineFieldNumber;
const int ReqDevice::kUiTotalSpaceFieldNumber;
const int ReqDevice::kUiFreeSpaceFieldNumber;
#endif  // !_MSC_VER

ReqDevice::ReqDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDevice::InitAsDefaultInstance() {
}

ReqDevice::ReqDevice(const ReqDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDevice::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ntype_ = 0;
  id_ = 0;
  strip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nport_ = 0;
  online_ = 0;
  uitotalspace_ = 0;
  uifreespace_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDevice::~ReqDevice() {
  SharedDtor();
}

void ReqDevice::SharedDtor() {
  if (strip_ != &::google::protobuf::internal::kEmptyString) {
    delete strip_;
  }
  if (this != default_instance_) {
  }
}

void ReqDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDevice_descriptor_;
}

const ReqDevice& ReqDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fDevice_2eproto();  return *default_instance_;
}

ReqDevice* ReqDevice::default_instance_ = NULL;

ReqDevice* ReqDevice::New() const {
  return new ReqDevice;
}

void ReqDevice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    ntype_ = 0;
    id_ = 0;
    if (has_strip()) {
      if (strip_ != &::google::protobuf::internal::kEmptyString) {
        strip_->clear();
      }
    }
    nport_ = 0;
    online_ = 0;
    uitotalspace_ = 0;
    uifreespace_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nType;
        break;
      }
      
      // optional int32 nType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strIp;
        break;
      }
      
      // optional string strIp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strip().data(), this->strip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nPort;
        break;
      }
      
      // optional int32 nPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nport_)));
          set_has_nport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_online;
        break;
      }
      
      // optional int32 online = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uiTotalSpace;
        break;
      }
      
      // optional int32 uiTotalSpace = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTotalSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uitotalspace_)));
          set_has_uitotalspace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_uiFreeSpace;
        break;
      }
      
      // optional int32 uiFreeSpace = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiFreeSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uifreespace_)));
          set_has_uifreespace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional int32 nType = 2;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntype(), output);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }
  
  // optional string strIp = 4;
  if (has_strip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strip().data(), this->strip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strip(), output);
  }
  
  // optional int32 nPort = 5;
  if (has_nport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nport(), output);
  }
  
  // optional int32 online = 6;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->online(), output);
  }
  
  // optional int32 uiTotalSpace = 7;
  if (has_uitotalspace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->uitotalspace(), output);
  }
  
  // optional int32 uiFreeSpace = 8;
  if (has_uifreespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->uifreespace(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional int32 nType = 2;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntype(), target);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }
  
  // optional string strIp = 4;
  if (has_strip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strip().data(), this->strip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strip(), target);
  }
  
  // optional int32 nPort = 5;
  if (has_nport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nport(), target);
  }
  
  // optional int32 online = 6;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->online(), target);
  }
  
  // optional int32 uiTotalSpace = 7;
  if (has_uitotalspace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->uitotalspace(), target);
  }
  
  // optional int32 uiFreeSpace = 8;
  if (has_uifreespace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->uifreespace(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDevice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional int32 nType = 2;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }
    
    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string strIp = 4;
    if (has_strip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strip());
    }
    
    // optional int32 nPort = 5;
    if (has_nport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nport());
    }
    
    // optional int32 online = 6;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }
    
    // optional int32 uiTotalSpace = 7;
    if (has_uitotalspace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uitotalspace());
    }
    
    // optional int32 uiFreeSpace = 8;
    if (has_uifreespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uifreespace());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDevice::MergeFrom(const ReqDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_strip()) {
      set_strip(from.strip());
    }
    if (from.has_nport()) {
      set_nport(from.nport());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_uitotalspace()) {
      set_uitotalspace(from.uitotalspace());
    }
    if (from.has_uifreespace()) {
      set_uifreespace(from.uifreespace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDevice::CopyFrom(const ReqDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDevice::IsInitialized() const {
  
  return true;
}

void ReqDevice::Swap(ReqDevice* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(ntype_, other->ntype_);
    std::swap(id_, other->id_);
    std::swap(strip_, other->strip_);
    std::swap(nport_, other->nport_);
    std::swap(online_, other->online_);
    std::swap(uitotalspace_, other->uitotalspace_);
    std::swap(uifreespace_, other->uifreespace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDevice_descriptor_;
  metadata.reflection = ReqDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceList::kCmdFieldNumber;
const int DeviceList::kDeviceFieldNumber;
#endif  // !_MSC_VER

DeviceList::DeviceList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceList::InitAsDefaultInstance() {
}

DeviceList::DeviceList(const DeviceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceList::~DeviceList() {
  SharedDtor();
}

void DeviceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceList_descriptor_;
}

const DeviceList& DeviceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2fDevice_2eproto();  return *default_instance_;
}

DeviceList* DeviceList::default_instance_ = NULL;

DeviceList* DeviceList::New() const {
  return new DeviceList;
}

void DeviceList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  device_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device;
        break;
      }
      
      // repeated .cms_8120.Device device = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // repeated .cms_8120.Device device = 2;
  for (int i = 0; i < this->device_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->device(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // repeated .cms_8120.Device device = 2;
  for (int i = 0; i < this->device_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->device(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
  }
  // repeated .cms_8120.Device device = 2;
  total_size += 1 * this->device_size();
  for (int i = 0; i < this->device_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceList::MergeFrom(const DeviceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  device_.MergeFrom(from.device_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceList::CopyFrom(const DeviceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceList::IsInitialized() const {
  
  return true;
}

void DeviceList::Swap(DeviceList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    device_.Swap(&other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceList_descriptor_;
  metadata.reflection = DeviceList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

// @@protoc_insertion_point(global_scope)
