// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center/Bussinesstype.proto

#ifndef PROTOBUF_center_2fBussinesstype_2eproto__INCLUDED
#define PROTOBUF_center_2fBussinesstype_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace cms_8120 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_center_2fBussinesstype_2eproto();
void protobuf_AssignDesc_center_2fBussinesstype_2eproto();
void protobuf_ShutdownFile_center_2fBussinesstype_2eproto();

class Bussinesstype;

// ===================================================================

class Bussinesstype : public ::google::protobuf::Message {
 public:
  Bussinesstype();
  virtual ~Bussinesstype();
  
  Bussinesstype(const Bussinesstype& from);
  
  inline Bussinesstype& operator=(const Bussinesstype& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bussinesstype& default_instance();
  
  void Swap(Bussinesstype* other);
  
  // implements Message ----------------------------------------------
  
  Bussinesstype* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bussinesstype& from);
  void MergeFrom(const Bussinesstype& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 nKey = 2;
  inline bool has_nkey() const;
  inline void clear_nkey();
  static const int kNKeyFieldNumber = 2;
  inline ::google::protobuf::int32 nkey() const;
  inline void set_nkey(::google::protobuf::int32 value);
  
  // optional string strValue = 3;
  inline bool has_strvalue() const;
  inline void clear_strvalue();
  static const int kStrValueFieldNumber = 3;
  inline const ::std::string& strvalue() const;
  inline void set_strvalue(const ::std::string& value);
  inline void set_strvalue(const char* value);
  inline void set_strvalue(const char* value, size_t size);
  inline ::std::string* mutable_strvalue();
  inline ::std::string* release_strvalue();
  
  // optional string strCode = 4;
  inline bool has_strcode() const;
  inline void clear_strcode();
  static const int kStrCodeFieldNumber = 4;
  inline const ::std::string& strcode() const;
  inline void set_strcode(const ::std::string& value);
  inline void set_strcode(const char* value);
  inline void set_strcode(const char* value, size_t size);
  inline ::std::string* mutable_strcode();
  inline ::std::string* release_strcode();
  
  // optional int32 nLevel = 5;
  inline bool has_nlevel() const;
  inline void clear_nlevel();
  static const int kNLevelFieldNumber = 5;
  inline ::google::protobuf::int32 nlevel() const;
  inline void set_nlevel(::google::protobuf::int32 value);
  
  // optional int32 pid = 6;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 6;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);
  
  // optional int32 saveYears = 7;
  inline bool has_saveyears() const;
  inline void clear_saveyears();
  static const int kSaveYearsFieldNumber = 7;
  inline ::google::protobuf::int32 saveyears() const;
  inline void set_saveyears(::google::protobuf::int32 value);
  
  // optional int32 guaranteeYears = 8;
  inline bool has_guaranteeyears() const;
  inline void clear_guaranteeyears();
  static const int kGuaranteeYearsFieldNumber = 8;
  inline ::google::protobuf::int32 guaranteeyears() const;
  inline void set_guaranteeyears(::google::protobuf::int32 value);
  
  // optional int32 nEnabled = 9;
  inline bool has_nenabled() const;
  inline void clear_nenabled();
  static const int kNEnabledFieldNumber = 9;
  inline ::google::protobuf::int32 nenabled() const;
  inline void set_nenabled(::google::protobuf::int32 value);
  
  // optional string strEndDate = 10;
  inline bool has_strenddate() const;
  inline void clear_strenddate();
  static const int kStrEndDateFieldNumber = 10;
  inline const ::std::string& strenddate() const;
  inline void set_strenddate(const ::std::string& value);
  inline void set_strenddate(const char* value);
  inline void set_strenddate(const char* value, size_t size);
  inline ::std::string* mutable_strenddate();
  inline ::std::string* release_strenddate();
  
  // optional string strApplyDate = 11;
  inline bool has_strapplydate() const;
  inline void clear_strapplydate();
  static const int kStrApplyDateFieldNumber = 11;
  inline const ::std::string& strapplydate() const;
  inline void set_strapplydate(const ::std::string& value);
  inline void set_strapplydate(const char* value);
  inline void set_strapplydate(const char* value, size_t size);
  inline ::std::string* mutable_strapplydate();
  inline ::std::string* release_strapplydate();
  
  // optional string strVideoEndDate = 12;
  inline bool has_strvideoenddate() const;
  inline void clear_strvideoenddate();
  static const int kStrVideoEndDateFieldNumber = 12;
  inline const ::std::string& strvideoenddate() const;
  inline void set_strvideoenddate(const ::std::string& value);
  inline void set_strvideoenddate(const char* value);
  inline void set_strvideoenddate(const char* value, size_t size);
  inline ::std::string* mutable_strvideoenddate();
  inline ::std::string* release_strvideoenddate();
  
  // optional int32 importUser = 13;
  inline bool has_importuser() const;
  inline void clear_importuser();
  static const int kImportUserFieldNumber = 13;
  inline ::google::protobuf::int32 importuser() const;
  inline void set_importuser(::google::protobuf::int32 value);
  
  // optional int32 checkUser = 14;
  inline bool has_checkuser() const;
  inline void clear_checkuser();
  static const int kCheckUserFieldNumber = 14;
  inline ::google::protobuf::int32 checkuser() const;
  inline void set_checkuser(::google::protobuf::int32 value);
  
  // optional string importTime = 15;
  inline bool has_importtime() const;
  inline void clear_importtime();
  static const int kImportTimeFieldNumber = 15;
  inline const ::std::string& importtime() const;
  inline void set_importtime(const ::std::string& value);
  inline void set_importtime(const char* value);
  inline void set_importtime(const char* value, size_t size);
  inline ::std::string* mutable_importtime();
  inline ::std::string* release_importtime();
  
  // optional string checkTime = 16;
  inline bool has_checktime() const;
  inline void clear_checktime();
  static const int kCheckTimeFieldNumber = 16;
  inline const ::std::string& checktime() const;
  inline void set_checktime(const ::std::string& value);
  inline void set_checktime(const char* value);
  inline void set_checktime(const char* value, size_t size);
  inline ::std::string* mutable_checktime();
  inline ::std::string* release_checktime();
  
  // optional string strGrade = 17;
  inline bool has_strgrade() const;
  inline void clear_strgrade();
  static const int kStrGradeFieldNumber = 17;
  inline const ::std::string& strgrade() const;
  inline void set_strgrade(const ::std::string& value);
  inline void set_strgrade(const char* value);
  inline void set_strgrade(const char* value, size_t size);
  inline ::std::string* mutable_strgrade();
  inline ::std::string* release_strgrade();
  
  // optional string strRisklevel = 18;
  inline bool has_strrisklevel() const;
  inline void clear_strrisklevel();
  static const int kStrRisklevelFieldNumber = 18;
  inline const ::std::string& strrisklevel() const;
  inline void set_strrisklevel(const ::std::string& value);
  inline void set_strrisklevel(const char* value);
  inline void set_strrisklevel(const char* value, size_t size);
  inline ::std::string* mutable_strrisklevel();
  inline ::std::string* release_strrisklevel();
  
  // optional string wordTemplate = 19;
  inline bool has_wordtemplate() const;
  inline void clear_wordtemplate();
  static const int kWordTemplateFieldNumber = 19;
  inline const ::std::string& wordtemplate() const;
  inline void set_wordtemplate(const ::std::string& value);
  inline void set_wordtemplate(const char* value);
  inline void set_wordtemplate(const char* value, size_t size);
  inline ::std::string* mutable_wordtemplate();
  inline ::std::string* release_wordtemplate();
  
  // @@protoc_insertion_point(class_scope:cms_8120.Bussinesstype)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_nkey();
  inline void clear_has_nkey();
  inline void set_has_strvalue();
  inline void clear_has_strvalue();
  inline void set_has_strcode();
  inline void clear_has_strcode();
  inline void set_has_nlevel();
  inline void clear_has_nlevel();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_saveyears();
  inline void clear_has_saveyears();
  inline void set_has_guaranteeyears();
  inline void clear_has_guaranteeyears();
  inline void set_has_nenabled();
  inline void clear_has_nenabled();
  inline void set_has_strenddate();
  inline void clear_has_strenddate();
  inline void set_has_strapplydate();
  inline void clear_has_strapplydate();
  inline void set_has_strvideoenddate();
  inline void clear_has_strvideoenddate();
  inline void set_has_importuser();
  inline void clear_has_importuser();
  inline void set_has_checkuser();
  inline void clear_has_checkuser();
  inline void set_has_importtime();
  inline void clear_has_importtime();
  inline void set_has_checktime();
  inline void clear_has_checktime();
  inline void set_has_strgrade();
  inline void clear_has_strgrade();
  inline void set_has_strrisklevel();
  inline void clear_has_strrisklevel();
  inline void set_has_wordtemplate();
  inline void clear_has_wordtemplate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 nkey_;
  ::std::string* strvalue_;
  ::std::string* strcode_;
  ::google::protobuf::int32 nlevel_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 saveyears_;
  ::google::protobuf::int32 guaranteeyears_;
  ::std::string* strenddate_;
  ::std::string* strapplydate_;
  ::google::protobuf::int32 nenabled_;
  ::google::protobuf::int32 importuser_;
  ::std::string* strvideoenddate_;
  ::std::string* importtime_;
  ::std::string* checktime_;
  ::std::string* strgrade_;
  ::std::string* strrisklevel_;
  ::std::string* wordtemplate_;
  ::google::protobuf::int32 checkuser_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_center_2fBussinesstype_2eproto();
  friend void protobuf_AssignDesc_center_2fBussinesstype_2eproto();
  friend void protobuf_ShutdownFile_center_2fBussinesstype_2eproto();
  
  void InitAsDefaultInstance();
  static Bussinesstype* default_instance_;
};
// ===================================================================


// ===================================================================

// Bussinesstype

// optional int32 id = 1;
inline bool Bussinesstype::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bussinesstype::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bussinesstype::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bussinesstype::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Bussinesstype::id() const {
  return id_;
}
inline void Bussinesstype::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 nKey = 2;
inline bool Bussinesstype::has_nkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bussinesstype::set_has_nkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bussinesstype::clear_has_nkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bussinesstype::clear_nkey() {
  nkey_ = 0;
  clear_has_nkey();
}
inline ::google::protobuf::int32 Bussinesstype::nkey() const {
  return nkey_;
}
inline void Bussinesstype::set_nkey(::google::protobuf::int32 value) {
  set_has_nkey();
  nkey_ = value;
}

// optional string strValue = 3;
inline bool Bussinesstype::has_strvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bussinesstype::set_has_strvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bussinesstype::clear_has_strvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bussinesstype::clear_strvalue() {
  if (strvalue_ != &::google::protobuf::internal::kEmptyString) {
    strvalue_->clear();
  }
  clear_has_strvalue();
}
inline const ::std::string& Bussinesstype::strvalue() const {
  return *strvalue_;
}
inline void Bussinesstype::set_strvalue(const ::std::string& value) {
  set_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::kEmptyString) {
    strvalue_ = new ::std::string;
  }
  strvalue_->assign(value);
}
inline void Bussinesstype::set_strvalue(const char* value) {
  set_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::kEmptyString) {
    strvalue_ = new ::std::string;
  }
  strvalue_->assign(value);
}
inline void Bussinesstype::set_strvalue(const char* value, size_t size) {
  set_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::kEmptyString) {
    strvalue_ = new ::std::string;
  }
  strvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bussinesstype::mutable_strvalue() {
  set_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::kEmptyString) {
    strvalue_ = new ::std::string;
  }
  return strvalue_;
}
inline ::std::string* Bussinesstype::release_strvalue() {
  clear_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strvalue_;
    strvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strCode = 4;
inline bool Bussinesstype::has_strcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bussinesstype::set_has_strcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bussinesstype::clear_has_strcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bussinesstype::clear_strcode() {
  if (strcode_ != &::google::protobuf::internal::kEmptyString) {
    strcode_->clear();
  }
  clear_has_strcode();
}
inline const ::std::string& Bussinesstype::strcode() const {
  return *strcode_;
}
inline void Bussinesstype::set_strcode(const ::std::string& value) {
  set_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    strcode_ = new ::std::string;
  }
  strcode_->assign(value);
}
inline void Bussinesstype::set_strcode(const char* value) {
  set_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    strcode_ = new ::std::string;
  }
  strcode_->assign(value);
}
inline void Bussinesstype::set_strcode(const char* value, size_t size) {
  set_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    strcode_ = new ::std::string;
  }
  strcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bussinesstype::mutable_strcode() {
  set_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    strcode_ = new ::std::string;
  }
  return strcode_;
}
inline ::std::string* Bussinesstype::release_strcode() {
  clear_has_strcode();
  if (strcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strcode_;
    strcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nLevel = 5;
inline bool Bussinesstype::has_nlevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Bussinesstype::set_has_nlevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Bussinesstype::clear_has_nlevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Bussinesstype::clear_nlevel() {
  nlevel_ = 0;
  clear_has_nlevel();
}
inline ::google::protobuf::int32 Bussinesstype::nlevel() const {
  return nlevel_;
}
inline void Bussinesstype::set_nlevel(::google::protobuf::int32 value) {
  set_has_nlevel();
  nlevel_ = value;
}

// optional int32 pid = 6;
inline bool Bussinesstype::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Bussinesstype::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Bussinesstype::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Bussinesstype::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 Bussinesstype::pid() const {
  return pid_;
}
inline void Bussinesstype::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}

// optional int32 saveYears = 7;
inline bool Bussinesstype::has_saveyears() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Bussinesstype::set_has_saveyears() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Bussinesstype::clear_has_saveyears() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Bussinesstype::clear_saveyears() {
  saveyears_ = 0;
  clear_has_saveyears();
}
inline ::google::protobuf::int32 Bussinesstype::saveyears() const {
  return saveyears_;
}
inline void Bussinesstype::set_saveyears(::google::protobuf::int32 value) {
  set_has_saveyears();
  saveyears_ = value;
}

// optional int32 guaranteeYears = 8;
inline bool Bussinesstype::has_guaranteeyears() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Bussinesstype::set_has_guaranteeyears() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Bussinesstype::clear_has_guaranteeyears() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Bussinesstype::clear_guaranteeyears() {
  guaranteeyears_ = 0;
  clear_has_guaranteeyears();
}
inline ::google::protobuf::int32 Bussinesstype::guaranteeyears() const {
  return guaranteeyears_;
}
inline void Bussinesstype::set_guaranteeyears(::google::protobuf::int32 value) {
  set_has_guaranteeyears();
  guaranteeyears_ = value;
}

// optional int32 nEnabled = 9;
inline bool Bussinesstype::has_nenabled() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Bussinesstype::set_has_nenabled() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Bussinesstype::clear_has_nenabled() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Bussinesstype::clear_nenabled() {
  nenabled_ = 0;
  clear_has_nenabled();
}
inline ::google::protobuf::int32 Bussinesstype::nenabled() const {
  return nenabled_;
}
inline void Bussinesstype::set_nenabled(::google::protobuf::int32 value) {
  set_has_nenabled();
  nenabled_ = value;
}

// optional string strEndDate = 10;
inline bool Bussinesstype::has_strenddate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Bussinesstype::set_has_strenddate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Bussinesstype::clear_has_strenddate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Bussinesstype::clear_strenddate() {
  if (strenddate_ != &::google::protobuf::internal::kEmptyString) {
    strenddate_->clear();
  }
  clear_has_strenddate();
}
inline const ::std::string& Bussinesstype::strenddate() const {
  return *strenddate_;
}
inline void Bussinesstype::set_strenddate(const ::std::string& value) {
  set_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    strenddate_ = new ::std::string;
  }
  strenddate_->assign(value);
}
inline void Bussinesstype::set_strenddate(const char* value) {
  set_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    strenddate_ = new ::std::string;
  }
  strenddate_->assign(value);
}
inline void Bussinesstype::set_strenddate(const char* value, size_t size) {
  set_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    strenddate_ = new ::std::string;
  }
  strenddate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bussinesstype::mutable_strenddate() {
  set_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    strenddate_ = new ::std::string;
  }
  return strenddate_;
}
inline ::std::string* Bussinesstype::release_strenddate() {
  clear_has_strenddate();
  if (strenddate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strenddate_;
    strenddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strApplyDate = 11;
inline bool Bussinesstype::has_strapplydate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Bussinesstype::set_has_strapplydate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Bussinesstype::clear_has_strapplydate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Bussinesstype::clear_strapplydate() {
  if (strapplydate_ != &::google::protobuf::internal::kEmptyString) {
    strapplydate_->clear();
  }
  clear_has_strapplydate();
}
inline const ::std::string& Bussinesstype::strapplydate() const {
  return *strapplydate_;
}
inline void Bussinesstype::set_strapplydate(const ::std::string& value) {
  set_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    strapplydate_ = new ::std::string;
  }
  strapplydate_->assign(value);
}
inline void Bussinesstype::set_strapplydate(const char* value) {
  set_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    strapplydate_ = new ::std::string;
  }
  strapplydate_->assign(value);
}
inline void Bussinesstype::set_strapplydate(const char* value, size_t size) {
  set_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    strapplydate_ = new ::std::string;
  }
  strapplydate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bussinesstype::mutable_strapplydate() {
  set_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    strapplydate_ = new ::std::string;
  }
  return strapplydate_;
}
inline ::std::string* Bussinesstype::release_strapplydate() {
  clear_has_strapplydate();
  if (strapplydate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strapplydate_;
    strapplydate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strVideoEndDate = 12;
inline bool Bussinesstype::has_strvideoenddate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Bussinesstype::set_has_strvideoenddate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Bussinesstype::clear_has_strvideoenddate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Bussinesstype::clear_strvideoenddate() {
  if (strvideoenddate_ != &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_->clear();
  }
  clear_has_strvideoenddate();
}
inline const ::std::string& Bussinesstype::strvideoenddate() const {
  return *strvideoenddate_;
}
inline void Bussinesstype::set_strvideoenddate(const ::std::string& value) {
  set_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_ = new ::std::string;
  }
  strvideoenddate_->assign(value);
}
inline void Bussinesstype::set_strvideoenddate(const char* value) {
  set_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_ = new ::std::string;
  }
  strvideoenddate_->assign(value);
}
inline void Bussinesstype::set_strvideoenddate(const char* value, size_t size) {
  set_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_ = new ::std::string;
  }
  strvideoenddate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bussinesstype::mutable_strvideoenddate() {
  set_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    strvideoenddate_ = new ::std::string;
  }
  return strvideoenddate_;
}
inline ::std::string* Bussinesstype::release_strvideoenddate() {
  clear_has_strvideoenddate();
  if (strvideoenddate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strvideoenddate_;
    strvideoenddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 importUser = 13;
inline bool Bussinesstype::has_importuser() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Bussinesstype::set_has_importuser() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Bussinesstype::clear_has_importuser() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Bussinesstype::clear_importuser() {
  importuser_ = 0;
  clear_has_importuser();
}
inline ::google::protobuf::int32 Bussinesstype::importuser() const {
  return importuser_;
}
inline void Bussinesstype::set_importuser(::google::protobuf::int32 value) {
  set_has_importuser();
  importuser_ = value;
}

// optional int32 checkUser = 14;
inline bool Bussinesstype::has_checkuser() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Bussinesstype::set_has_checkuser() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Bussinesstype::clear_has_checkuser() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Bussinesstype::clear_checkuser() {
  checkuser_ = 0;
  clear_has_checkuser();
}
inline ::google::protobuf::int32 Bussinesstype::checkuser() const {
  return checkuser_;
}
inline void Bussinesstype::set_checkuser(::google::protobuf::int32 value) {
  set_has_checkuser();
  checkuser_ = value;
}

// optional string importTime = 15;
inline bool Bussinesstype::has_importtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Bussinesstype::set_has_importtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Bussinesstype::clear_has_importtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Bussinesstype::clear_importtime() {
  if (importtime_ != &::google::protobuf::internal::kEmptyString) {
    importtime_->clear();
  }
  clear_has_importtime();
}
inline const ::std::string& Bussinesstype::importtime() const {
  return *importtime_;
}
inline void Bussinesstype::set_importtime(const ::std::string& value) {
  set_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    importtime_ = new ::std::string;
  }
  importtime_->assign(value);
}
inline void Bussinesstype::set_importtime(const char* value) {
  set_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    importtime_ = new ::std::string;
  }
  importtime_->assign(value);
}
inline void Bussinesstype::set_importtime(const char* value, size_t size) {
  set_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    importtime_ = new ::std::string;
  }
  importtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bussinesstype::mutable_importtime() {
  set_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    importtime_ = new ::std::string;
  }
  return importtime_;
}
inline ::std::string* Bussinesstype::release_importtime() {
  clear_has_importtime();
  if (importtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = importtime_;
    importtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string checkTime = 16;
inline bool Bussinesstype::has_checktime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Bussinesstype::set_has_checktime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Bussinesstype::clear_has_checktime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Bussinesstype::clear_checktime() {
  if (checktime_ != &::google::protobuf::internal::kEmptyString) {
    checktime_->clear();
  }
  clear_has_checktime();
}
inline const ::std::string& Bussinesstype::checktime() const {
  return *checktime_;
}
inline void Bussinesstype::set_checktime(const ::std::string& value) {
  set_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    checktime_ = new ::std::string;
  }
  checktime_->assign(value);
}
inline void Bussinesstype::set_checktime(const char* value) {
  set_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    checktime_ = new ::std::string;
  }
  checktime_->assign(value);
}
inline void Bussinesstype::set_checktime(const char* value, size_t size) {
  set_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    checktime_ = new ::std::string;
  }
  checktime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bussinesstype::mutable_checktime() {
  set_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    checktime_ = new ::std::string;
  }
  return checktime_;
}
inline ::std::string* Bussinesstype::release_checktime() {
  clear_has_checktime();
  if (checktime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = checktime_;
    checktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strGrade = 17;
inline bool Bussinesstype::has_strgrade() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Bussinesstype::set_has_strgrade() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Bussinesstype::clear_has_strgrade() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Bussinesstype::clear_strgrade() {
  if (strgrade_ != &::google::protobuf::internal::kEmptyString) {
    strgrade_->clear();
  }
  clear_has_strgrade();
}
inline const ::std::string& Bussinesstype::strgrade() const {
  return *strgrade_;
}
inline void Bussinesstype::set_strgrade(const ::std::string& value) {
  set_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    strgrade_ = new ::std::string;
  }
  strgrade_->assign(value);
}
inline void Bussinesstype::set_strgrade(const char* value) {
  set_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    strgrade_ = new ::std::string;
  }
  strgrade_->assign(value);
}
inline void Bussinesstype::set_strgrade(const char* value, size_t size) {
  set_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    strgrade_ = new ::std::string;
  }
  strgrade_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bussinesstype::mutable_strgrade() {
  set_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    strgrade_ = new ::std::string;
  }
  return strgrade_;
}
inline ::std::string* Bussinesstype::release_strgrade() {
  clear_has_strgrade();
  if (strgrade_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strgrade_;
    strgrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strRisklevel = 18;
inline bool Bussinesstype::has_strrisklevel() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Bussinesstype::set_has_strrisklevel() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Bussinesstype::clear_has_strrisklevel() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Bussinesstype::clear_strrisklevel() {
  if (strrisklevel_ != &::google::protobuf::internal::kEmptyString) {
    strrisklevel_->clear();
  }
  clear_has_strrisklevel();
}
inline const ::std::string& Bussinesstype::strrisklevel() const {
  return *strrisklevel_;
}
inline void Bussinesstype::set_strrisklevel(const ::std::string& value) {
  set_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    strrisklevel_ = new ::std::string;
  }
  strrisklevel_->assign(value);
}
inline void Bussinesstype::set_strrisklevel(const char* value) {
  set_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    strrisklevel_ = new ::std::string;
  }
  strrisklevel_->assign(value);
}
inline void Bussinesstype::set_strrisklevel(const char* value, size_t size) {
  set_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    strrisklevel_ = new ::std::string;
  }
  strrisklevel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bussinesstype::mutable_strrisklevel() {
  set_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    strrisklevel_ = new ::std::string;
  }
  return strrisklevel_;
}
inline ::std::string* Bussinesstype::release_strrisklevel() {
  clear_has_strrisklevel();
  if (strrisklevel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strrisklevel_;
    strrisklevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string wordTemplate = 19;
inline bool Bussinesstype::has_wordtemplate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Bussinesstype::set_has_wordtemplate() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Bussinesstype::clear_has_wordtemplate() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Bussinesstype::clear_wordtemplate() {
  if (wordtemplate_ != &::google::protobuf::internal::kEmptyString) {
    wordtemplate_->clear();
  }
  clear_has_wordtemplate();
}
inline const ::std::string& Bussinesstype::wordtemplate() const {
  return *wordtemplate_;
}
inline void Bussinesstype::set_wordtemplate(const ::std::string& value) {
  set_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    wordtemplate_ = new ::std::string;
  }
  wordtemplate_->assign(value);
}
inline void Bussinesstype::set_wordtemplate(const char* value) {
  set_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    wordtemplate_ = new ::std::string;
  }
  wordtemplate_->assign(value);
}
inline void Bussinesstype::set_wordtemplate(const char* value, size_t size) {
  set_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    wordtemplate_ = new ::std::string;
  }
  wordtemplate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bussinesstype::mutable_wordtemplate() {
  set_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    wordtemplate_ = new ::std::string;
  }
  return wordtemplate_;
}
inline ::std::string* Bussinesstype::release_wordtemplate() {
  clear_has_wordtemplate();
  if (wordtemplate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wordtemplate_;
    wordtemplate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms_8120

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_2fBussinesstype_2eproto__INCLUDED
