/* CfnXwebApi.h
   Generated by wsdl2h 2.8.3 from CfnXwebApi.wsdl and typemap.dat
   2016-02-18 03:07:44 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on CfnXwebApi.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:CfnXwebApi                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:CfnXwebApi"

*/

#define SOAP_NAMESPACE_OF_ns1	"urn:CfnXwebApi"
//gsoap ns1   schema namespace:	urn:CfnXwebApi
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__ChannelCfg.
class ns1__ChannelCfg;

//  Forward declaration of class ns1__ChRunStatus.
class ns1__ChRunStatus;

//  Forward declaration of class ns1__TotalChStatus.
class ns1__TotalChStatus;

//  Forward declaration of class ns1__DiskSpace.
class ns1__DiskSpace;

//  Forward declaration of class ns1__GlobalCfg.
class ns1__GlobalCfg;

//  Forward declaration of class ns1__HardwareInfo.
class ns1__HardwareInfo;

//  Forward declaration of class ns1__TotalChVol.
class ns1__TotalChVol;

//  Forward declaration of class ns1__NetCfg.
class ns1__NetCfg;

//  Forward declaration of class ns1__MonitorInfo.
class ns1__MonitorInfo;

//  Forward declaration of class ns1__SqlResult.
class ns1__SqlResult;

//  Forward declaration of class ns1__CalculateInput.
class ns1__CalculateInput;

//  Forward declaration of class ns1__CalculateRet.
class ns1__CalculateRet;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:CfnXwebApi                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:CfnXwebApi                                                           *
 *                                                                            *
\******************************************************************************/


/// "urn:CfnXwebApi":ChannelCfg is a complexType.
class ns1__ChannelCfg
{ public:
/// Element iChID of type xs:int.
    int                                  iChID                          1;	///< Required element.
/// Element iRecType of type xs:int.
    int                                  iRecType                       1;	///< Required element.
/// Element iRecDir of type xs:int.
    int                                  iRecDir                        1;	///< Required element.
/// Element iLongRecInterval of type xs:int.
    int                                  iLongRecInterval               1;	///< Required element.
/// Element iMaxReclen of type xs:int.
    int                                  iMaxReclen                     1;	///< Required element.
/// Element iRecvDtmfTime of type xs:int.
    int                                  iRecvDtmfTime                  1;	///< Required element.
/// Element szBindPhoneNum of type xs:string.
    char*                                szBindPhoneNum                 1;	///< Required element.
/// Element szStartDtmf of type xs:string.
    char*                                szStartDtmf                    1;	///< Required element.
/// Element szStopDtmf of type xs:string.
    char*                                szStopDtmf                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CfnXwebApi":ChRunStatus is a complexType.
class ns1__ChRunStatus
{ public:
/// Element cChID of type xs:int.
    int                                  cChID                          1;	///< Required element.
/// Element cChStatus of type xs:int.
    int                                  cChStatus                      1;	///< Required element.
/// Element cRecDir of type xs:int.
    int                                  cRecDir                        1;	///< Required element.
/// Element szDtmf of type xs:string.
    char*                                szDtmf                         1;	///< Required element.
/// Element iRecLen of type xs:int.
    int                                  iRecLen                        1;	///< Required element.
/// Element szRingTime of type xs:string.
    char*                                szRingTime                     1;	///< Required element.
/// Element cRingCnt of type xs:int.
    int                                  cRingCnt                       1;	///< Required element.
/// Element szCallerID of type xs:string.
    char*                                szCallerID                     1;	///< Required element.
/// Element szCalleeID of type xs:string.
    char*                                szCalleeID                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CfnXwebApi":TotalChStatus is a complexType.
class ns1__TotalChStatus
{ public:
/// Element cTotalCh of type xs:int.
    int                                  cTotalCh                       1;	///< Required element.
/// Element iStartCh of type xs:int.
    int                                  iStartCh                       1;	///< Required element.
/// Element arrChStatus of type xs:string.
    char*                                arrChStatus                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CfnXwebApi":DiskSpace is a complexType.
class ns1__DiskSpace
{ public:
/// Element szDiskType1 of type xs:string.
    char*                                szDiskType1                    1;	///< Required element.
/// Element szDiskName1 of type xs:string.
    char*                                szDiskName1                    1;	///< Required element.
/// Element iDiskTotalSpace1 of type xs:int.
    int                                  iDiskTotalSpace1               1;	///< Required element.
/// Element iDiskFreeSpace1 of type xs:int.
    int                                  iDiskFreeSpace1                1;	///< Required element.
/// Element szDiskType2 of type xs:string.
    char*                                szDiskType2                    1;	///< Required element.
/// Element szDiskName2 of type xs:string.
    char*                                szDiskName2                    1;	///< Required element.
/// Element iDiskTotalSpace2 of type xs:int.
    int                                  iDiskTotalSpace2               1;	///< Required element.
/// Element iDiskFreeSpace2 of type xs:int.
    int                                  iDiskFreeSpace2                1;	///< Required element.
/// Element szDiskType3 of type xs:string.
    char*                                szDiskType3                    1;	///< Required element.
/// Element szDiskName3 of type xs:string.
    char*                                szDiskName3                    1;	///< Required element.
/// Element iDiskTotalSpace3 of type xs:int.
    int                                  iDiskTotalSpace3               1;	///< Required element.
/// Element iDiskFreeSpace3 of type xs:int.
    int                                  iDiskFreeSpace3                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CfnXwebApi":GlobalCfg is a complexType.
class ns1__GlobalCfg
{ public:
/// Element icompress of type xs:int.
    int                                  icompress                      1;	///< Required element.
/// Element ifileformat of type xs:int.
    int                                  ifileformat                    1;	///< Required element.
/// Element szrecpath of type xs:string.
    char*                                szrecpath                      1;	///< Required element.
/// Element szdevreboottime of type xs:string.
    char*                                szdevreboottime                1;	///< Required element.
/// Element istartch of type xs:int.
    int                                  istartch                       1;	///< Required element.
/// Element itotalch of type xs:int.
    int                                  itotalch                       1;	///< Required element.
/// Element cSetReboot of type xs:int.
    int                                  cSetReboot                     1;	///< Required element.
/// Element iRebootHour of type xs:int.
    int                                  iRebootHour                    1;	///< Required element.
/// Element iRebootMin of type xs:int.
    int                                  iRebootMin                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CfnXwebApi":HardwareInfo is a complexType.
class ns1__HardwareInfo
{ public:
/// Element TotalChannels of type xs:int.
    int                                  TotalChannels                  1;	///< Required element.
/// Element BoardType of type xs:string.
    char*                                BoardType                      1;	///< Required element.
/// Element IpAddress of type xs:string.
    char*                                IpAddress                      1;	///< Required element.
/// Element Gateway of type xs:string.
    char*                                Gateway                        1;	///< Required element.
/// Element Macaddress of type xs:string.
    char*                                Macaddress                     1;	///< Required element.
/// Element Mask of type xs:string.
    char*                                Mask                           1;	///< Required element.
/// Element Dns of type xs:string.
    char*                                Dns                            1;	///< Required element.
/// Element DevID of type xs:string.
    char*                                DevID                          1;	///< Required element.
/// Element WebVersion of type xs:string.
    char*                                WebVersion                     1;	///< Required element.
/// Element RecSvrVersion of type xs:string.
    char*                                RecSvrVersion                  1;	///< Required element.
/// Element SqlVersion of type xs:string.
    char*                                SqlVersion                     1;	///< Required element.
/// Element kernelVersion of type xs:string.
    char*                                kernelVersion                  1;	///< Required element.
/// Element CpldVersion of type xs:string.
    char*                                CpldVersion                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CfnXwebApi":TotalChVol is a complexType.
class ns1__TotalChVol
{ public:
/// Element iTotalCh of type xs:int.
    int                                  iTotalCh                       1;	///< Required element.
/// Element iStartCh of type xs:int.
    int                                  iStartCh                       1;	///< Required element.
/// Element szChVol of type xs:string.
    char*                                szChVol                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CfnXwebApi":NetCfg is a complexType.
class ns1__NetCfg
{ public:
/// Element szIPAddr of type xs:string.
    char*                                szIPAddr                       1;	///< Required element.
/// Element szMask of type xs:string.
    char*                                szMask                         1;	///< Required element.
/// Element szGateway of type xs:string.
    char*                                szGateway                      1;	///< Required element.
/// Element szDns of type xs:string.
    char*                                szDns                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CfnXwebApi":MonitorInfo is a complexType.
class ns1__MonitorInfo
{ public:
/// Element ChID of type xs:int.
    int                                  ChID                           1;	///< Required element.
/// Element szRemoteIP of type xs:string.
    char*                                szRemoteIP                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CfnXwebApi":SqlResult is a complexType.
class ns1__SqlResult
{ public:
/// Element result of type xs:int.
    int                                  result                         1;	///< Required element.
/// Element sqlinfo of type xs:string.
    char*                                sqlinfo                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CfnXwebApi":CalculateInput is a complexType.
class ns1__CalculateInput
{ public:
/// Element SelectType of type xs:int.
    int                                  SelectType                     1;	///< Required element.
/// Element start_year of type xs:int.
    int                                  start_USCOREyear               1;	///< Required element.
/// Element start_month of type xs:int.
    int                                  start_USCOREmonth              1;	///< Required element.
/// Element start_day of type xs:int.
    int                                  start_USCOREday                1;	///< Required element.
/// Element end_year of type xs:int.
    int                                  end_USCOREyear                 1;	///< Required element.
/// Element end_month of type xs:int.
    int                                  end_USCOREmonth                1;	///< Required element.
/// Element end_day of type xs:int.
    int                                  end_USCOREday                  1;	///< Required element.
/// Element monthwise_year of type xs:int.
    int                                  monthwise_USCOREyear           1;	///< Required element.
/// Element monthwise_month of type xs:int.
    int                                  monthwise_USCOREmonth          1;	///< Required element.
/// Element monthwise_day of type xs:int.
    int                                  monthwise_USCOREday            1;	///< Required element.
/// Element mediaType of type xs:int.
    int                                  mediaType                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CfnXwebApi":CalculateRet is a complexType.
class ns1__CalculateRet
{ public:
/// Element totalcalls of type xs:int.
    int                                  totalcalls                     1;	///< Required element.
/// Element totalsizeM of type xs:int.
    int                                  totalsizeM                     1;	///< Required element.
/// Element totalsizeKB of type xs:int.
    int                                  totalsizeKB                    1;	///< Required element.
/// Element sizeAvailable of type xs:int.
    int                                  sizeAvailable                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:CfnXwebApi                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:CfnXwebApi                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	CfnXwebApiBinding 
//gsoap ns1  service type:	CfnXwebApiPortType 
//gsoap ns1  service port:	http://192.168.1.5:80/server.php 
//gsoap ns1  service namespace:	urn:CfnXwebApi 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage CfnXwebApi Definitions

@section CfnXwebApi_bindings Service Bindings

  - @ref CfnXwebApiBinding

@section CfnXwebApi_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page CfnXwebApiBinding Binding "CfnXwebApiBinding"

@section CfnXwebApiBinding_operations Operations of Binding  "CfnXwebApiBinding"

  - @ref ns1__DeleteFile

  - @ref ns1__DelRecordFile

  - @ref ns1__ExecuteSQL

  - @ref ns1__GetChannelCfg

  - @ref ns1__GetChannelRunningStatus

  - @ref ns1__GetChannelStatus

  - @ref ns1__GetDeviceTime

  - @ref ns1__GetDevID

  - @ref ns1__GetDiskFreeSpace

  - @ref ns1__GetGlobalCfg

  - @ref ns1__GetHardwareInfo

  - @ref ns1__GetLineVol

  - @ref ns1__QueryRecord

  - @ref ns1__RebootDevice

  - @ref ns1__SetAdminPassword

  - @ref ns1__SetChannelCfg

  - @ref ns1__SetDateTime

  - @ref ns1__SetGlobalCfg

  - @ref ns1__SetNetCfg

  - @ref ns1__StartMonitor

  - @ref ns1__StopMonitor

  - @ref ns1__CheckMediaConnected

  - @ref ns1__CheckMediaAvailable

  - @ref ns1__CalculateData

  - @ref ns1__WriteDVD

  - @ref ns1__SetWebPort

  - @ref ns1__GetWebPort

@section CfnXwebApiBinding_ports Endpoints of Binding  "CfnXwebApiBinding"

  - http://192.168.1.5:80/server.php

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   CfnXwebApiBinding                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DeleteFile                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__DeleteFile" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DeleteFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               filename,
    // response parameters:
    bool                               &DeleteFileReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DeleteFile(
    struct soap *soap,
    // request parameters:
    char*                               filename,
    // response parameters:
    bool                               &DeleteFileReturn
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	DeleteFile rpc
//gsoap ns1  service method-encoding:	DeleteFile http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DeleteFile urn:CfnXwebApiAction
int ns1__DeleteFile(
    char*                               filename,	///< Request parameter
    bool                               &DeleteFileReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DelRecordFile                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__DelRecordFile" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DelRecordFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               StartDate,
    char*                               StartTime,
    char*                               EndDate,
    char*                               EndTime,
    int                                 StartChnl,
    int                                 EndChnl,
    // response parameters:
    int                                &DelRecordFileReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DelRecordFile(
    struct soap *soap,
    // request parameters:
    char*                               StartDate,
    char*                               StartTime,
    char*                               EndDate,
    char*                               EndTime,
    int                                 StartChnl,
    int                                 EndChnl,
    // response parameters:
    int                                &DelRecordFileReturn
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	DelRecordFile rpc
//gsoap ns1  service method-encoding:	DelRecordFile http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DelRecordFile urn:CfnXwebApiAction
int ns1__DelRecordFile(
    char*                               StartDate,	///< Request parameter
    char*                               StartTime,	///< Request parameter
    char*                               EndDate,	///< Request parameter
    char*                               EndTime,	///< Request parameter
    int                                 StartChnl,	///< Request parameter
    int                                 EndChnl,	///< Request parameter
    int                                &DelRecordFileReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__ExecuteSQL                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__ExecuteSQLResponse" of service binding "CfnXwebApiBinding" operation "ns1__ExecuteSQL"
struct ns1__ExecuteSQLResponse
{
    ns1__SqlResult*                     ExecuteSQLReturn;
};

/// Operation "ns1__ExecuteSQL" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__ExecuteSQL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               SqlQuerymsg,
    // response parameters:
    struct ns1__ExecuteSQLResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__ExecuteSQL(
    struct soap *soap,
    // request parameters:
    char*                               SqlQuerymsg,
    // response parameters:
    struct ns1__ExecuteSQLResponse&
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	ExecuteSQL rpc
//gsoap ns1  service method-encoding:	ExecuteSQL http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	ExecuteSQL urn:CfnXwebApiAction
int ns1__ExecuteSQL(
    char*                               SqlQuerymsg,	///< Request parameter
    struct ns1__ExecuteSQLResponse     &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetChannelCfg                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__GetChannelCfgResponse" of service binding "CfnXwebApiBinding" operation "ns1__GetChannelCfg"
struct ns1__GetChannelCfgResponse
{
    ns1__ChannelCfg*                    GetChannelCfgReturn;
};

/// Operation "ns1__GetChannelCfg" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetChannelCfg(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 ChID,
    // response parameters:
    struct ns1__GetChannelCfgResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetChannelCfg(
    struct soap *soap,
    // request parameters:
    int                                 ChID,
    // response parameters:
    struct ns1__GetChannelCfgResponse&
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetChannelCfg rpc
//gsoap ns1  service method-encoding:	GetChannelCfg http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetChannelCfg urn:CfnXwebApiAction
int ns1__GetChannelCfg(
    int                                 ChID,	///< Request parameter
    struct ns1__GetChannelCfgResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetChannelRunningStatus                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__GetChannelRunningStatusResponse" of service binding "CfnXwebApiBinding" operation "ns1__GetChannelRunningStatus"
struct ns1__GetChannelRunningStatusResponse
{
    ns1__ChRunStatus*                   GetChannelRunningStatusReturn;
};

/// Operation "ns1__GetChannelRunningStatus" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetChannelRunningStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 ChID,
    // response parameters:
    struct ns1__GetChannelRunningStatusResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetChannelRunningStatus(
    struct soap *soap,
    // request parameters:
    int                                 ChID,
    // response parameters:
    struct ns1__GetChannelRunningStatusResponse&
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetChannelRunningStatus rpc
//gsoap ns1  service method-encoding:	GetChannelRunningStatus http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetChannelRunningStatus urn:CfnXwebApiAction
int ns1__GetChannelRunningStatus(
    int                                 ChID,	///< Request parameter
    struct ns1__GetChannelRunningStatusResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetChannelStatus                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__GetChannelStatusResponse" of service binding "CfnXwebApiBinding" operation "ns1__GetChannelStatus"
struct ns1__GetChannelStatusResponse
{
    ns1__TotalChStatus*                 GetChannelStatusReturn;
};

/// Operation "ns1__GetChannelStatus" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetChannelStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__GetChannelStatusResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetChannelStatus(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__GetChannelStatusResponse&
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetChannelStatus rpc
//gsoap ns1  service method-encoding:	GetChannelStatus http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetChannelStatus urn:CfnXwebApiAction
int ns1__GetChannelStatus(
    struct ns1__GetChannelStatusResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetDeviceTime                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__GetDeviceTime" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetDeviceTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    char*                              &GetDeviceTimeReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetDeviceTime(
    struct soap *soap,
    // request parameters:
    // response parameters:
    char*                              &GetDeviceTimeReturn
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetDeviceTime rpc
//gsoap ns1  service method-encoding:	GetDeviceTime http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetDeviceTime urn:CfnXwebApiAction
int ns1__GetDeviceTime(
    char*                              &GetDeviceTimeReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetDevID                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__GetDevID" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetDevID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    char*                              &GetDevIDReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetDevID(
    struct soap *soap,
    // request parameters:
    // response parameters:
    char*                              &GetDevIDReturn
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetDevID rpc
//gsoap ns1  service method-encoding:	GetDevID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetDevID urn:CfnXwebApiAction
int ns1__GetDevID(
    char*                              &GetDevIDReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetDiskFreeSpace                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__GetDiskFreeSpaceResponse" of service binding "CfnXwebApiBinding" operation "ns1__GetDiskFreeSpace"
struct ns1__GetDiskFreeSpaceResponse
{
    ns1__DiskSpace*                     GetDiskFreeSpaceReturn;
};

/// Operation "ns1__GetDiskFreeSpace" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetDiskFreeSpace(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__GetDiskFreeSpaceResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetDiskFreeSpace(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__GetDiskFreeSpaceResponse&
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetDiskFreeSpace rpc
//gsoap ns1  service method-encoding:	GetDiskFreeSpace http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetDiskFreeSpace urn:CfnXwebApiAction
int ns1__GetDiskFreeSpace(
    struct ns1__GetDiskFreeSpaceResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetGlobalCfg                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__GetGlobalCfgResponse" of service binding "CfnXwebApiBinding" operation "ns1__GetGlobalCfg"
struct ns1__GetGlobalCfgResponse
{
    ns1__GlobalCfg*                     GetGlobalCfgReturn;
};

/// Operation "ns1__GetGlobalCfg" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetGlobalCfg(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__GetGlobalCfgResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetGlobalCfg(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__GetGlobalCfgResponse&
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetGlobalCfg rpc
//gsoap ns1  service method-encoding:	GetGlobalCfg http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetGlobalCfg urn:CfnXwebApiAction
int ns1__GetGlobalCfg(
    struct ns1__GetGlobalCfgResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetHardwareInfo                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__GetHardwareInfoResponse" of service binding "CfnXwebApiBinding" operation "ns1__GetHardwareInfo"
struct ns1__GetHardwareInfoResponse
{
    ns1__HardwareInfo*                  GetHardwareInfoReturn;
};

/// Operation "ns1__GetHardwareInfo" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetHardwareInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__GetHardwareInfoResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetHardwareInfo(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__GetHardwareInfoResponse&
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetHardwareInfo rpc
//gsoap ns1  service method-encoding:	GetHardwareInfo http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetHardwareInfo urn:CfnXwebApiAction
int ns1__GetHardwareInfo(
    struct ns1__GetHardwareInfoResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetLineVol                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__GetLineVolResponse" of service binding "CfnXwebApiBinding" operation "ns1__GetLineVol"
struct ns1__GetLineVolResponse
{
    ns1__TotalChVol*                    GetLineVolReturn;
};

/// Operation "ns1__GetLineVol" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetLineVol(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__GetLineVolResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetLineVol(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__GetLineVolResponse&
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetLineVol rpc
//gsoap ns1  service method-encoding:	GetLineVol http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetLineVol urn:CfnXwebApiAction
int ns1__GetLineVol(
    struct ns1__GetLineVolResponse     &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__QueryRecord                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__QueryRecordResponse" of service binding "CfnXwebApiBinding" operation "ns1__QueryRecord"
struct ns1__QueryRecordResponse
{
    ns1__SqlResult*                     QueryRecordReturn;
};

/// Operation "ns1__QueryRecord" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__QueryRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               StartDate,
    char*                               StartTime,
    char*                               EndDate,
    char*                               EndTime,
    int                                 StartChnl,
    int                                 EndChnl,
    int                                 startindex,
    // response parameters:
    struct ns1__QueryRecordResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__QueryRecord(
    struct soap *soap,
    // request parameters:
    char*                               StartDate,
    char*                               StartTime,
    char*                               EndDate,
    char*                               EndTime,
    int                                 StartChnl,
    int                                 EndChnl,
    int                                 startindex,
    // response parameters:
    struct ns1__QueryRecordResponse&
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	QueryRecord rpc
//gsoap ns1  service method-encoding:	QueryRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	QueryRecord urn:CfnXwebApiAction
int ns1__QueryRecord(
    char*                               StartDate,	///< Request parameter
    char*                               StartTime,	///< Request parameter
    char*                               EndDate,	///< Request parameter
    char*                               EndTime,	///< Request parameter
    int                                 StartChnl,	///< Request parameter
    int                                 EndChnl,	///< Request parameter
    int                                 startindex,	///< Request parameter
    struct ns1__QueryRecordResponse    &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__RebootDevice                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__RebootDevice" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__RebootDevice(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 cmd,
    // response parameters:
    bool                               &RebootDeviceReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__RebootDevice(
    struct soap *soap,
    // request parameters:
    int                                 cmd,
    // response parameters:
    bool                               &RebootDeviceReturn
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	RebootDevice rpc
//gsoap ns1  service method-encoding:	RebootDevice http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	RebootDevice urn:CfnXwebApiAction
int ns1__RebootDevice(
    int                                 cmd,	///< Request parameter
    bool                               &RebootDeviceReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SetAdminPassword                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__SetAdminPassword" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SetAdminPassword(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               OldPassword,
    char*                               NewPassword,
    // response parameters:
    bool                               &SetAdminPasswordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SetAdminPassword(
    struct soap *soap,
    // request parameters:
    char*                               OldPassword,
    char*                               NewPassword,
    // response parameters:
    bool                               &SetAdminPasswordReturn
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetAdminPassword rpc
//gsoap ns1  service method-encoding:	SetAdminPassword http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	SetAdminPassword urn:CfnXwebApiAction
int ns1__SetAdminPassword(
    char*                               OldPassword,	///< Request parameter
    char*                               NewPassword,	///< Request parameter
    bool                               &SetAdminPasswordReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SetChannelCfg                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__SetChannelCfg" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SetChannelCfg(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__ChannelCfg*                    channelcfg,
    // response parameters:
    bool                               &SetChannelCfgReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SetChannelCfg(
    struct soap *soap,
    // request parameters:
    ns1__ChannelCfg*                    channelcfg,
    // response parameters:
    bool                               &SetChannelCfgReturn
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetChannelCfg rpc
//gsoap ns1  service method-encoding:	SetChannelCfg http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	SetChannelCfg urn:CfnXwebApiAction
int ns1__SetChannelCfg(
    ns1__ChannelCfg*                    channelcfg,	///< Request parameter
    bool                               &SetChannelCfgReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SetDateTime                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__SetDateTime" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SetDateTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               time,
    // response parameters:
    bool                               &SetDateTimeReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SetDateTime(
    struct soap *soap,
    // request parameters:
    char*                               time,
    // response parameters:
    bool                               &SetDateTimeReturn
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetDateTime rpc
//gsoap ns1  service method-encoding:	SetDateTime http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	SetDateTime urn:CfnXwebApiAction
int ns1__SetDateTime(
    char*                               time,	///< Request parameter
    bool                               &SetDateTimeReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SetGlobalCfg                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__SetGlobalCfg" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SetGlobalCfg(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__GlobalCfg*                     globalset,
    // response parameters:
    bool                               &SetGlobalCfgReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SetGlobalCfg(
    struct soap *soap,
    // request parameters:
    ns1__GlobalCfg*                     globalset,
    // response parameters:
    bool                               &SetGlobalCfgReturn
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetGlobalCfg rpc
//gsoap ns1  service method-encoding:	SetGlobalCfg http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	SetGlobalCfg urn:CfnXwebApiAction
int ns1__SetGlobalCfg(
    ns1__GlobalCfg*                     globalset,	///< Request parameter
    bool                               &SetGlobalCfgReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SetNetCfg                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__SetNetCfg" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SetNetCfg(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__NetCfg*                        NetCfg,
    // response parameters:
    bool                               &SetNetCfgReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SetNetCfg(
    struct soap *soap,
    // request parameters:
    ns1__NetCfg*                        NetCfg,
    // response parameters:
    bool                               &SetNetCfgReturn
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetNetCfg rpc
//gsoap ns1  service method-encoding:	SetNetCfg http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	SetNetCfg urn:CfnXwebApiAction
int ns1__SetNetCfg(
    ns1__NetCfg*                        NetCfg,	///< Request parameter
    bool                               &SetNetCfgReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__StartMonitor                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__StartMonitor" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__StartMonitor(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__MonitorInfo*                   monitorInfo,
    // response parameters:
    bool                               &StartMonitorReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__StartMonitor(
    struct soap *soap,
    // request parameters:
    ns1__MonitorInfo*                   monitorInfo,
    // response parameters:
    bool                               &StartMonitorReturn
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	StartMonitor rpc
//gsoap ns1  service method-encoding:	StartMonitor http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	StartMonitor urn:CfnXwebApiAction
int ns1__StartMonitor(
    ns1__MonitorInfo*                   monitorInfo,	///< Request parameter
    bool                               &StartMonitorReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__StopMonitor                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__StopMonitor" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApiAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__StopMonitor(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__MonitorInfo*                   monitorInfo,
    // response parameters:
    bool                               &StopMonitorReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__StopMonitor(
    struct soap *soap,
    // request parameters:
    ns1__MonitorInfo*                   monitorInfo,
    // response parameters:
    bool                               &StopMonitorReturn
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	StopMonitor rpc
//gsoap ns1  service method-encoding:	StopMonitor http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	StopMonitor urn:CfnXwebApiAction
int ns1__StopMonitor(
    ns1__MonitorInfo*                   monitorInfo,	///< Request parameter
    bool                               &StopMonitorReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__CheckMediaConnected                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__CheckMediaConnected" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApi/CheckMediaConnected"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__CheckMediaConnected(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    int                                &CheckMediaConnectedResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__CheckMediaConnected(
    struct soap *soap,
    // request parameters:
    // response parameters:
    int                                &CheckMediaConnectedResponse
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	CheckMediaConnected rpc
//gsoap ns1  service method-encoding:	CheckMediaConnected http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	CheckMediaConnected urn:CfnXwebApi/CheckMediaConnected
int ns1__CheckMediaConnected(
    int                                &CheckMediaConnectedResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__CheckMediaAvailable                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__CheckMediaAvailable" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApi/CheckMediaAvailable"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__CheckMediaAvailable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    int                                &CheckMediaAvailableResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__CheckMediaAvailable(
    struct soap *soap,
    // request parameters:
    // response parameters:
    int                                &CheckMediaAvailableResponse
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	CheckMediaAvailable rpc
//gsoap ns1  service method-encoding:	CheckMediaAvailable http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	CheckMediaAvailable urn:CfnXwebApi/CheckMediaAvailable
int ns1__CheckMediaAvailable(
    int                                &CheckMediaAvailableResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__CalculateData                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__CalculateDataResponse" of service binding "CfnXwebApiBinding" operation "ns1__CalculateData"
struct ns1__CalculateDataResponse
{
    ns1__CalculateRet*                  CalculateDataResponse;
};

/// Operation "ns1__CalculateData" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApi/CalculateData"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__CalculateData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__CalculateInput*                calInput,
    // response parameters:
    struct ns1__CalculateDataResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__CalculateData(
    struct soap *soap,
    // request parameters:
    ns1__CalculateInput*                calInput,
    // response parameters:
    struct ns1__CalculateDataResponse&
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	CalculateData rpc
//gsoap ns1  service method-encoding:	CalculateData http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	CalculateData urn:CfnXwebApi/CalculateData
int ns1__CalculateData(
    ns1__CalculateInput*                calInput,	///< Request parameter
    struct ns1__CalculateDataResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__WriteDVD                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__WriteDVD" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApi/WriteDVD"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__WriteDVD(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    int                                &WriteDVDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__WriteDVD(
    struct soap *soap,
    // request parameters:
    // response parameters:
    int                                &WriteDVDResponse
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	WriteDVD rpc
//gsoap ns1  service method-encoding:	WriteDVD http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	WriteDVD urn:CfnXwebApi/WriteDVD
int ns1__WriteDVD(
    int                                &WriteDVDResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SetWebPort                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__SetWebPort" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApi/SetWebPort"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SetWebPort(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 WebPort,
    // response parameters:
    bool                               &SetWebPortResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SetWebPort(
    struct soap *soap,
    // request parameters:
    int                                 WebPort,
    // response parameters:
    bool                               &SetWebPortResponse
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetWebPort rpc
//gsoap ns1  service method-encoding:	SetWebPort http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	SetWebPort urn:CfnXwebApi/SetWebPort
int ns1__SetWebPort(
    int                                 WebPort,	///< Request parameter
    bool                               &SetWebPortResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetWebPort                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__GetWebPort" of service binding "CfnXwebApiBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="urn:CfnXwebApi/GetWebPort"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetWebPort(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    int                                &GetWebPortResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetWebPort(
    struct soap *soap,
    // request parameters:
    // response parameters:
    int                                &GetWebPortResponse
  );
@endcode

C++ proxy class (defined in soapCfnXwebApiBindingProxy.h):
@code
  class CfnXwebApiBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCfnXwebApiBindingService.h):
@code
  class CfnXwebApiBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetWebPort rpc
//gsoap ns1  service method-encoding:	GetWebPort http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetWebPort urn:CfnXwebApi/GetWebPort
int ns1__GetWebPort(
    int                                &GetWebPortResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "urn:CfnXwebApi"

*/

/* End of CfnXwebApi.h */
