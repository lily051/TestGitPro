/* soapCfnXwebApiBindingProxy.cpp
   Generated by gSOAP 2.8.3 from CfnXwebApi.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapCfnXwebApiBindingProxy.h"

CfnXwebApiBindingProxy::CfnXwebApiBindingProxy()
{	CfnXwebApiBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CfnXwebApiBindingProxy::CfnXwebApiBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

CfnXwebApiBindingProxy::CfnXwebApiBindingProxy(const char *url)
{	CfnXwebApiBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

CfnXwebApiBindingProxy::CfnXwebApiBindingProxy(soap_mode iomode)
{	CfnXwebApiBindingProxy_init(iomode, iomode);
}

CfnXwebApiBindingProxy::CfnXwebApiBindingProxy(const char *url, soap_mode iomode)
{	CfnXwebApiBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

CfnXwebApiBindingProxy::CfnXwebApiBindingProxy(soap_mode imode, soap_mode omode)
{	CfnXwebApiBindingProxy_init(imode, omode);
}

CfnXwebApiBindingProxy::~CfnXwebApiBindingProxy()
{ }

void CfnXwebApiBindingProxy::CfnXwebApiBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "urn:CfnXwebApi", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void CfnXwebApiBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void CfnXwebApiBindingProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *CfnXwebApiBindingProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *CfnXwebApiBindingProxy::soap_fault()
{	return this->fault;
}

const char *CfnXwebApiBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *CfnXwebApiBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int CfnXwebApiBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

void CfnXwebApiBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void CfnXwebApiBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *CfnXwebApiBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int CfnXwebApiBindingProxy::DeleteFile(const char *endpoint, const char *soap_action, char *filename, bool &DeleteFileReturn)
{	struct soap *soap = this;
	struct ns1__DeleteFile soap_tmp_ns1__DeleteFile;
	struct ns1__DeleteFileResponse *soap_tmp_ns1__DeleteFileResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__DeleteFile.filename = filename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__DeleteFile(soap, &soap_tmp_ns1__DeleteFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__DeleteFile(soap, &soap_tmp_ns1__DeleteFile, "ns1:DeleteFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__DeleteFile(soap, &soap_tmp_ns1__DeleteFile, "ns1:DeleteFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&DeleteFileReturn)
		return soap_closesock(soap);
	soap_default_bool(soap, &DeleteFileReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__DeleteFileResponse = soap_get_ns1__DeleteFileResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	DeleteFileReturn = soap_tmp_ns1__DeleteFileResponse->DeleteFileReturn;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::DelRecordFile(const char *endpoint, const char *soap_action, char *StartDate, char *StartTime, char *EndDate, char *EndTime, int StartChnl, int EndChnl, int &DelRecordFileReturn)
{	struct soap *soap = this;
	struct ns1__DelRecordFile soap_tmp_ns1__DelRecordFile;
	struct ns1__DelRecordFileResponse *soap_tmp_ns1__DelRecordFileResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__DelRecordFile.StartDate = StartDate;
	soap_tmp_ns1__DelRecordFile.StartTime = StartTime;
	soap_tmp_ns1__DelRecordFile.EndDate = EndDate;
	soap_tmp_ns1__DelRecordFile.EndTime = EndTime;
	soap_tmp_ns1__DelRecordFile.StartChnl = StartChnl;
	soap_tmp_ns1__DelRecordFile.EndChnl = EndChnl;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__DelRecordFile(soap, &soap_tmp_ns1__DelRecordFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__DelRecordFile(soap, &soap_tmp_ns1__DelRecordFile, "ns1:DelRecordFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__DelRecordFile(soap, &soap_tmp_ns1__DelRecordFile, "ns1:DelRecordFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&DelRecordFileReturn)
		return soap_closesock(soap);
	soap_default_int(soap, &DelRecordFileReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__DelRecordFileResponse = soap_get_ns1__DelRecordFileResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	DelRecordFileReturn = soap_tmp_ns1__DelRecordFileResponse->DelRecordFileReturn;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::ExecuteSQL(const char *endpoint, const char *soap_action, char *SqlQuerymsg, struct ns1__ExecuteSQLResponse &_param_1)
{	struct soap *soap = this;
	struct ns1__ExecuteSQL soap_tmp_ns1__ExecuteSQL;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__ExecuteSQL.SqlQuerymsg = SqlQuerymsg;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__ExecuteSQL(soap, &soap_tmp_ns1__ExecuteSQL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__ExecuteSQL(soap, &soap_tmp_ns1__ExecuteSQL, "ns1:ExecuteSQL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__ExecuteSQL(soap, &soap_tmp_ns1__ExecuteSQL, "ns1:ExecuteSQL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_ns1__ExecuteSQLResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__ExecuteSQLResponse(soap, &_param_1, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::GetChannelCfg(const char *endpoint, const char *soap_action, int ChID, struct ns1__GetChannelCfgResponse &_param_2)
{	struct soap *soap = this;
	struct ns1__GetChannelCfg soap_tmp_ns1__GetChannelCfg;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__GetChannelCfg.ChID = ChID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetChannelCfg(soap, &soap_tmp_ns1__GetChannelCfg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetChannelCfg(soap, &soap_tmp_ns1__GetChannelCfg, "ns1:GetChannelCfg", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetChannelCfg(soap, &soap_tmp_ns1__GetChannelCfg, "ns1:GetChannelCfg", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_2)
		return soap_closesock(soap);
	soap_default_ns1__GetChannelCfgResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__GetChannelCfgResponse(soap, &_param_2, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::GetChannelRunningStatus(const char *endpoint, const char *soap_action, int ChID, struct ns1__GetChannelRunningStatusResponse &_param_3)
{	struct soap *soap = this;
	struct ns1__GetChannelRunningStatus soap_tmp_ns1__GetChannelRunningStatus;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__GetChannelRunningStatus.ChID = ChID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetChannelRunningStatus(soap, &soap_tmp_ns1__GetChannelRunningStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetChannelRunningStatus(soap, &soap_tmp_ns1__GetChannelRunningStatus, "ns1:GetChannelRunningStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetChannelRunningStatus(soap, &soap_tmp_ns1__GetChannelRunningStatus, "ns1:GetChannelRunningStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_3)
		return soap_closesock(soap);
	soap_default_ns1__GetChannelRunningStatusResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__GetChannelRunningStatusResponse(soap, &_param_3, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::GetChannelStatus(const char *endpoint, const char *soap_action, struct ns1__GetChannelStatusResponse &_param_4)
{	struct soap *soap = this;
	struct ns1__GetChannelStatus soap_tmp_ns1__GetChannelStatus;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetChannelStatus(soap, &soap_tmp_ns1__GetChannelStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetChannelStatus(soap, &soap_tmp_ns1__GetChannelStatus, "ns1:GetChannelStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetChannelStatus(soap, &soap_tmp_ns1__GetChannelStatus, "ns1:GetChannelStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_4)
		return soap_closesock(soap);
	soap_default_ns1__GetChannelStatusResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__GetChannelStatusResponse(soap, &_param_4, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::GetDeviceTime(const char *endpoint, const char *soap_action, char *&GetDeviceTimeReturn)
{	struct soap *soap = this;
	struct ns1__GetDeviceTime soap_tmp_ns1__GetDeviceTime;
	struct ns1__GetDeviceTimeResponse *soap_tmp_ns1__GetDeviceTimeResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetDeviceTime(soap, &soap_tmp_ns1__GetDeviceTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetDeviceTime(soap, &soap_tmp_ns1__GetDeviceTime, "ns1:GetDeviceTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetDeviceTime(soap, &soap_tmp_ns1__GetDeviceTime, "ns1:GetDeviceTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	GetDeviceTimeReturn = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__GetDeviceTimeResponse = soap_get_ns1__GetDeviceTimeResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	GetDeviceTimeReturn = soap_tmp_ns1__GetDeviceTimeResponse->GetDeviceTimeReturn;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::GetDevID(const char *endpoint, const char *soap_action, char *&GetDevIDReturn)
{	struct soap *soap = this;
	struct ns1__GetDevID soap_tmp_ns1__GetDevID;
	struct ns1__GetDevIDResponse *soap_tmp_ns1__GetDevIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetDevID(soap, &soap_tmp_ns1__GetDevID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetDevID(soap, &soap_tmp_ns1__GetDevID, "ns1:GetDevID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetDevID(soap, &soap_tmp_ns1__GetDevID, "ns1:GetDevID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	GetDevIDReturn = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__GetDevIDResponse = soap_get_ns1__GetDevIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	GetDevIDReturn = soap_tmp_ns1__GetDevIDResponse->GetDevIDReturn;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::GetDiskFreeSpace(const char *endpoint, const char *soap_action, struct ns1__GetDiskFreeSpaceResponse &_param_5)
{	struct soap *soap = this;
	struct ns1__GetDiskFreeSpace soap_tmp_ns1__GetDiskFreeSpace;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetDiskFreeSpace(soap, &soap_tmp_ns1__GetDiskFreeSpace);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetDiskFreeSpace(soap, &soap_tmp_ns1__GetDiskFreeSpace, "ns1:GetDiskFreeSpace", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetDiskFreeSpace(soap, &soap_tmp_ns1__GetDiskFreeSpace, "ns1:GetDiskFreeSpace", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_5)
		return soap_closesock(soap);
	soap_default_ns1__GetDiskFreeSpaceResponse(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__GetDiskFreeSpaceResponse(soap, &_param_5, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::GetGlobalCfg(const char *endpoint, const char *soap_action, struct ns1__GetGlobalCfgResponse &_param_6)
{	struct soap *soap = this;
	struct ns1__GetGlobalCfg soap_tmp_ns1__GetGlobalCfg;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetGlobalCfg(soap, &soap_tmp_ns1__GetGlobalCfg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetGlobalCfg(soap, &soap_tmp_ns1__GetGlobalCfg, "ns1:GetGlobalCfg", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetGlobalCfg(soap, &soap_tmp_ns1__GetGlobalCfg, "ns1:GetGlobalCfg", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_6)
		return soap_closesock(soap);
	soap_default_ns1__GetGlobalCfgResponse(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__GetGlobalCfgResponse(soap, &_param_6, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::GetHardwareInfo(const char *endpoint, const char *soap_action, struct ns1__GetHardwareInfoResponse &_param_7)
{	struct soap *soap = this;
	struct ns1__GetHardwareInfo soap_tmp_ns1__GetHardwareInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetHardwareInfo(soap, &soap_tmp_ns1__GetHardwareInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetHardwareInfo(soap, &soap_tmp_ns1__GetHardwareInfo, "ns1:GetHardwareInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetHardwareInfo(soap, &soap_tmp_ns1__GetHardwareInfo, "ns1:GetHardwareInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_7)
		return soap_closesock(soap);
	soap_default_ns1__GetHardwareInfoResponse(soap, &_param_7);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__GetHardwareInfoResponse(soap, &_param_7, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::GetLineVol(const char *endpoint, const char *soap_action, struct ns1__GetLineVolResponse &_param_8)
{	struct soap *soap = this;
	struct ns1__GetLineVol soap_tmp_ns1__GetLineVol;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetLineVol(soap, &soap_tmp_ns1__GetLineVol);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetLineVol(soap, &soap_tmp_ns1__GetLineVol, "ns1:GetLineVol", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetLineVol(soap, &soap_tmp_ns1__GetLineVol, "ns1:GetLineVol", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_8)
		return soap_closesock(soap);
	soap_default_ns1__GetLineVolResponse(soap, &_param_8);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__GetLineVolResponse(soap, &_param_8, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::QueryRecord(const char *endpoint, const char *soap_action, char *StartDate, char *StartTime, char *EndDate, char *EndTime, int StartChnl, int EndChnl, int startindex, struct ns1__QueryRecordResponse &_param_9)
{	struct soap *soap = this;
	struct ns1__QueryRecord soap_tmp_ns1__QueryRecord;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__QueryRecord.StartDate = StartDate;
	soap_tmp_ns1__QueryRecord.StartTime = StartTime;
	soap_tmp_ns1__QueryRecord.EndDate = EndDate;
	soap_tmp_ns1__QueryRecord.EndTime = EndTime;
	soap_tmp_ns1__QueryRecord.StartChnl = StartChnl;
	soap_tmp_ns1__QueryRecord.EndChnl = EndChnl;
	soap_tmp_ns1__QueryRecord.startindex = startindex;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__QueryRecord(soap, &soap_tmp_ns1__QueryRecord);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__QueryRecord(soap, &soap_tmp_ns1__QueryRecord, "ns1:QueryRecord", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__QueryRecord(soap, &soap_tmp_ns1__QueryRecord, "ns1:QueryRecord", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_9)
		return soap_closesock(soap);
	soap_default_ns1__QueryRecordResponse(soap, &_param_9);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__QueryRecordResponse(soap, &_param_9, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::RebootDevice(const char *endpoint, const char *soap_action, int cmd, bool &RebootDeviceReturn)
{	struct soap *soap = this;
	struct ns1__RebootDevice soap_tmp_ns1__RebootDevice;
	struct ns1__RebootDeviceResponse *soap_tmp_ns1__RebootDeviceResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__RebootDevice.cmd = cmd;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__RebootDevice(soap, &soap_tmp_ns1__RebootDevice);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__RebootDevice(soap, &soap_tmp_ns1__RebootDevice, "ns1:RebootDevice", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__RebootDevice(soap, &soap_tmp_ns1__RebootDevice, "ns1:RebootDevice", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&RebootDeviceReturn)
		return soap_closesock(soap);
	soap_default_bool(soap, &RebootDeviceReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__RebootDeviceResponse = soap_get_ns1__RebootDeviceResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	RebootDeviceReturn = soap_tmp_ns1__RebootDeviceResponse->RebootDeviceReturn;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::SetAdminPassword(const char *endpoint, const char *soap_action, char *OldPassword, char *NewPassword, bool &SetAdminPasswordReturn)
{	struct soap *soap = this;
	struct ns1__SetAdminPassword soap_tmp_ns1__SetAdminPassword;
	struct ns1__SetAdminPasswordResponse *soap_tmp_ns1__SetAdminPasswordResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__SetAdminPassword.OldPassword = OldPassword;
	soap_tmp_ns1__SetAdminPassword.NewPassword = NewPassword;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__SetAdminPassword(soap, &soap_tmp_ns1__SetAdminPassword);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__SetAdminPassword(soap, &soap_tmp_ns1__SetAdminPassword, "ns1:SetAdminPassword", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__SetAdminPassword(soap, &soap_tmp_ns1__SetAdminPassword, "ns1:SetAdminPassword", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&SetAdminPasswordReturn)
		return soap_closesock(soap);
	soap_default_bool(soap, &SetAdminPasswordReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__SetAdminPasswordResponse = soap_get_ns1__SetAdminPasswordResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	SetAdminPasswordReturn = soap_tmp_ns1__SetAdminPasswordResponse->SetAdminPasswordReturn;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::SetChannelCfg(const char *endpoint, const char *soap_action, ns1__ChannelCfg *channelcfg, bool &SetChannelCfgReturn)
{	struct soap *soap = this;
	struct ns1__SetChannelCfg soap_tmp_ns1__SetChannelCfg;
	struct ns1__SetChannelCfgResponse *soap_tmp_ns1__SetChannelCfgResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__SetChannelCfg.channelcfg = channelcfg;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__SetChannelCfg(soap, &soap_tmp_ns1__SetChannelCfg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__SetChannelCfg(soap, &soap_tmp_ns1__SetChannelCfg, "ns1:SetChannelCfg", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__SetChannelCfg(soap, &soap_tmp_ns1__SetChannelCfg, "ns1:SetChannelCfg", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&SetChannelCfgReturn)
		return soap_closesock(soap);
	soap_default_bool(soap, &SetChannelCfgReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__SetChannelCfgResponse = soap_get_ns1__SetChannelCfgResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	SetChannelCfgReturn = soap_tmp_ns1__SetChannelCfgResponse->SetChannelCfgReturn;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::SetDateTime(const char *endpoint, const char *soap_action, char *time, bool &SetDateTimeReturn)
{	struct soap *soap = this;
	struct ns1__SetDateTime soap_tmp_ns1__SetDateTime;
	struct ns1__SetDateTimeResponse *soap_tmp_ns1__SetDateTimeResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__SetDateTime.time = time;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__SetDateTime(soap, &soap_tmp_ns1__SetDateTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__SetDateTime(soap, &soap_tmp_ns1__SetDateTime, "ns1:SetDateTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__SetDateTime(soap, &soap_tmp_ns1__SetDateTime, "ns1:SetDateTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&SetDateTimeReturn)
		return soap_closesock(soap);
	soap_default_bool(soap, &SetDateTimeReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__SetDateTimeResponse = soap_get_ns1__SetDateTimeResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	SetDateTimeReturn = soap_tmp_ns1__SetDateTimeResponse->SetDateTimeReturn;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::SetGlobalCfg(const char *endpoint, const char *soap_action, ns1__GlobalCfg *globalset, bool &SetGlobalCfgReturn)
{	struct soap *soap = this;
	struct ns1__SetGlobalCfg soap_tmp_ns1__SetGlobalCfg;
	struct ns1__SetGlobalCfgResponse *soap_tmp_ns1__SetGlobalCfgResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__SetGlobalCfg.globalset = globalset;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__SetGlobalCfg(soap, &soap_tmp_ns1__SetGlobalCfg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__SetGlobalCfg(soap, &soap_tmp_ns1__SetGlobalCfg, "ns1:SetGlobalCfg", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__SetGlobalCfg(soap, &soap_tmp_ns1__SetGlobalCfg, "ns1:SetGlobalCfg", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&SetGlobalCfgReturn)
		return soap_closesock(soap);
	soap_default_bool(soap, &SetGlobalCfgReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__SetGlobalCfgResponse = soap_get_ns1__SetGlobalCfgResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	SetGlobalCfgReturn = soap_tmp_ns1__SetGlobalCfgResponse->SetGlobalCfgReturn;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::SetNetCfg(const char *endpoint, const char *soap_action, ns1__NetCfg *NetCfg, bool &SetNetCfgReturn)
{	struct soap *soap = this;
	struct ns1__SetNetCfg soap_tmp_ns1__SetNetCfg;
	struct ns1__SetNetCfgResponse *soap_tmp_ns1__SetNetCfgResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__SetNetCfg.NetCfg = NetCfg;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__SetNetCfg(soap, &soap_tmp_ns1__SetNetCfg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__SetNetCfg(soap, &soap_tmp_ns1__SetNetCfg, "ns1:SetNetCfg", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__SetNetCfg(soap, &soap_tmp_ns1__SetNetCfg, "ns1:SetNetCfg", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&SetNetCfgReturn)
		return soap_closesock(soap);
	soap_default_bool(soap, &SetNetCfgReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__SetNetCfgResponse = soap_get_ns1__SetNetCfgResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	SetNetCfgReturn = soap_tmp_ns1__SetNetCfgResponse->SetNetCfgReturn;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::StartMonitor(const char *endpoint, const char *soap_action, ns1__MonitorInfo *monitorInfo, bool &StartMonitorReturn)
{	struct soap *soap = this;
	struct ns1__StartMonitor soap_tmp_ns1__StartMonitor;
	struct ns1__StartMonitorResponse *soap_tmp_ns1__StartMonitorResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__StartMonitor.monitorInfo = monitorInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__StartMonitor(soap, &soap_tmp_ns1__StartMonitor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__StartMonitor(soap, &soap_tmp_ns1__StartMonitor, "ns1:StartMonitor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__StartMonitor(soap, &soap_tmp_ns1__StartMonitor, "ns1:StartMonitor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&StartMonitorReturn)
		return soap_closesock(soap);
	soap_default_bool(soap, &StartMonitorReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__StartMonitorResponse = soap_get_ns1__StartMonitorResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	StartMonitorReturn = soap_tmp_ns1__StartMonitorResponse->StartMonitorReturn;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::StopMonitor(const char *endpoint, const char *soap_action, ns1__MonitorInfo *monitorInfo, bool &StopMonitorReturn)
{	struct soap *soap = this;
	struct ns1__StopMonitor soap_tmp_ns1__StopMonitor;
	struct ns1__StopMonitorResponse *soap_tmp_ns1__StopMonitorResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApiAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__StopMonitor.monitorInfo = monitorInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__StopMonitor(soap, &soap_tmp_ns1__StopMonitor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__StopMonitor(soap, &soap_tmp_ns1__StopMonitor, "ns1:StopMonitor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__StopMonitor(soap, &soap_tmp_ns1__StopMonitor, "ns1:StopMonitor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&StopMonitorReturn)
		return soap_closesock(soap);
	soap_default_bool(soap, &StopMonitorReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__StopMonitorResponse = soap_get_ns1__StopMonitorResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	StopMonitorReturn = soap_tmp_ns1__StopMonitorResponse->StopMonitorReturn;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::CheckMediaConnected(const char *endpoint, const char *soap_action, int &CheckMediaConnectedResponse)
{	struct soap *soap = this;
	struct ns1__CheckMediaConnected soap_tmp_ns1__CheckMediaConnected;
	struct ns1__CheckMediaConnectedResponse *soap_tmp_ns1__CheckMediaConnectedResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApi/CheckMediaConnected";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__CheckMediaConnected(soap, &soap_tmp_ns1__CheckMediaConnected);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__CheckMediaConnected(soap, &soap_tmp_ns1__CheckMediaConnected, "ns1:CheckMediaConnected", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__CheckMediaConnected(soap, &soap_tmp_ns1__CheckMediaConnected, "ns1:CheckMediaConnected", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&CheckMediaConnectedResponse)
		return soap_closesock(soap);
	soap_default_int(soap, &CheckMediaConnectedResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__CheckMediaConnectedResponse = soap_get_ns1__CheckMediaConnectedResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	CheckMediaConnectedResponse = soap_tmp_ns1__CheckMediaConnectedResponse->CheckMediaConnectedResponse;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::CheckMediaAvailable(const char *endpoint, const char *soap_action, int &CheckMediaAvailableResponse)
{	struct soap *soap = this;
	struct ns1__CheckMediaAvailable soap_tmp_ns1__CheckMediaAvailable;
	struct ns1__CheckMediaAvailableResponse *soap_tmp_ns1__CheckMediaAvailableResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApi/CheckMediaAvailable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__CheckMediaAvailable(soap, &soap_tmp_ns1__CheckMediaAvailable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__CheckMediaAvailable(soap, &soap_tmp_ns1__CheckMediaAvailable, "ns1:CheckMediaAvailable", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__CheckMediaAvailable(soap, &soap_tmp_ns1__CheckMediaAvailable, "ns1:CheckMediaAvailable", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&CheckMediaAvailableResponse)
		return soap_closesock(soap);
	soap_default_int(soap, &CheckMediaAvailableResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__CheckMediaAvailableResponse = soap_get_ns1__CheckMediaAvailableResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	CheckMediaAvailableResponse = soap_tmp_ns1__CheckMediaAvailableResponse->CheckMediaAvailableResponse;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::CalculateData(const char *endpoint, const char *soap_action, ns1__CalculateInput *calInput, struct ns1__CalculateDataResponse &_param_10)
{	struct soap *soap = this;
	struct ns1__CalculateData soap_tmp_ns1__CalculateData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApi/CalculateData";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__CalculateData.calInput = calInput;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__CalculateData(soap, &soap_tmp_ns1__CalculateData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__CalculateData(soap, &soap_tmp_ns1__CalculateData, "ns1:CalculateData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__CalculateData(soap, &soap_tmp_ns1__CalculateData, "ns1:CalculateData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_10)
		return soap_closesock(soap);
	soap_default_ns1__CalculateDataResponse(soap, &_param_10);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__CalculateDataResponse(soap, &_param_10, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::WriteDVD(const char *endpoint, const char *soap_action, int &WriteDVDResponse)
{	struct soap *soap = this;
	struct ns1__WriteDVD soap_tmp_ns1__WriteDVD;
	struct ns1__WriteDVDResponse *soap_tmp_ns1__WriteDVDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApi/WriteDVD";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__WriteDVD(soap, &soap_tmp_ns1__WriteDVD);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__WriteDVD(soap, &soap_tmp_ns1__WriteDVD, "ns1:WriteDVD", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__WriteDVD(soap, &soap_tmp_ns1__WriteDVD, "ns1:WriteDVD", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&WriteDVDResponse)
		return soap_closesock(soap);
	soap_default_int(soap, &WriteDVDResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__WriteDVDResponse = soap_get_ns1__WriteDVDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	WriteDVDResponse = soap_tmp_ns1__WriteDVDResponse->WriteDVDResponse;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::SetWebPort(const char *endpoint, const char *soap_action, int WebPort, bool &SetWebPortResponse)
{	struct soap *soap = this;
	struct ns1__SetWebPort soap_tmp_ns1__SetWebPort;
	struct ns1__SetWebPortResponse *soap_tmp_ns1__SetWebPortResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApi/SetWebPort";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__SetWebPort.WebPort = WebPort;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__SetWebPort(soap, &soap_tmp_ns1__SetWebPort);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__SetWebPort(soap, &soap_tmp_ns1__SetWebPort, "ns1:SetWebPort", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__SetWebPort(soap, &soap_tmp_ns1__SetWebPort, "ns1:SetWebPort", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&SetWebPortResponse)
		return soap_closesock(soap);
	soap_default_bool(soap, &SetWebPortResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__SetWebPortResponse = soap_get_ns1__SetWebPortResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	SetWebPortResponse = soap_tmp_ns1__SetWebPortResponse->SetWebPortResponse;
	return soap_closesock(soap);
}

int CfnXwebApiBindingProxy::GetWebPort(const char *endpoint, const char *soap_action, int &GetWebPortResponse)
{	struct soap *soap = this;
	struct ns1__GetWebPort soap_tmp_ns1__GetWebPort;
	struct ns1__GetWebPortResponse *soap_tmp_ns1__GetWebPortResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = g_szDefaultEndPoint;
	if (!soap_action)
		soap_action = "urn:CfnXwebApi/GetWebPort";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetWebPort(soap, &soap_tmp_ns1__GetWebPort);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetWebPort(soap, &soap_tmp_ns1__GetWebPort, "ns1:GetWebPort", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetWebPort(soap, &soap_tmp_ns1__GetWebPort, "ns1:GetWebPort", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&GetWebPortResponse)
		return soap_closesock(soap);
	soap_default_int(soap, &GetWebPortResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__GetWebPortResponse = soap_get_ns1__GetWebPortResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	GetWebPortResponse = soap_tmp_ns1__GetWebPortResponse->GetWebPortResponse;
	return soap_closesock(soap);
}
/* End of client proxy code */
