// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type/cmd.proto

package com.hikvision.finance.fms.cms.hpp.type;

public final class CmdProto {
  private CmdProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public enum CMD
      implements com.google.protobuf.ProtocolMessageEnum {
    CMD_REQ_SERVER_LOGIN(0, 10000),
    CMD_RSP_SERVER_LOGIN(1, 10001),
    CMD_MSG_SERVER_LOGOUT(2, 10002),
    CMD_REQ_SERVER_DATA(3, 10003),
    CMD_RSP_SERVER_DATA(4, 10004),
    CMD_DT_RECORDS_LIST(5, 11000),
    CMD_DT_STORAGE_INFO(6, 11001),
    CMD_MDT_RECORDS_STATUS(7, 11002),
    CMD_DT_RECORDS_LIST_EX(8, 11003),
    CMD_WDT_ALARMLOG_INFO(9, 12000),
    CMD_DT_ALARMLOG(10, 12001),
    CMD_MDT_ALARMTIME(11, 12002),
    CMD_DT_DVRDEVICE_LIST(12, 12003),
    CMD_DT_STORAGEDEVICE_LIST(13, 12004),
    CMD_MDT_DEVIDE_STATUS(14, 12005),
    CMD_MDT_DEVIDE_SPACE(15, 12006),
    CMD_MDT_SERVER_STATUS(16, 12007),
    CMD_DT_SYSCONFIG_LIST(17, 13000),
    CMD_DT_OVERTIMERECORD_LIST(18, 13001),
    CMD_DT_RECORD_LIST(19, 13002),
    CMD_DT_STORAGEDEVICE_INFO(20, 13003),
    CMD_DDT_RECORD_INFO(21, 13004),
    CMD_MDT_OVERTIMERECORD(22, 13005),
    CMD_DDT_OVERTIMELOG(23, 13006),
    CMD_DT_CLIENT_LOGIN(24, 14000),
    CMD_MSG_CLIENT_LOGOUT(25, 14002),
    CMD_REQ_CLIENT_PWD_CHECK(26, 14003),
    CMD_RSP_CLIENT_PWD_CHECK(27, 14004),
    CMD_DT_CHANGE_PASSWORD(28, 14006),
    CMD_DT_REGION_LIST(29, 15000),
    CMD_DT_PARAMDICTIONARY_LIST(30, 16000),
    CMD_DT_PRODUCTTYPE_LIST(31, 17000),
    CMD_DT_PRODUCT_LIST(32, 17002),
    CMD_DT_PRODUCT_INFO(33, 17004),
    CMD_DT_PRODUCT_WORD_TEMPLATE(34, 17006),
    CMD_WDT_CLIENT_RECORD(35, 19000),
    CMD_MDT_CLIENT_RECORD(36, 19001),
    CMD_DT_CLIENT_RECORD(37, 19002),
    CMD_DDT_ERROR_RECORD(38, 19003),
    CMD_DT_ERROR_RECORD(39, 19004),
    CMD_MDT_ERROR_RECORD(40, 19005),
    CMD_DT_PRINT_RECORD(41, 19006),
    CMD_DT_HIS_CLIENTINPUT(42, 20000),
    CMD_DT_SYSTEM_CONFIG(43, 21000),
    CMD_WRITE_WORK_STATE(44, 22000),
    ;
    
    public static final int CMD_REQ_SERVER_LOGIN_VALUE = 10000;
    public static final int CMD_RSP_SERVER_LOGIN_VALUE = 10001;
    public static final int CMD_MSG_SERVER_LOGOUT_VALUE = 10002;
    public static final int CMD_REQ_SERVER_DATA_VALUE = 10003;
    public static final int CMD_RSP_SERVER_DATA_VALUE = 10004;
    public static final int CMD_DT_RECORDS_LIST_VALUE = 11000;
    public static final int CMD_DT_STORAGE_INFO_VALUE = 11001;
    public static final int CMD_MDT_RECORDS_STATUS_VALUE = 11002;
    public static final int CMD_DT_RECORDS_LIST_EX_VALUE = 11003;
    public static final int CMD_WDT_ALARMLOG_INFO_VALUE = 12000;
    public static final int CMD_DT_ALARMLOG_VALUE = 12001;
    public static final int CMD_MDT_ALARMTIME_VALUE = 12002;
    public static final int CMD_DT_DVRDEVICE_LIST_VALUE = 12003;
    public static final int CMD_DT_STORAGEDEVICE_LIST_VALUE = 12004;
    public static final int CMD_MDT_DEVIDE_STATUS_VALUE = 12005;
    public static final int CMD_MDT_DEVIDE_SPACE_VALUE = 12006;
    public static final int CMD_MDT_SERVER_STATUS_VALUE = 12007;
    public static final int CMD_DT_SYSCONFIG_LIST_VALUE = 13000;
    public static final int CMD_DT_OVERTIMERECORD_LIST_VALUE = 13001;
    public static final int CMD_DT_RECORD_LIST_VALUE = 13002;
    public static final int CMD_DT_STORAGEDEVICE_INFO_VALUE = 13003;
    public static final int CMD_DDT_RECORD_INFO_VALUE = 13004;
    public static final int CMD_MDT_OVERTIMERECORD_VALUE = 13005;
    public static final int CMD_DDT_OVERTIMELOG_VALUE = 13006;
    public static final int CMD_DT_CLIENT_LOGIN_VALUE = 14000;
    public static final int CMD_MSG_CLIENT_LOGOUT_VALUE = 14002;
    public static final int CMD_REQ_CLIENT_PWD_CHECK_VALUE = 14003;
    public static final int CMD_RSP_CLIENT_PWD_CHECK_VALUE = 14004;
    public static final int CMD_DT_CHANGE_PASSWORD_VALUE = 14006;
    public static final int CMD_DT_REGION_LIST_VALUE = 15000;
    public static final int CMD_DT_PARAMDICTIONARY_LIST_VALUE = 16000;
    public static final int CMD_DT_PRODUCTTYPE_LIST_VALUE = 17000;
    public static final int CMD_DT_PRODUCT_LIST_VALUE = 17002;
    public static final int CMD_DT_PRODUCT_INFO_VALUE = 17004;
    public static final int CMD_DT_PRODUCT_WORD_TEMPLATE_VALUE = 17006;
    public static final int CMD_WDT_CLIENT_RECORD_VALUE = 19000;
    public static final int CMD_MDT_CLIENT_RECORD_VALUE = 19001;
    public static final int CMD_DT_CLIENT_RECORD_VALUE = 19002;
    public static final int CMD_DDT_ERROR_RECORD_VALUE = 19003;
    public static final int CMD_DT_ERROR_RECORD_VALUE = 19004;
    public static final int CMD_MDT_ERROR_RECORD_VALUE = 19005;
    public static final int CMD_DT_PRINT_RECORD_VALUE = 19006;
    public static final int CMD_DT_HIS_CLIENTINPUT_VALUE = 20000;
    public static final int CMD_DT_SYSTEM_CONFIG_VALUE = 21000;
    public static final int CMD_WRITE_WORK_STATE_VALUE = 22000;
    
    
    public final int getNumber() { return value; }
    
    public static CMD valueOf(int value) {
      switch (value) {
        case 10000: return CMD_REQ_SERVER_LOGIN;
        case 10001: return CMD_RSP_SERVER_LOGIN;
        case 10002: return CMD_MSG_SERVER_LOGOUT;
        case 10003: return CMD_REQ_SERVER_DATA;
        case 10004: return CMD_RSP_SERVER_DATA;
        case 11000: return CMD_DT_RECORDS_LIST;
        case 11001: return CMD_DT_STORAGE_INFO;
        case 11002: return CMD_MDT_RECORDS_STATUS;
        case 11003: return CMD_DT_RECORDS_LIST_EX;
        case 12000: return CMD_WDT_ALARMLOG_INFO;
        case 12001: return CMD_DT_ALARMLOG;
        case 12002: return CMD_MDT_ALARMTIME;
        case 12003: return CMD_DT_DVRDEVICE_LIST;
        case 12004: return CMD_DT_STORAGEDEVICE_LIST;
        case 12005: return CMD_MDT_DEVIDE_STATUS;
        case 12006: return CMD_MDT_DEVIDE_SPACE;
        case 12007: return CMD_MDT_SERVER_STATUS;
        case 13000: return CMD_DT_SYSCONFIG_LIST;
        case 13001: return CMD_DT_OVERTIMERECORD_LIST;
        case 13002: return CMD_DT_RECORD_LIST;
        case 13003: return CMD_DT_STORAGEDEVICE_INFO;
        case 13004: return CMD_DDT_RECORD_INFO;
        case 13005: return CMD_MDT_OVERTIMERECORD;
        case 13006: return CMD_DDT_OVERTIMELOG;
        case 14000: return CMD_DT_CLIENT_LOGIN;
        case 14002: return CMD_MSG_CLIENT_LOGOUT;
        case 14003: return CMD_REQ_CLIENT_PWD_CHECK;
        case 14004: return CMD_RSP_CLIENT_PWD_CHECK;
        case 14006: return CMD_DT_CHANGE_PASSWORD;
        case 15000: return CMD_DT_REGION_LIST;
        case 16000: return CMD_DT_PARAMDICTIONARY_LIST;
        case 17000: return CMD_DT_PRODUCTTYPE_LIST;
        case 17002: return CMD_DT_PRODUCT_LIST;
        case 17004: return CMD_DT_PRODUCT_INFO;
        case 17006: return CMD_DT_PRODUCT_WORD_TEMPLATE;
        case 19000: return CMD_WDT_CLIENT_RECORD;
        case 19001: return CMD_MDT_CLIENT_RECORD;
        case 19002: return CMD_DT_CLIENT_RECORD;
        case 19003: return CMD_DDT_ERROR_RECORD;
        case 19004: return CMD_DT_ERROR_RECORD;
        case 19005: return CMD_MDT_ERROR_RECORD;
        case 19006: return CMD_DT_PRINT_RECORD;
        case 20000: return CMD_DT_HIS_CLIENTINPUT;
        case 21000: return CMD_DT_SYSTEM_CONFIG;
        case 22000: return CMD_WRITE_WORK_STATE;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<CMD>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CMD>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CMD>() {
            public CMD findValueByNumber(int number) {
              return CMD.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hikvision.finance.fms.cms.hpp.type.CmdProto.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final CMD[] VALUES = {
      CMD_REQ_SERVER_LOGIN, CMD_RSP_SERVER_LOGIN, CMD_MSG_SERVER_LOGOUT, CMD_REQ_SERVER_DATA, CMD_RSP_SERVER_DATA, CMD_DT_RECORDS_LIST, CMD_DT_STORAGE_INFO, CMD_MDT_RECORDS_STATUS, CMD_DT_RECORDS_LIST_EX, CMD_WDT_ALARMLOG_INFO, CMD_DT_ALARMLOG, CMD_MDT_ALARMTIME, CMD_DT_DVRDEVICE_LIST, CMD_DT_STORAGEDEVICE_LIST, CMD_MDT_DEVIDE_STATUS, CMD_MDT_DEVIDE_SPACE, CMD_MDT_SERVER_STATUS, CMD_DT_SYSCONFIG_LIST, CMD_DT_OVERTIMERECORD_LIST, CMD_DT_RECORD_LIST, CMD_DT_STORAGEDEVICE_INFO, CMD_DDT_RECORD_INFO, CMD_MDT_OVERTIMERECORD, CMD_DDT_OVERTIMELOG, CMD_DT_CLIENT_LOGIN, CMD_MSG_CLIENT_LOGOUT, CMD_REQ_CLIENT_PWD_CHECK, CMD_RSP_CLIENT_PWD_CHECK, CMD_DT_CHANGE_PASSWORD, CMD_DT_REGION_LIST, CMD_DT_PARAMDICTIONARY_LIST, CMD_DT_PRODUCTTYPE_LIST, CMD_DT_PRODUCT_LIST, CMD_DT_PRODUCT_INFO, CMD_DT_PRODUCT_WORD_TEMPLATE, CMD_WDT_CLIENT_RECORD, CMD_MDT_CLIENT_RECORD, CMD_DT_CLIENT_RECORD, CMD_DDT_ERROR_RECORD, CMD_DT_ERROR_RECORD, CMD_MDT_ERROR_RECORD, CMD_DT_PRINT_RECORD, CMD_DT_HIS_CLIENTINPUT, CMD_DT_SYSTEM_CONFIG, CMD_WRITE_WORK_STATE, 
    };
    
    public static CMD valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private CMD(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:cms_8120.CMD)
  }
  
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016type/cmd.proto\022\010cms_8120*\370\t\n\003CMD\022\031\n\024CM" +
      "D_REQ_SERVER_LOGIN\020\220N\022\031\n\024CMD_RSP_SERVER_" +
      "LOGIN\020\221N\022\032\n\025CMD_MSG_SERVER_LOGOUT\020\222N\022\030\n\023" +
      "CMD_REQ_SERVER_DATA\020\223N\022\030\n\023CMD_RSP_SERVER" +
      "_DATA\020\224N\022\030\n\023CMD_DT_RECORDS_LIST\020\370U\022\030\n\023CM" +
      "D_DT_STORAGE_INFO\020\371U\022\033\n\026CMD_MDT_RECORDS_" +
      "STATUS\020\372U\022\033\n\026CMD_DT_RECORDS_LIST_EX\020\373U\022\032" +
      "\n\025CMD_WDT_ALARMLOG_INFO\020\340]\022\024\n\017CMD_DT_ALA" +
      "RMLOG\020\341]\022\026\n\021CMD_MDT_ALARMTIME\020\342]\022\032\n\025CMD_" +
      "DT_DVRDEVICE_LIST\020\343]\022\036\n\031CMD_DT_STORAGEDE",
      "VICE_LIST\020\344]\022\032\n\025CMD_MDT_DEVIDE_STATUS\020\345]" +
      "\022\031\n\024CMD_MDT_DEVIDE_SPACE\020\346]\022\032\n\025CMD_MDT_S" +
      "ERVER_STATUS\020\347]\022\032\n\025CMD_DT_SYSCONFIG_LIST" +
      "\020\310e\022\037\n\032CMD_DT_OVERTIMERECORD_LIST\020\311e\022\027\n\022" +
      "CMD_DT_RECORD_LIST\020\312e\022\036\n\031CMD_DT_STORAGED" +
      "EVICE_INFO\020\313e\022\030\n\023CMD_DDT_RECORD_INFO\020\314e\022" +
      "\033\n\026CMD_MDT_OVERTIMERECORD\020\315e\022\030\n\023CMD_DDT_" +
      "OVERTIMELOG\020\316e\022\030\n\023CMD_DT_CLIENT_LOGIN\020\260m" +
      "\022\032\n\025CMD_MSG_CLIENT_LOGOUT\020\262m\022\035\n\030CMD_REQ_" +
      "CLIENT_PWD_CHECK\020\263m\022\035\n\030CMD_RSP_CLIENT_PW",
      "D_CHECK\020\264m\022\033\n\026CMD_DT_CHANGE_PASSWORD\020\266m\022" +
      "\027\n\022CMD_DT_REGION_LIST\020\230u\022 \n\033CMD_DT_PARAM" +
      "DICTIONARY_LIST\020\200}\022\035\n\027CMD_DT_PRODUCTTYPE" +
      "_LIST\020\350\204\001\022\031\n\023CMD_DT_PRODUCT_LIST\020\352\204\001\022\031\n\023" +
      "CMD_DT_PRODUCT_INFO\020\354\204\001\022\"\n\034CMD_DT_PRODUC" +
      "T_WORD_TEMPLATE\020\356\204\001\022\033\n\025CMD_WDT_CLIENT_RE" +
      "CORD\020\270\224\001\022\033\n\025CMD_MDT_CLIENT_RECORD\020\271\224\001\022\032\n" +
      "\024CMD_DT_CLIENT_RECORD\020\272\224\001\022\032\n\024CMD_DDT_ERR" +
      "OR_RECORD\020\273\224\001\022\031\n\023CMD_DT_ERROR_RECORD\020\274\224\001" +
      "\022\032\n\024CMD_MDT_ERROR_RECORD\020\275\224\001\022\031\n\023CMD_DT_P",
      "RINT_RECORD\020\276\224\001\022\034\n\026CMD_DT_HIS_CLIENTINPU" +
      "T\020\240\234\001\022\032\n\024CMD_DT_SYSTEM_CONFIG\020\210\244\001\022\032\n\024CMD" +
      "_WRITE_WORK_STATE\020\360\253\001B2\n&com.hikvision.f" +
      "inance.fms.cms.hpp.typeB\010CmdProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
