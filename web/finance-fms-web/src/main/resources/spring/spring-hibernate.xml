<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
	
	<!-- 基于Druid数据库链接池的数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性driverClassName、 url、user、password -->
		<property name="driverClassName" value="${hibernate.connection.driver_class}" />
		<property name="url" value="${hibernate.connection.url}" />
		<property name="username" value="${hibernate.connection.username}" />
		<property name="password" value="${hibernate.connection.password}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
		<!-- 初始化时建立物理连接的个数，缺省值为0 -->
		<property name="initialSize" value="5" />
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="${proxool.minimum-connection-count}" />
		<!-- 最大连接池数量，缺省值为8 -->
		<property name="maxActive" value="${proxool.maximum-connection-count}" />

		<!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
		<property name="maxWait" value="60000" />
		
		<!-- 
			有些数据库连接的时候有超时限制（MySQL连接在8小时后断开），或者由于网络中断等原因，连接池的连接会出现失效的情况，这时候可以设置一个testWhileIdle参数为true，
			如果检测到当前连接不活跃的时间超过了timeBetweenEvictionRunsMillis，则去手动检测一下当前连接的有效性，在保证确实有效后才加以使用。
			在检测活跃性时，如果当前的活跃时间大于minEvictableIdleTimeMillis，则认为需要关闭当前连接。当
			然，为了保证绝对的可用性，你也可以使用testOnBorrow为true（即在每次获取Connection对象时都检测其可用性），不过这样会影响性能。
		-->
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒（3600000:为1小时） -->
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒(300000:为5分钟) -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
		<property name="validationQuery" value="${proxool.house-keeping-test-sql}" />
		<!-- 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。建议配置为true，不影响性能，并且保证安全性。-->
      	<property name="testWhileIdle" value="true" />
      	<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。缺省值:true -->
      	<property name="testOnBorrow" value="false" />
      	<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。缺省值:false -->
      	<property name="testOnReturn" value="false" />
		<property name="proxyFilters">  
            <list>  
                <ref bean="stat-filter" />  
                <ref bean="log-filter" />  
            </list>   
        </property>
		<property name="filters" value="wall" />
	</bean>	
	
	<bean id="hikModBaseEntityInterceptor" class="com.hikvision.finance.fms.common.interceptor.HikModBaseEntityInterceptor" autowire="byName"></bean> 

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" p:dataSource-ref="dataSource">
		<property name="packagesToScan">
			<!-- 扫描注解方式的model -->
			<list>
				<value>com.hikvision.finance.fms.model</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.connection.autocommit">false</prop>
				<prop key="hibernate.connection.release_mode">after_transaction</prop>
				<!-- <prop key="hibernate.jdbc.batch_size">${hibernate.batch_size}</prop> -->
			</props>
		</property>
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener" />
				</entry>
				<entry key="update">
					<bean class="com.hikvision.finance.fms.common.listener.FmsUpdateEventListener"/>
				</entry>
				<entry key="save-update">
					<bean class="com.hikvision.finance.fms.common.listener.FmsSaveOrUpdateEventListener" />
				</entry>
			</map>
		</property>
		<property name="entityInterceptor" ref="hikModBaseEntityInterceptor" /> 
	</bean>
	
	<bean id="hibernateTxManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager" p:sessionFactory-ref="sessionFactory" /> 

	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="hibernateTxManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="move*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="paste*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="reset*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="enable*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="disable*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="copy*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="write*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="export*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="log*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<tx:advice id="cmstxAdvice" transaction-manager="hibernateTxManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 哪些类的哪些方法参与事务 -->
	<aop:config>
		<aop:pointcut id="allServiceMethod" expression="execution(* com.hikvision.finance.fms..*.impl.*ServiceImpl.*(..))" />
		<aop:advisor pointcut-ref="allServiceMethod" advice-ref="txAdvice" />
	</aop:config>

	<aop:config>
		<aop:pointcut id="cmsallServiceMethod" expression="execution(* com.hikvision.finance.fms.cms..*.*ServiceImpl.*(..))" />
		<aop:advisor pointcut-ref="cmsallServiceMethod" advice-ref="cmstxAdvice" />
	</aop:config>

	<bean id="pageHibernateTemplate" class="com.hikvision.finance.extend.hibernate.template.PageHibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="generalDao" class="com.hikvision.finance.extend.hibernate.dao.GeneralDao" autowire="byName" />


<!-- Druid拦截 
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.hikvision.finance.fms.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config> 
-->
	<!-- 慢SQL记录 5秒为慢sql-->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="mergeSql" value="true" />
		<property name="slowSqlMillis" value="5000" />
		<property name="logSlowSql" value="true" />
	</bean>
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter"></bean>  

</beans>
